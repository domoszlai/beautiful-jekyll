{"version":3,"sources":["model/Recipe.tsx","components/RecipeSelector.tsx","RecipeDB.tsx","components/LoadFileDialog.tsx","components/SaveFileDialog.tsx","filters/RandomFilter.tsx","filters/MinIngredientsFilter.tsx","filters/MaxReuseFilter.tsx","filters/Filter.tsx","model/PlanSettings.tsx","components/PlanSettings.tsx","PlanExporter.ts","components/PlanVisualizer.tsx","components/RecipeEditor.tsx","model/Plan.tsx","Planner.tsx","App.tsx","index.js"],"names":["Ingredient","name","amount","unit","this","o","Error","undefined","Recipe","id","title","summary","source","sourceUrl","readyInMinutes","ingredients","map","i","toJSON","replace","c","r","Math","random","toString","Array","isArray","fromJSON","RecipeSelector","recipeIndex","selectedRecipes","maxNrSelected","onUpdate","onEdit","React","useState","filter","setFilter","currentRecipeid","setCurrentRecipeId","filteredRecipes","trim","length","all","search","res","key","selectedRecipeMap","Map","getId","renderRecipe","recipe","getSummary","getIngredients","getName","sort","n","Col","sm","className","Popover","Title","as","getTitle","Content","Container","Row","Image","src","getReadyInMinutes","getSource","listItems","OverlayTrigger","placement","overlay","onEnter","onExit","ListGroup","Item","Form","Check","type","label","disabled","has","size","checked","onChange","delete","set","from","values","Button","variant","onClick","e","editButton","onSubmit","preventDefault","InputGroup","Prepend","Text","FormControl","placeholder","event","currentTarget","value","Group","controlId","RecipeIndex","index","recipesMap","fieldAccessors","join","fieldBoostFactors","termFilter","term","normalize","toLowerCase","add","toUpdate","JSON","stringify","get","newMap","addDocumentToIndex","words","addAll","recipes","reduce","idx","q","query","acc","push","score","removeDocumentFromIndex","Set","getAll","keys","count","createIndex","new","LoadFileDialog","loadButtonTitle","onClose","onLoad","file","setFile","Modal","show","onHide","Header","closeButton","Body","target","files","Footer","SaveFileDialog","saveButtonTitle","onSave","data","initialFileName","extension","fileName","setFileName","Label","Control","download","MinIngredientsFilter","explicitRecipes","remainingRecipes","ingredientsAlreadyUsed","concat","flatMap","scoredRecipes","ingredientsAlreadyUSed","sum","a","b","result","scoredRecipe","MaxReuseFilter","randomFilter","max","floor","Optimization","filters","filterMap","f","createFilters","PlanSettingsPanel","props","collapsed","setCollapsed","filterList","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","planSettings","nrRecipes","newNrRecipes","newSettings","clone","changeNrRecipes","parseInt","optimization","filterId","changeOptimization","PlanSettings","Object","create","getIngredientMap","ingredientMap","forEach","oneIngredientRecord","getAmount","getUnit","calculateShoppingList","ingredientList","ingredient","ingredientsRows","amounts","line","exportShoppingList","plan","allRecipes","row","shift","exportPlan","wb","XLSX","utils","book_new","ingredientsWS","aoa_to_sheet","book_append_sheet","planHeaderRow","unshift","planDataRows","recipeIngredient","planRows","planWS","recipeRows","recipeWS","bytes","write","bookType","bookSST","Blob","PlanVisualizer","explicitRecipeHeaderList","calculatedRecipeHeaderList","calculatedRecipes","ingredientLineList","perRecipe","Table","striped","bordered","RecipeEditor","recipeJSON","setRecipeJSON","isTitleInvalid","setIsTitleInvalid","isIngredientsInvalid","setIsIngredientsInvalid","ingredientCSV","setIngredientCSV","tribute","Tribute","autocompleteMode","triggerTribute","ingredientEditorElement","current","console","log","selectionStart","charAt","attach","showMenuForCollection","deleteRecipe","onDelete","focusElement","createRef","onEntered","focus","isInvalid","newVal","ref","Feedback","rows","Number","isNaN","onFocus","lines","split","invalid","parts","s","Plan","optimizePlan","previousPlan","settings","nrRecipesToCalculate","allRecipeIds","freeRecipeIds","calcultedRecipes","freeRecipes","currentRecipes","finalRecipe","newPlan","Dialog","Menu","onLoadFile","onNewRecipe","onSaveFile","unsavedChanges","Navbar","bg","Brand","href","aria-controls","Nav","NavDropdown","active","Divider","Link","process","App","addRecipes","newRecipes","fromFile","setState","st","needsSave","ret","newRecipeIndex","saveRecipe","closeRecipeEditor","onFileLoaded","ev","json","parse","version","deserializeRecipes","error","message","closeDialog","loadFile","reader","FileReader","onload","readAsText","genRecipeFileContent","str","TextEncoder","encode","serializeRecipes","state","fileSaved","showDialog","dialog","recipeToEdit","dismissError","updatePlanSettings","ps","updateExplicitRecipes","newExplicitRecipes","editRecipe","renderDialog","LoadFile","SaveFile","SavePlanXLS","ShoppingList","cols","readOnly","fluid","Alert","dismissible","onBeforeunload","xs","height","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7544839e.chunk.js","sourcesContent":["export interface IngredientJSON {\r\n    name: string,\r\n    amount: number,\r\n    unit: string\r\n}   \r\n \r\nexport interface RecipeJSON {\r\n    id: string,\r\n    title: string,\r\n    source?: string,\r\n    summary?: string,\r\n    readyInMinutes?: number,\r\n    ingredients: IngredientJSON[]\r\n}\r\n\r\ninterface RecipeFileJSON {\r\n    version: number,\r\n    recipes: RecipeJSON[]\r\n}\r\n\r\nexport class Ingredient {\r\n\r\n    private constructor(name: string, amount: number, unit: string)\r\n    {\r\n        this.name = name;\r\n        this.amount = amount;\r\n        this.unit = unit;\r\n    }\r\n\r\n    public getName(): string\r\n    {\r\n        return this.name;\r\n    }\r\n\r\n    public getAmount(): number\r\n    {\r\n        return this.amount;\r\n    }\r\n\r\n    public getUnit(): string\r\n    {\r\n        return this.unit;\r\n    }\r\n\r\n    public static fromJSON(o: IngredientJSON) : Ingredient\r\n    {\r\n        if(!o.name)\r\n        {\r\n            throw new Error(\"Missing ingredient name\");\r\n        }\r\n\r\n        if(!o.unit)\r\n        {\r\n            throw new Error(\"Missing ingredient unit\");\r\n        }\r\n\r\n        if(o.amount === undefined)\r\n        {\r\n            throw new Error(\"Missing ingredient amount\");\r\n        }\r\n\r\n        return new Ingredient(o.name, o.amount, o.unit);\r\n    }\r\n\r\n    public toJSON() : IngredientJSON\r\n    {\r\n        return {\r\n            name: this.name,\r\n            amount: this.amount,\r\n            unit: this.unit\r\n        }\r\n    }\r\n\r\n    private name: string; \r\n    private amount: number;\r\n    private unit: string;\r\n}\r\n\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\nexport class Recipe {\r\n    \r\n    private constructor(id: string, title: string)\r\n    {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.ingredients = [];\r\n    }\r\n\r\n    public getId(): string\r\n    {\r\n        return this.id;\r\n    }\r\n\r\n    public getTitle(): string\r\n    {\r\n        return this.title;\r\n    }\r\n\r\n    public getSummary(): string | undefined\r\n    {\r\n        return this.summary;\r\n    }\r\n\r\n    public getSource(): string | undefined\r\n    {\r\n        return this.source;\r\n    }\r\n\r\n    public getReadyInMinutes(): number | undefined\r\n    {\r\n        return this.readyInMinutes;\r\n    }\r\n\r\n    public getIngredients(): Ingredient[] \r\n    {\r\n        return this.ingredients;\r\n    }\r\n\r\n    public static fromJSON(o: RecipeJSON) : Recipe\r\n    {\r\n        if(!o.id)\r\n        {\r\n            o.id = uuidv4();\r\n        }\r\n\r\n        if(!o.title)\r\n        {\r\n            throw new Error(\"Missing recipe title\");\r\n        }\r\n\r\n        let r = new Recipe(o.id, o.title);\r\n\r\n        r.summary = o.summary;\r\n        r.source = o.source;\r\n        r.readyInMinutes = o.readyInMinutes;\r\n\r\n        if(Array.isArray(o.ingredients))\r\n        {\r\n            r.ingredients = o.ingredients.map(i => Ingredient.fromJSON(i));\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    public toJSON() : RecipeJSON\r\n    {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            summary: this.summary,\r\n            source: this.source,\r\n            readyInMinutes: this.readyInMinutes,\r\n            ingredients: this.ingredients.map(i=>i.toJSON())\r\n        }\r\n    }\r\n\r\n    private id: string;\r\n    private title: string;\r\n    private summary?: string;\r\n    private source?: string;\r\n    private sourceUrl?: string;\r\n    private readyInMinutes?: number;\r\n    private ingredients: Ingredient[];\r\n}\r\n\r\nexport function serializeRecipes(recipes: Recipe[]) {\r\n    let str = JSON.stringify({version: 1, recipes: recipes});\r\n    let bytes = new TextEncoder().encode(str);\r\n    let blob = new Blob([bytes], {\r\n        type: \"application/json;charset=utf-8\"\r\n    });\r\n    return blob;\r\n}\r\n\r\nexport function deserializeRecipes(data: string) {\r\n    let json = JSON.parse(data);\r\n\r\n    if(Array.isArray(json))\r\n    {\r\n        let v0: RecipeJSON[] = json;\r\n        return v0.map(Recipe.fromJSON);\r\n    }\r\n\r\n    if(typeof json === 'object')\r\n    {\r\n        let r: RecipeFileJSON = json;\r\n        \r\n        if(typeof r.version !== 'undefined')\r\n        {\r\n            if(r.version !== 1)\r\n            {\r\n                throw new Error(\"Invalid recipe file version\");\r\n            }\r\n    \r\n            if(Array.isArray(r.recipes))\r\n            {\r\n                return r.recipes.map(Recipe.fromJSON);\r\n            }    \r\n        }\r\n    }\r\n\r\n    throw new Error(\"Invalid recipe file\");\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Form, ListGroup, FormControl, InputGroup} from 'react-bootstrap';\r\nimport {Container, OverlayTrigger, Popover, Col, Row, Image} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport {Recipe} from '../model/Recipe';\r\nimport {RecipeIndex} from '../RecipeDB';\r\n\r\ntype RecipeSelectorProps = {\r\n    recipeIndex: RecipeIndex,\r\n    selectedRecipes: Recipe[],\r\n    maxNrSelected: number,\r\n    onUpdate: (recipes: Recipe[]) => void,\r\n    onEdit: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeSelector: FunctionComponent<RecipeSelectorProps> = ({recipeIndex, selectedRecipes, maxNrSelected, onUpdate, onEdit}) => {\r\n\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const [currentRecipeid, setCurrentRecipeId] = React.useState<string | null>(null);\r\n\r\n    const refresh = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(event.currentTarget.value);\r\n    }\r\n\r\n    const filteredRecipes = (filter.trim().length === 0) ? \r\n        recipeIndex.all() : recipeIndex.search(filter).map(res=>res.key);\r\n\r\n    const selectedRecipeMap = new Map(selectedRecipes.map(r => [r.getId(), r]))\r\n\r\n    const toggleSelection = (r: Recipe) => {\r\n        if(selectedRecipeMap.has(r.getId()))\r\n        {\r\n            selectedRecipeMap.delete(r.getId());\r\n        }\r\n        else\r\n        {\r\n            selectedRecipeMap.set(r.getId(), r);\r\n        }\r\n\r\n        onUpdate(Array.from(selectedRecipeMap.values()));\r\n    }\r\n\r\n    const renderRecipe = (recipe: Recipe) => {\r\n\r\n        const summary = recipe.getSummary() ? recipe.getSummary() : \"Summary is not available\"\r\n        const ingredients = recipe.getIngredients().map(r=> r.getName())\r\n                                              .sort()\r\n                                              .map(n => <Col sm=\"auto\" className=\"border mt-1 ml-2 pt-2 pb-2\">{n}</Col>)\r\n\r\n        return (\r\n            <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h4\">{recipe.getTitle()}</Popover.Title>\r\n                <Popover.Content>\r\n                <Container className=\"pl-0 pr-0\">\r\n                <Row className=\"pb-2\">\r\n                    <Col>{summary}</Col>\r\n                </Row>\r\n                <Row className=\"pb-2\">\r\n                    <Col sm=\"auto\"><Image src=\"clock20x20.jpg\"/></Col>\r\n                    <Col sm=\"auto\">{recipe.getReadyInMinutes() ? \"\" + recipe.getReadyInMinutes() + \" mintes\" : \"unknown\"}</Col>\r\n                    <Col sm=\"auto\"><Image src=\"babyowl17x20.jpg\"/></Col>\r\n                    <Col sm=\"auto\">{recipe.getSource() ? recipe.getSource() : \"-\"}</Col>\r\n                </Row>\r\n                <Row>\r\n                        {ingredients}\r\n                </Row>\r\n                </Container> \r\n                </Popover.Content>\r\n            </Popover>)\r\n    }\r\n\r\n    const editButton = (recipe: Recipe) => {\r\n        if(currentRecipeid===recipe.getId())\r\n        {\r\n            return <Button variant=\"outline-primary\" size=\"sm\" className=\"mt-2\" onClick={e=>onEdit(recipe)}>Edit</Button>\r\n        }\r\n        else\r\n        {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const listItems = filteredRecipes\r\n        .map((recipe) =>\r\n                <OverlayTrigger placement=\"right\" overlay={renderRecipe(recipe)} \r\n                                    onEnter={()=>setCurrentRecipeId(recipe.getId())}\r\n                                    onExit={()=>setCurrentRecipeId(null)}\r\n                                    key={recipe.getId()}>\r\n                    <ListGroup.Item key={recipe.getId()}>\r\n                        <Form.Check type=\"checkbox\" \r\n                                    id={recipe.getId()}\r\n                                    label={recipe.getTitle()}\r\n                                    disabled={!selectedRecipeMap.has(recipe.getId()) && selectedRecipeMap.size >= maxNrSelected}\r\n                                    checked={selectedRecipeMap.has(recipe.getId())}\r\n                                    onChange={() => toggleSelection(recipe)}/>\r\n                        {editButton(recipe)}\r\n                    </ListGroup.Item>\r\n                </OverlayTrigger>\r\n            );\r\n\r\n    return (\r\n        <Form className=\"pt-2\" onSubmit={(e)=>e.preventDefault()}>\r\n        <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl type=\"text\" placeholder=\"Filter recipes\" onChange={refresh}/>\r\n        </InputGroup>\r\n        <Form.Group controlId=\"recipeGroup\">\r\n            <ListGroup>{listItems}</ListGroup>\r\n        </Form.Group>\r\n        </Form>\r\n    );\r\n}","import { Index, createIndex, addDocumentToIndex, removeDocumentFromIndex } from 'ndx';\r\nimport { query, QueryResult } from 'ndx-query';\r\nimport { words } from 'lodash';\r\n\r\nimport { Recipe } from './model/Recipe';\r\n\r\nimport { Map } from 'immutable';\r\n\r\nexport class RecipeIndex {\r\n\r\n    private readonly recipesMap: Map<string, Recipe>;\r\n    private readonly index: Index<string>;\r\n\r\n    private readonly fieldAccessors = [\r\n        (r: Recipe) => r.getTitle(),\r\n        (r: Recipe) => r.getSummary() ?? \"\",\r\n        (r: Recipe) => r.getIngredients().map(i => i.getName()).join(\" \")\r\n    ]\r\n\r\n    private readonly fieldBoostFactors = [2, 0.5, 1];\r\n\r\n    constructor(index?: Index<string>, recipesMap?: Map<string, Recipe>) {\r\n        this.index = index ? index : createIndex<string>(3);\r\n        this.recipesMap = recipesMap ? recipesMap : Map({}); \r\n    }\r\n\r\n    private termFilter = (term: string) => {\r\n        return term.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\r\n    }\r\n\r\n    public static new = () => {\r\n        return new RecipeIndex();\r\n    }\r\n\r\n    // `add()` function will add documents to the index.\r\n    public add = (r: Recipe) => {\r\n        let key = r.getId();\r\n\r\n        let toUpdate = true;\r\n\r\n        if(this.recipesMap.has(key))\r\n        {\r\n            if(JSON.stringify(this.recipesMap.get(key)) === JSON.stringify(r))\r\n            {\r\n                toUpdate = false;\r\n            }\r\n        }\r\n\r\n        if(toUpdate)\r\n        {\r\n            // Don't add the same document twice, ndx becomes crazy...\r\n            this.delete(key);\r\n            let newMap = this.recipesMap.set(key, r);\r\n\r\n            addDocumentToIndex(\r\n                this.index,\r\n                this.fieldAccessors,\r\n                // Tokenizer is a function that breaks text into words, phrases, symbols, or other meaningful elements\r\n                // called tokens.\r\n                // Lodash function `words()` splits string into an array of its words, see https://lodash.com/docs/#words for\r\n                // details.\r\n                words,\r\n                // Filter is a function that processes tokens and returns terms, terms are used in Inverted Index to\r\n                // index documents.\r\n                this.termFilter,\r\n                // Document key, it can be a unique document id or a reference to a document if you want to store all documents\r\n                // in memory.\r\n                key,\r\n                // Document.\r\n                r,\r\n            );\r\n\r\n            return new RecipeIndex(this.index, newMap);\r\n        }\r\n        else\r\n        {\r\n            return this;\r\n        }\r\n    };\r\n\r\n    public addAll = (recipes: Recipe[]) => {\r\n        return recipes.reduce((idx: RecipeIndex, recipe: Recipe) => {\r\n            return idx.add(recipe);\r\n        }, this);\r\n    };\r\n\r\n    // `search()` function will be used to perform queries.\r\n    public search = (q: string) => query<string>(\r\n          this.index,\r\n          this.fieldBoostFactors,\r\n          // BM25 ranking function constants:\r\n          1.2,  // BM25 k1 constant, controls non-linear term frequency normalization (saturation).\r\n          0.75, // BM25 b constant, controls to what degree document length normalizes tf values.\r\n          words,\r\n          this.termFilter,\r\n          // Set of removed documents, in this example we don't want to support removing documents from the index,\r\n          // so we can ignore it by specifying this set as `undefined` value.\r\n          undefined, \r\n          q,\r\n        ).reduce((acc: QueryResult<Recipe>[],res) => {\r\n            let r = this.recipesMap.get(res.key);\r\n            if(r)\r\n            {\r\n                acc.push({key: r, score: res.score});\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n    public all = () => {\r\n        return Array.from(this.recipesMap.values());\r\n    };\r\n\r\n    public get = (key: string) => {\r\n        return this.recipesMap.get(key);\r\n    };\r\n\r\n    public delete = (key: string) => {\r\n        if(this.recipesMap.has(key))\r\n        {\r\n            let newMap = this.recipesMap.delete(key);\r\n            removeDocumentFromIndex(\r\n                this.index,\r\n                new Set(),\r\n                key);    \r\n            return new RecipeIndex(this.index, newMap);    \r\n        }\r\n        else\r\n        {\r\n            return this;\r\n        }\r\n    };\r\n\r\n    public getAll = (keys: string[]) => {\r\n        return keys.reduce((acc: Recipe[],key) => {\r\n            let r = this.recipesMap.get(key);\r\n            if(r)\r\n            {\r\n                acc.push(r);\r\n            }\r\n            return acc;\r\n        }, []);\r\n    };\r\n\r\n    public count = () => {\r\n        return this.recipesMap.size;\r\n    }\r\n};\r\n    \r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\ntype LoadFileDialogProps = {\r\n    title: string,\r\n    loadButtonTitle: string,\r\n    onClose: () => void,\r\n    onLoad: (file: File) => void\r\n}\r\n\r\nexport const LoadFileDialog: FunctionComponent<LoadFileDialogProps> = ({title, loadButtonTitle, onClose, onLoad}) => {\r\n\r\n    const [file, setFile] = React.useState<null | File>(null);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <FormControl type=\"file\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                                if(e.target.files)\r\n                                                {\r\n                                                    setFile(e.target.files[0])\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    setFile(null)\r\n                                                }\r\n                                            }}/>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!file} \r\n                        onClick={() => {if(file) onLoad(file)}}>{loadButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport download from 'downloadjs'\r\n\r\ntype SaveFileDialogProps = {\r\n    title: string,\r\n    saveButtonTitle: string,\r\n    data: Blob,\r\n    type: string,\r\n    initialFileName: string,\r\n    extension: string,\r\n    onClose: () => void,\r\n    onSave: () => void\r\n}\r\n\r\nexport const SaveFileDialog: FunctionComponent<SaveFileDialogProps> \r\n                = ({title, saveButtonTitle, onClose, onSave, data, type, initialFileName, extension }) => {\r\n\r\n    const [fileName, setFileName] = React.useState(initialFileName);\r\n\r\n    const startDownload = () => {\r\n        download(data, fileName+\".\"+extension, type)\r\n    }\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicFileName\">\r\n        <Form.Label>File name</Form.Label>\r\n        <Form.Control type=\"fileName\" value={fileName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFileName(e.target.value)}/>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!fileName || fileName.length===0} \r\n                        onClick={() => {startDownload(); onSave()}}>{saveButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport class RandomFilter implements Filter {\r\n    public name = \"Random filter\";\r\n    public id =\"rnd\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n        if(remainingRecipes.length === 0)\r\n        {\r\n            return []\r\n        }\r\n        else\r\n        {\r\n            return [remainingRecipes[getRandomInt(remainingRecipes.length)]];\r\n        }\r\n    }\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n    \r\n    return recipe.getIngredients().reduce((sum, i) => {\r\n        if(ingredientsAlreadyUSed.has(i.getName()))\r\n        {\r\n            return sum;\r\n        }\r\n        else\r\n        {\r\n            return sum+1;\r\n        }\r\n    }, 0);\r\n}\r\n\r\nexport class MinIngredientsFilter implements Filter {\r\n    public name = \"Minimal number of ingredients\";\r\n    public id =\"miningredients\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n\r\n        const ingredientsAlreadyUsed = new Set<string>(\r\n            explicitRecipes.concat(selectedRecipes).flatMap(r => r.getIngredients().map(i => i.getName())));\r\n\r\n        const scoredRecipes = remainingRecipes\r\n            .map(r => ({recipe: r, score: getScore(ingredientsAlreadyUsed, r)}))\r\n            .sort((a,b) => {\r\n                if(a.score < b.score)\r\n                {\r\n                    return -1;\r\n                }\r\n                else if(a.score > b.score)\r\n                {\r\n                    return 1;\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n        const result: Recipe[] = [];\r\n\r\n        if(scoredRecipes.length>0)\r\n        {\r\n            for(let scoredRecipe of scoredRecipes)\r\n            {\r\n                if(scoredRecipes[0].score === scoredRecipe.score)\r\n                {\r\n                    result.push(scoredRecipe.recipe);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n    \r\n    return recipe.getIngredients().reduce((sum, i) => {\r\n        if(ingredientsAlreadyUSed.has(i.getName()))\r\n        {\r\n            return sum+1;\r\n        }\r\n        else\r\n        {\r\n            return sum;\r\n        }\r\n    }, 0);\r\n}\r\n\r\nexport class MaxReuseFilter implements Filter {\r\n    public name = \"Maximal reuse of ingredients\";\r\n    public id =\"maxreuse\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n\r\n        const ingredientsAlreadyUsed = new Set<string>(\r\n            explicitRecipes.concat(selectedRecipes).flatMap(r => r.getIngredients().map(i => i.getName())));\r\n\r\n        const scoredRecipes = remainingRecipes\r\n            .map(r => ({recipe: r, score: getScore(ingredientsAlreadyUsed, r)}))\r\n            .sort((a,b) => {\r\n                if(a.score < b.score)\r\n                {\r\n                    return 1;\r\n                }\r\n                else if(a.score > b.score)\r\n                {\r\n                    return -1;\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n        const result: Recipe[] = [];\r\n\r\n        if(scoredRecipes.length>0)\r\n        {\r\n            for(let scoredRecipe of scoredRecipes)\r\n            {\r\n                if(scoredRecipes[0].score === scoredRecipe.score)\r\n                {\r\n                    result.push(scoredRecipe.recipe);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import {Recipe} from '../model/Recipe';\r\n\r\nimport { RandomFilter } from './RandomFilter';\r\nimport { MinIngredientsFilter } from './MinIngredientsFilter';\r\nimport { MaxReuseFilter } from './MaxReuseFilter';\r\n\r\nexport const randomFilter = new RandomFilter();\r\n\r\nexport interface Filter {\r\n    id: string,\r\n    name: string,\r\n    filter: (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => Recipe[]\r\n}\r\n\r\nexport type Filters = {\r\n    all: () => Filter[],\r\n    get: (id: string) => Filter | undefined \r\n}\r\n\r\nfunction createFilters() {\r\n\r\n    const filters = [new MinIngredientsFilter(), new MaxReuseFilter(), randomFilter];\r\n    const filterMap = new Map<string,Filter>(filters.map(f => [f.id, f])); \r\n\r\n    return {\r\n        all: () => filters,\r\n        get: (id: string) => filterMap.get(id)\r\n    }\r\n}\r\n\r\nexport const filters: Filters = createFilters();\r\n","import {Filter, filters} from '../filters/Filter';\r\n\r\nexport enum Optimization {\r\n    MinimalNrIngrediants = 1,\r\n    MaximalResueOfIngredients\r\n  }\r\n\r\nexport class PlanSettings {\r\n\r\n    constructor() {\r\n        this.nrRecipes = 5;\r\n        this.optimization = filters.all()[0];\r\n     }\r\n\r\n    public clone() : PlanSettings {\r\n        return Object.create(this);\r\n    }\r\n\r\n    public nrRecipes: number\r\n    public optimization: Filter\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Accordion, Card} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport {PlanSettings} from '../model/PlanSettings';\r\nimport {filters} from '../filters/Filter';\r\n\r\ntype PlanSettingsPanelProps = {\r\n    planSettings: PlanSettings,\r\n    onUpdate: (planSettings: PlanSettings) => void\r\n}\r\n\r\nexport const PlanSettingsPanel: FunctionComponent<PlanSettingsPanelProps> = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n\r\n    const changeNrRecipes = (newNrRecipes: number) => {\r\n        let newSettings = props.planSettings.clone();\r\n        newSettings.nrRecipes = newNrRecipes;\r\n        props.onUpdate(newSettings);\r\n    }\r\n\r\n    const changeOptimization = (filterId: string) => {\r\n        let filter = filters.get(filterId);\r\n        if(filter)\r\n        {\r\n            let newSettings = props.planSettings.clone();\r\n            newSettings.optimization = filter;\r\n            props.onUpdate(newSettings);    \r\n        }\r\n    }\r\n\r\n    const filterList = filters.all().map(f => \r\n        <option value={f.id} key={f.id}>{f.name}</option>\r\n    )\r\n\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" onClick={() => setCollapsed(!collapsed)}>\r\n                Plan settings {collapsed ? \"[+]\" : \"[-]\"}\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n                <Form onSubmit={(e)=>e.preventDefault()}>\r\n                <Form.Group controlId=\"nrRecipes\">\r\n                    <Form.Label>Number of recipes:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.nrRecipes} \r\n                                  onChange={(e)=>changeNrRecipes(parseInt(e.target.value))}>\r\n                    <option key=\"3\">3</option>\r\n                    <option key=\"4\">4</option>\r\n                    <option key=\"5\">5</option>\r\n                    <option key=\"6\">6</option>\r\n                    <option key=\"7\">7</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"optimization\">\r\n                    <Form.Label>Optimize by:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.optimization.id} \r\n                                  onChange={(e)=>changeOptimization(e.target.value)}>\r\n                    {filterList}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion>\r\n    );    \r\n}\r\n","import {Plan} from './model/Plan';\r\nimport {Recipe} from './model/Recipe';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function getIngredientMap(recipes: Recipe[])\r\n{\r\n    // Ingredient -> (recipe id -> [amount, unit])\r\n    let ingredientMap = new Map<string, Map<string, [number, string]>>();\r\n\r\n    recipes.forEach(r => {\r\n        \r\n        r.getIngredients().forEach(i => {\r\n              let oneIngredientRecord = ingredientMap.get(i.getName());\r\n              if(!oneIngredientRecord)\r\n              {\r\n                oneIngredientRecord = new Map()\r\n                ingredientMap.set(i.getName(), oneIngredientRecord);\r\n              }\r\n              \r\n              oneIngredientRecord.set(r.getId(), [i.getAmount(), i.getUnit()]);\r\n        });\r\n    });\r\n\r\n    return ingredientMap;\r\n}\r\n\r\nfunction calculateShoppingList(\r\n                ingredientMap: Map<string, Map<string, [number, string]>>,\r\n                ingredients: string[])\r\n{\r\n    let ingredientList = ingredients.map(name => {\r\n\r\n        let oneIngredientRecord = new Map<string, number>()\r\n        let ingredient = ingredientMap.get(name) ?? new Map()\r\n\r\n        // Group ingredient usages by unit\r\n        for (let [amount, unit] of ingredient.values()) {\r\n            oneIngredientRecord.set(unit, \r\n                (oneIngredientRecord.get(unit) ?? 0) + amount)\r\n        }\r\n        \r\n        return {\"name\": name, \"amounts\": oneIngredientRecord}\r\n    });\r\n\r\n    let ingredientsRows = []\r\n\r\n    for (let {name, amounts} of ingredientList)\r\n    {\r\n        let line: [string] = [name]\r\n        for (let [unit, amount] of amounts)\r\n        {\r\n            line.push(\"\" + amount + \" \" + unit)\r\n        }\r\n        ingredientsRows.push(line)\r\n    }\r\n\r\n    return ingredientsRows;\r\n}\r\n\r\n// Exports ShoppingList as list of MD lines\r\nexport function exportShoppingList(plan: Plan)\r\n{\r\n    let recipes = plan.allRecipes();\r\n    let ingredientMap = getIngredientMap(recipes); \r\n    let ingredients = Array.from(ingredientMap.keys()).sort();\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n\r\n    let res = \"\";\r\n\r\n    for (let row of ingredientsRows)\r\n    {\r\n        res += \"**\" + row.shift() + \"**\";\r\n        res += \" - \";\r\n        res += row.join(\" + \");\r\n        res += \"\\n\";\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// Exports Plan as XLSX\r\nexport function exportPlan(plan: Plan) : Blob\r\n{\r\n    let recipes = plan.allRecipes();\r\n    let ingredientMap = getIngredientMap(recipes); \r\n    let ingredients = Array.from(ingredientMap.keys()).sort();\r\n\r\n    let wb = XLSX.utils.book_new();\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Calculate shopping list\r\n\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n    let ingredientsWS = XLSX.utils.aoa_to_sheet(ingredientsRows);\r\n    XLSX.utils.book_append_sheet(wb, ingredientsWS, \"Shopping list\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate detailed plan\r\n\r\n    const planHeaderRow = recipes.map(r => r.getTitle()) \r\n    planHeaderRow.unshift(\"\")\r\n\r\n    const planDataRows = ingredients.map(name => {\r\n        \r\n        let line = [name]\r\n\r\n        for (let r of recipes)\r\n        {\r\n            let ingredient = ingredientMap.get(name) ?? new Map();\r\n            let recipeIngredient = ingredient.get(r.getId());\r\n            if(recipeIngredient)\r\n            {\r\n                line.push(\"\" + recipeIngredient[0] + \" \" +  recipeIngredient[1]);\r\n            }\r\n            else\r\n            {\r\n                line.push(\"\");\r\n            }\r\n\r\n        }\r\n\r\n        return line;\r\n    });\r\n\r\n    let planRows = [planHeaderRow].concat(planDataRows);\r\n\r\n    let planWS = XLSX.utils.aoa_to_sheet(planRows);\r\n    XLSX.utils.book_append_sheet(wb, planWS, \"Plan\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate recipes\r\n\r\n    for (let r of recipes)\r\n    {\r\n        let recipeRows = [\r\n            [\"Title\",r.getTitle()],\r\n            [\"Summary\", r.getSummary() ?? \"-\"],\r\n            [\"Ready in minutes\",r.getReadyInMinutes() ?? \"-\"],\r\n            [\"Source\", r.getSource() ?? \"-\"],\r\n            [\"Ingredients:\"]\r\n        ];\r\n\r\n        for (let i of r.getIngredients())\r\n        {\r\n            recipeRows.push([i.getName(), i.getAmount(), i.getUnit()])\r\n        }\r\n\r\n        let recipeWS = XLSX.utils.aoa_to_sheet(recipeRows);\r\n        XLSX.utils.book_append_sheet(wb, recipeWS, r.getTitle());    \r\n    }\r\n\r\n    let bytes = XLSX.write(wb, {bookType:'xlsx', bookSST: false, type: 'array'});\r\n    return new Blob([bytes], {\r\n        type: 'application/octet-stream'\r\n    });\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Container, Table} from 'react-bootstrap';\r\n\r\nimport {Plan} from \"../model/Plan\";\r\nimport {PlanSettings} from \"../model/PlanSettings\";\r\nimport {getIngredientMap}  from \"../PlanExporter\";\r\n\r\ntype PlanVisualizerProps = {\r\n    plan: Plan,\r\n    planSettings: PlanSettings\r\n}\r\n\r\nexport const PlanVisualizer: FunctionComponent<PlanVisualizerProps> = ({plan}) => {\r\n\r\n    const allRecipes = plan.allRecipes();\r\n\r\n    const explicitRecipeHeaderList = plan.explicitRecipes.map(r => \r\n        <th>{r.getTitle()}</th>)\r\n\r\n    const calculatedRecipeHeaderList = plan.calculatedRecipes.map(r => \r\n        <th className=\"bg-light\">{r.getTitle()}</th>)\r\n\r\n    let ingredientMap = getIngredientMap(allRecipes);\r\n\r\n    const ingredientLineList = Array.from(ingredientMap.keys()).sort().map(name => {\r\n        \r\n        const perRecipe = allRecipes.map(r => {\r\n            let ingredient = ingredientMap.get(name) ?? new Map();\r\n            let recipeIngredient = ingredient.get(r.getId());\r\n            if(recipeIngredient)\r\n            {\r\n                return <td>{\"\" + recipeIngredient[0] + \" \" +  recipeIngredient[1]}</td>;\r\n            }\r\n            else\r\n            {\r\n                return <td>&nbsp;</td>;\r\n            }\r\n        });\r\n\r\n        return (<tr>\r\n                    <th>{name}</th>\r\n                    {perRecipe}\r\n                </tr>);\r\n    });\r\n\r\n\r\n    return (\r\n        <Container className=\"pt-0 pb-0 pl-0 pr-0\">\r\n        <Table striped bordered size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                <th></th>\r\n                {explicitRecipeHeaderList}\r\n                {calculatedRecipeHeaderList}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {ingredientLineList}\r\n            </tbody>\r\n        </Table>\r\n        </Container>\r\n    );\r\n\r\n}","import React, {FunctionComponent, ChangeEvent} from 'react';\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport {RecipeJSON, IngredientJSON, Recipe, Ingredient} from '../model/Recipe';\r\n\r\nimport Tribute from \"tributejs\";\r\n\r\ntype RecipeEditorProps = {\r\n    recipe?: Recipe,\r\n    onClose: () => void,\r\n    onSave: (recipe: Recipe) => void,\r\n    onDelete: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeEditor: FunctionComponent<RecipeEditorProps> = (props) => {\r\n\r\n    const [recipeJSON, setRecipeJSON] = React.useState<RecipeJSON>(\r\n                            props.recipe?props.recipe.toJSON():Object.create({}));\r\n    const [isTitleInvalid, setIsTitleInvalid] = React.useState(!props.recipe);\r\n    const [isIngredientsInvalid, setIsIngredientsInvalid] = React.useState(false);\r\n\r\n    const generateIngredientCSV = (ingredients: Ingredient[]) =>\r\n    {\r\n        return ingredients.map(i=>i.getName() + \";\" + i.getAmount() + \";\" + i.getUnit()).join(\"\\n\")\r\n    }\r\n\r\n    const [ingredientCSV, setIngredientCSV] = React.useState(props.recipe ? \r\n                            generateIngredientCSV(props.recipe.getIngredients()):\"\");\r\n\r\n    const setTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal = e.currentTarget.value;\r\n        setIsTitleInvalid(!newVal || newVal.length === 0);\r\n        setRecipeJSON(r => ({...r, ...{title: newVal}}))\r\n    }\r\n\r\n    const setSummary = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({...r, ...{summary: newVal}}))\r\n    }\r\n\r\n    const setSource = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string =  e.currentTarget.value;\r\n        setRecipeJSON(r => ({...r, ...{source: newVal}}))\r\n    }\r\n\r\n    const setMinutes = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: number | undefined = Number.parseInt(e.currentTarget.value)\r\n        if(isNaN(newVal)) newVal = undefined\r\n        setRecipeJSON(r => ({...r, ...{readyInMinutes: newVal}}))\r\n    }\r\n\r\n    const tribute = new Tribute({\r\n        autocompleteMode: true,\r\n        values: [\r\n          { key: \"Phil Heartman\", value: \"pheartman\" },\r\n          { key: \"Gordon Ramsey\", value: \"gramsey\" }\r\n        ]\r\n      });\r\n\r\n    const triggerTribute = (e: HTMLTextAreaElement) => {\r\n        if(ingredientEditorElement.current)\r\n        {\r\n            console.log(e.selectionStart)\r\n            console.log(e.value.charAt(e.selectionStart))\r\n            if(e.selectionStart===0)\r\n            {\r\n                tribute.attach(ingredientEditorElement.current)\r\n                tribute.showMenuForCollection(ingredientEditorElement.current)\r\n            }\r\n            else\r\n            {\r\n                //tribute.detach(ingredientEditorElement.current)\r\n            }\r\n        }\r\n    }\r\n\r\n    const updateIngredients = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n\r\n        setIngredientCSV(e.currentTarget.value);\r\n        let lines: string[] = e.currentTarget.value.split(/\\r?\\n/);\r\n\r\n        if(lines.length === 0)\r\n        {\r\n            setRecipeJSON(r => ({...r, ...{ingredients: []}}))\r\n        }\r\n        else\r\n        {\r\n            let ingredients: IngredientJSON[] = [];\r\n            let invalid = false;\r\n\r\n            lines.forEach(line => {\r\n                if(line.length>0)\r\n                {\r\n                    let parts: string[] = line.split(';').map(s=>s.trim());\r\n                    if(parts.length!==3 ||\r\n                      parts[0].length===0 || parts[1].length===0 || parts[2].length===0 ||\r\n                      \"\"+Number.parseInt(parts[1])!==parts[1])\r\n                    {\r\n                        invalid = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        ingredients.push({name: parts[0], amount: Number.parseInt(parts[1]), unit: parts[2]});\r\n                    }\r\n                }\r\n            });\r\n\r\n            if(invalid)\r\n            {\r\n                setIsIngredientsInvalid(true);\r\n            }\r\n            else\r\n            {\r\n                setIsIngredientsInvalid(false);\r\n                setRecipeJSON(r => ({...r, ...{ingredients: ingredients}}))\r\n            }\r\n        }\r\n\r\n        triggerTribute(e.target);\r\n    }\r\n\r\n    const focusIngredients = (e: React.FocusEvent<HTMLTextAreaElement>) => \r\n    {\r\n        e.preventDefault();\r\n        triggerTribute(e.target);\r\n    }\r\n\r\n    const saveRecipe = () =>\r\n    {\r\n        props.onSave(Recipe.fromJSON(recipeJSON))\r\n    }\r\n\r\n    const deleteRecipe = () =>\r\n    {\r\n        if(props.recipe)\r\n        {\r\n            props.onDelete(props.recipe)\r\n        }\r\n    }\r\n\r\n    const focusElement = React.createRef<HTMLInputElement>();\r\n    const ingredientEditorElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    return (\r\n        <Modal show={true} onHide={props.onClose} onEntered={() => {\r\n            if(focusElement.current) focusElement.current.focus();\r\n            //if(ingredientEditorElement.current) tribute.attach(ingredientEditorElement.current);\r\n        }}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Add new recipe</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formTitle\">\r\n            <Form.Control type=\"title\" value={recipeJSON.title} placeholder=\"Title\" \r\n                                       isInvalid={isTitleInvalid} onChange={setTitle}\r\n                                       ref={focusElement}/>\r\n            <Form.Control.Feedback type=\"invalid\">Required field!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formSummary\">\r\n            <Form.Control as=\"textarea\" value={recipeJSON.summary} onChange={setSummary} rows={4} placeholder=\"Summary\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formSource\">\r\n            <Form.Control type=\"source\" value={recipeJSON.source} onChange={setSource} placeholder=\"Where to find the recipe\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formMinutes\">\r\n            <Form.Control type=\"minutes\" value={recipeJSON.readyInMinutes} \r\n                                        onChange={setMinutes} placeholder=\"Number of minutes to cook\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formIngredients\">\r\n            <Form.Control as=\"textarea\" value={ingredientCSV} rows={8}\r\n                                        onFocus={focusIngredients}\r\n                                        onChange={updateIngredients} isInvalid={isIngredientsInvalid}\r\n                                        placeholder=\"Ingredients: <name>;<amount>;<unit>\"\r\n                                        ref={ingredientEditorElement}/>\r\n            <Form.Control.Feedback type=\"invalid\">Format must be {\"<\"}name{\">\"};{\"<\"}amount{\">\"};{\"<\"}unit{\">\"} for every line!\"</Form.Control.Feedback>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button type=\"button\" variant=\"secondary\" onClick={props.onClose}>Close</Button>\r\n        <Button type=\"button\" variant=\"primary\" onClick={saveRecipe} disabled={isTitleInvalid||isIngredientsInvalid}>Save recipe</Button>\r\n        {(() => {\r\n            if(props.recipe) {\r\n                return (<Button type=\"button\" variant=\"primary\" onClick={deleteRecipe}>Delete recipe</Button>)\r\n            }\r\n        })()}\r\n        </Modal.Footer>\r\n        </Modal>)\r\n}","import {Recipe} from './Recipe';\r\n\r\nexport class Plan {\r\n\r\n    constructor() {\r\n        this.explicitRecipes = [];\r\n        this.calculatedRecipes = [];\r\n    }\r\n\r\n    public allRecipes()\r\n    {\r\n        return this.explicitRecipes.concat(this.calculatedRecipes);\r\n    }\r\n\r\n    public nrRecipes()\r\n    {\r\n        return this.explicitRecipes.length + this.calculatedRecipes.length;\r\n    }\r\n\r\n    public clone() : Plan {\r\n        return Object.create(this);\r\n    }\r\n\r\n    public explicitRecipes: Recipe[];\r\n    public calculatedRecipes: Recipe[];\r\n}","import {Plan} from './model/Plan';\r\nimport {PlanSettings} from './model/PlanSettings';\r\nimport {Recipe} from './model/Recipe';\r\nimport {RecipeIndex} from './RecipeDB';\r\nimport {randomFilter} from './filters/Filter';\r\n\r\nexport function optimizePlan(recipeIndex: RecipeIndex, previousPlan: Plan, settings: PlanSettings) {\r\n\r\n    const nrRecipesToCalculate = Math.max(0, settings.nrRecipes - previousPlan.explicitRecipes.length);\r\n\r\n    const allRecipeIds = new Set(recipeIndex.all().map(r=>r.getId())); \r\n    const freeRecipeIds = new Set(allRecipeIds);\r\n    previousPlan.explicitRecipes.forEach(r=>freeRecipeIds.delete(r.getId()));\r\n\r\n    const calcultedRecipes: Recipe[] = [];\r\n\r\n    for(let i=0; i<nrRecipesToCalculate; i++)\r\n    {\r\n        let freeRecipes = recipeIndex.getAll(Array.from(freeRecipeIds));\r\n        let currentRecipes = settings.optimization.filter(previousPlan.explicitRecipes, calcultedRecipes, freeRecipes);\r\n\r\n        if(currentRecipes.length > 0)\r\n        {\r\n            var finalRecipe = randomFilter.filter(previousPlan.explicitRecipes, calcultedRecipes, currentRecipes)[0];\r\n\r\n            calcultedRecipes.push(finalRecipe);\r\n            freeRecipeIds.delete(finalRecipe.getId());\r\n        }\r\n    }\r\n\r\n    const newPlan = previousPlan.clone();\r\n    newPlan.calculatedRecipes = calcultedRecipes;\r\n\r\n    return newPlan;\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Navbar, Nav, NavDropdown, Button, Image} from 'react-bootstrap';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport {Form, Modal, Alert} from 'react-bootstrap';\r\n\r\nimport {Recipe, serializeRecipes, deserializeRecipes} from './model/Recipe';\r\nimport {RecipeSelector} from './components/RecipeSelector';\r\nimport {RecipeIndex} from './RecipeDB';\r\nimport {LoadFileDialog} from './components/LoadFileDialog';\r\nimport {SaveFileDialog} from './components/SaveFileDialog';\r\nimport {PlanSettingsPanel} from './components/PlanSettings';\r\nimport {PlanSettings} from './model/PlanSettings';\r\nimport {PlanVisualizer} from './components/PlanVisualizer';\r\nimport {RecipeEditor} from './components/RecipeEditor';\r\nimport {Plan} from './model/Plan';\r\n\r\nimport {optimizePlan} from './Planner';\r\nimport {exportPlan, exportShoppingList} from './PlanExporter';\r\n\r\nimport {Beforeunload} from 'react-beforeunload';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n    \r\ntype MenuProps = {\r\n    onLoadFile: () => void,\r\n    onNewRecipe: () => void,\r\n    onSaveFile: () => void,\r\n    unsavedChanges: boolean\r\n}\r\n\r\nfunction getVersionNumber()\r\n{\r\n    return `${process.env.REACT_APP_VERSION}`\r\n}\r\n\r\nconst Menu: FunctionComponent<MenuProps> = ({onLoadFile, onNewRecipe, onSaveFile, unsavedChanges}) => {\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">Mealee</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"container-fluid\">\r\n            <NavDropdown title=\"Recipes\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onLoadFile}>Load recipes...</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onSaveFile} disabled={!unsavedChanges}>Save recipes...</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onNewRecipe}>Add new recipe...</NavDropdown.Item>\r\n            </NavDropdown>\r\n            <Nav.Item className=\"ml-auto\">\r\n                <Nav.Link>v{getVersionNumber()}</Nav.Link>\r\n            </Nav.Item>\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n        ${process.env.REACT_APP_VERSION}\r\n        </Navbar>\r\n    );    \r\n}\r\n\r\ntype AppState = {\r\n    recipeIndex: RecipeIndex,\r\n    planSettings: PlanSettings,\r\n    plan: Plan,\r\n    showDialog?: Dialog,\r\n    recipeToEdit?: Recipe,\r\n    error: string | null,\r\n    unsavedChanges: boolean \r\n}\r\n\r\nenum Dialog {\r\n    LoadFile,\r\n    SaveFile,\r\n    RecipeEditor,\r\n    SavePlanXLS,\r\n    ShoppingList\r\n} \r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        let recipeIndex = new RecipeIndex();\r\n        let planSettings = new PlanSettings();\r\n\r\n        // Hard binding is needed if `loadFile` do not use arrow notation \r\n        // this.loadFile = this.loadFile.bind(this);\r\n        this.state = { \r\n            recipeIndex: recipeIndex,\r\n            planSettings: planSettings,\r\n            plan: optimizePlan(recipeIndex, new Plan(), planSettings),\r\n            showDialog: undefined,\r\n            recipeToEdit: undefined,\r\n            error: null,\r\n            unsavedChanges: false\r\n        };\r\n    }\r\n\r\n    addRecipes = (newRecipes: Recipe[], fromFile = false) => {\r\n        this.setState(st => {\r\n\r\n            // You want to save if it is not a first file load\r\n            let needsSave = st.unsavedChanges || !(fromFile && st.recipeIndex.count()===0);\r\n\r\n            let ret = {}\r\n            let newRecipeIndex = st.recipeIndex.addAll(newRecipes);\r\n\r\n            if(newRecipeIndex !== st.recipeIndex){\r\n\r\n                ret = {recipeIndex: newRecipeIndex,\r\n                       plan: optimizePlan(newRecipeIndex, st.plan, st.planSettings),\r\n                       unsavedChanges: needsSave};\r\n            }\r\n\r\n            return ret;\r\n        });\r\n    }\r\n\r\n    saveRecipe = (recipe: Recipe) => {\r\n        this.addRecipes([recipe]);\r\n        this.closeRecipeEditor();\r\n    }\r\n\r\n    onFileLoaded = (ev: ProgressEvent<FileReader>) => {\r\n        let res = ev.target?.result;\r\n\r\n        if(typeof res == \"string\")\r\n        {\r\n            try\r\n            {\r\n                this.addRecipes(deserializeRecipes(res), true);\r\n            }\r\n            catch(e)\r\n            {\r\n                this.setState({error: e.message});\r\n            }\r\n            \r\n        }\r\n        this.closeDialog();\r\n    }\r\n\r\n    loadFile = (file: File) => {\r\n        var reader = new FileReader();\r\n        reader.onload = (ev) => this.onFileLoaded(ev);\r\n        reader.readAsText(file, \"UTF-8\");\r\n    } \r\n\r\n    genRecipeFileContent = () => {\r\n        return serializeRecipes(this.state.recipeIndex.all());\r\n    }\r\n\r\n    fileSaved = () => {\r\n        this.setState({unsavedChanges: false});\r\n        this.closeDialog();\r\n    }\r\n\r\n    showDialog = (dialog: Dialog) => {\r\n        return () => this.setState({showDialog: dialog});\r\n    }\r\n\r\n    closeDialog = () => {\r\n        this.setState({showDialog: undefined});\r\n    }\r\n\r\n    closeRecipeEditor = () => {\r\n        this.setState({recipeToEdit: undefined, showDialog: undefined});\r\n    }\r\n\r\n    dismissError = () => {\r\n        this.setState({error: null});\r\n    }\r\n\r\n    updatePlanSettings = (ps: PlanSettings) => {\r\n        this.setState(st => {\r\n            return {planSettings: ps,\r\n                    plan: optimizePlan(st.recipeIndex, st.plan, ps)}\r\n        });\r\n    }\r\n\r\n    updateExplicitRecipes = (newExplicitRecipes: Recipe[]) => {\r\n        this.setState(st => {\r\n            let newPlan: Plan = Object.create(st.plan);\r\n            newPlan.explicitRecipes = newExplicitRecipes;\r\n            return {plan: optimizePlan(st.recipeIndex, newPlan, st.planSettings)};\r\n        });\r\n    }\r\n\r\n    editRecipe = (recipe: Recipe) => {\r\n        this.setState({showDialog: Dialog.RecipeEditor,\r\n                       recipeToEdit: recipe});\r\n    }\r\n\r\n    deleteRecipe = (recipe: Recipe) => {\r\n        this.setState(st => {\r\n            let newRecipeIndex = st.recipeIndex.delete(recipe.getId());\r\n\r\n            return {recipeIndex: newRecipeIndex,\r\n                    plan: optimizePlan(newRecipeIndex, st.plan, st.planSettings),\r\n                    showDialog: undefined,\r\n                    recipeToEdit: undefined,\r\n                    unsavedChanges: true};\r\n        });\r\n    }\r\n\r\n    renderDialog = () => {\r\n\r\n        switch(this.state.showDialog) { \r\n            case Dialog.LoadFile: {\r\n                return <LoadFileDialog\r\n                        onClose={this.closeDialog}\r\n                        title=\"Load recipes file\"\r\n                        loadButtonTitle=\"Load recipes\"\r\n                        onLoad={this.loadFile}/>\r\n            }\r\n\r\n            case Dialog.SaveFile: { \r\n                return <SaveFileDialog\r\n                        onClose={this.closeDialog}\r\n                        title=\"Save recipes file\"\r\n                        saveButtonTitle=\"Save recipes\"\r\n                        data={this.genRecipeFileContent()}\r\n                        type=\"application/json\"\r\n                        initialFileName=\"recipes\"\r\n                        extension=\"json\"\r\n                        onSave={this.fileSaved}/>\r\n            }\r\n\r\n            case Dialog.RecipeEditor: {\r\n                return <RecipeEditor\r\n                        onClose={this.closeRecipeEditor}\r\n                        onSave={this.saveRecipe}\r\n                        onDelete={this.deleteRecipe}\r\n                        recipe={this.state.recipeToEdit}/>\r\n            }\r\n\r\n            case Dialog.SavePlanXLS: {\r\n                return <SaveFileDialog\r\n                        onClose={this.closeDialog}\r\n                        title=\"Save plan\"\r\n                        saveButtonTitle=\"Save plan\"\r\n                        data={exportPlan(this.state.plan)}\r\n                        type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n                        initialFileName=\"plan\"\r\n                        extension=\"xlsx\"\r\n                        onSave={this.closeDialog}/>\r\n            }\r\n\r\n            case Dialog.ShoppingList: {\r\n                return (<Modal show={true} onHide={this.closeDialog}>\r\n                        <Modal.Header closeButton>\r\n                        <Modal.Title>Shopping list</Modal.Title>\r\n                        </Modal.Header>\r\n                    \r\n                        <Modal.Body>\r\n                        <Form>\r\n                        <Form.Control as=\"textarea\" rows={20} cols={80} value={exportShoppingList(this.state.plan)} readOnly/>\r\n                        </Form>\r\n                        </Modal.Body>\r\n                    \r\n                        <Modal.Footer>\r\n                        <Button variant=\"secondary\" onClick={this.closeDialog}>Close</Button>\r\n                        </Modal.Footer>\r\n                        </Modal>)\r\n            }\r\n\r\n            default: {\r\n                return <></>\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"p-3\">\r\n\r\n                <Alert variant=\"danger\" onClose={this.dismissError} show={!!this.state.error} dismissible>\r\n                    {this.state.error}\r\n                </Alert>\r\n\r\n                {(() => {\r\n                    if(this.state.unsavedChanges) {\r\n                        return <Beforeunload onBeforeunload={() => \"You'll lose your data!\"} />\r\n                    }\r\n                })()}\r\n\r\n                {this.renderDialog()}\r\n\r\n                <Row>\r\n                    <Col> \r\n                        <Menu onLoadFile={this.showDialog(Dialog.LoadFile)} \r\n                              onNewRecipe={this.showDialog(Dialog.RecipeEditor)}\r\n                              onSaveFile={this.showDialog(Dialog.SaveFile)}\r\n                              unsavedChanges={this.state.unsavedChanges}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <PlanSettingsPanel planSettings={this.state.planSettings} \r\n                                           onUpdate={this.updatePlanSettings}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pb-2\">\r\n                    <Col xs=\"3\">\r\n                        <RecipeSelector selectedRecipes={this.state.plan.explicitRecipes} \r\n                                        recipeIndex={this.state.recipeIndex}\r\n                                        maxNrSelected={this.state.planSettings.nrRecipes}\r\n                                        onUpdate={this.updateExplicitRecipes}\r\n                                        onEdit={this.editRecipe}/>\r\n                    </Col>\r\n                    <Col>\r\n                        {(() => {\r\n                        if(this.state.plan.nrRecipes() === 0) {\r\n                            return <Container className=\"pt-2 pl-0\">No recipes are planned</Container>\r\n                        }\r\n                        else\r\n                        {\r\n                            return (\r\n                            <Container className=\"pt-2 pl-0 pr-0\">\r\n                                <Row>\r\n                                    <Col>\r\n                                    <PlanVisualizer plan={this.state.plan} planSettings={this.state.planSettings}/>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row>\r\n                                    <Col>\r\n                                    <Button className=\"float-right\" onClick={this.showDialog(Dialog.SavePlanXLS)}>\r\n                                        Export plan &nbsp;\r\n                                        <Image src=\"xlsx_logo.svg\" height=\"18\"/>\r\n                                    </Button>\r\n                                    <Button className=\"float-right mr-2\" onClick={this.showDialog(Dialog.ShoppingList)}>\r\n                                        Show shopping list &nbsp;\r\n                                        <Image src=\"todoist_logo.svg\" height=\"18\"/>\r\n                                    </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>)\r\n                        }\r\n                        })()}\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    };\r\n};\r\n\r\nexport default App;","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}