{"version":3,"sources":["service/RecipeDB.ts","service/RecipeService.ts","filters/RandomFilter.ts","filters/MinIngredientsFilter.ts","filters/MaxReuseFilter.ts","filters/Filter.ts","model/PlanSettings.ts","model/Plan.ts","model/Recipe.ts","components/RecipeSelector.tsx","components/LoadFileDialog.tsx","components/SaveFileDialog.tsx","components/PlanSettings.tsx","PlanExporter.ts","components/PlanVisualizer.tsx","components/IngredientLang.ts","components/RecipeEditor.tsx","Planner.ts","App.tsx","index.js"],"names":["RecipeIndex","index","recipesMap","fieldAccessors","r","getTitle","getSummary","getIngredients","map","i","getName","join","fieldBoostFactors","termFilter","term","normalize","replace","toLowerCase","add","key","getId","toUpdate","has","JSON","stringify","get","delete","newMap","set","addDocumentToIndex","words","addAll","recipes","reduce","idx","recipe","search","q","query","undefined","acc","res","push","score","all","Array","from","values","removeDocumentFromIndex","Set","getAll","keys","count","size","this","createIndex","Map","new","RecipeService","db","ingredients","forEach","c","Intl","Collator","sort","compare","units","getUnit","MinIngredientsFilter","name","id","filter","explicitRecipes","selectedRecipes","remainingRecipes","ingredientsAlreadyUsed","concat","flatMap","scoredRecipes","ingredientsAlreadyUSed","sum","a","b","result","length","scoredRecipe","MaxReuseFilter","randomFilter","max","Math","floor","random","Optimization","filters","filterMap","f","createFilters","PlanSettings","nrRecipes","optimization","Object","create","Plan","calculatedRecipes","Ingredient","amount","unit","o","Error","Recipe","title","summary","source","sourceUrl","readyInMinutes","toJSON","toString","isArray","fromJSON","RecipeSelector","recipeIndex","maxNrSelected","onUpdate","onEdit","React","useState","setFilter","currentRecipeid","setCurrentRecipeId","filteredRecipes","trim","selectedRecipeMap","renderRecipe","n","Col","sm","className","Popover","Title","as","Content","Container","Row","Image","src","getReadyInMinutes","getSource","listItems","OverlayTrigger","placement","overlay","onEnter","onExit","ListGroup","Item","Form","Check","type","label","disabled","checked","onChange","Button","variant","onClick","e","editButton","onSubmit","preventDefault","InputGroup","Prepend","Text","FormControl","placeholder","event","currentTarget","value","Group","controlId","LoadFileDialog","loadButtonTitle","onClose","onLoad","file","setFile","Modal","show","onHide","Header","closeButton","Body","target","files","Footer","SaveFileDialog","saveButtonTitle","onSave","data","initialFileName","extension","fileName","setFileName","Label","Control","download","PlanSettingsPanel","props","collapsed","setCollapsed","filterList","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","planSettings","newNrRecipes","newSettings","clone","changeNrRecipes","parseInt","filterId","changeOptimization","getIngredientMap","ingredientMap","oneIngredientRecord","getAmount","calculateShoppingList","ingredientList","ingredient","ingredientsRows","amounts","line","exportShoppingList","plan","allRecipes","row","shift","exportPlan","wb","XLSX","utils","book_new","ingredientsWS","aoa_to_sheet","book_append_sheet","planHeaderRow","unshift","planDataRows","recipeIngredient","planRows","planWS","recipeRows","recipeWS","substr","bytes","write","bookType","bookSST","Blob","PlanVisualizer","explicitRecipeHeaderList","calculatedRecipeHeaderList","ingredientLineList","perRecipe","Table","striped","bordered","parseIngredients","text","errors","lines","split","parts","CodeMirror","Pos","to","message","startpos","startAmount","endAmount","s","Number","parseFloat","autocomplete","cm","cursor","getCursor","getLine","start","ch","end","nrpart","substring","match","charAt","word","slice","trimLeft","selection","indexOf","startsWith","list","defineMode","Location","startState","location","token","stream","state","sol","next","eatWhile","registerHelper","RecipeEditor","recipeJSON","setRecipeJSON","isTitleInvalid","setIsTitleInvalid","isIngredientsInvalid","setIsIngredientsInvalid","ingredientCSV","setIngredientCSV","deleteRecipe","onDelete","focusElement","createRef","ingredientEditorElement","onEntered","current","focus","fromTextArea","lineNumbers","mode","gutters","lint","extraKeys","on","instance","updateIngredients","getValue","showHint","hint","recipeService","getUnits","completeSingle","closeOnUnfocus","isInvalid","newVal","ref","Feedback","rows","isNaN","optimizePlan","previousPlan","settings","nrRecipesToCalculate","allRecipeIds","freeRecipeIds","calcultedRecipes","freeRecipes","currentRecipes","finalRecipe","newPlan","Dialog","Menu","onLoadFile","onNewRecipe","onSaveFile","unsavedChanges","Navbar","bg","Brand","href","aria-controls","Nav","NavDropdown","active","Divider","Link","process","App","addRecipes","newRecipes","fromFile","setState","st","needsSave","ret","newRecipeIndex","saveRecipe","closeRecipeEditor","onFileLoaded","ev","json","parse","version","deserializeRecipes","error","closeDialog","loadFile","reader","FileReader","onload","readAsText","genRecipeFileContent","str","TextEncoder","encode","serializeRecipes","fileSaved","showDialog","dialog","recipeToEdit","dismissError","updatePlanSettings","ps","updateExplicitRecipes","newExplicitRecipes","editRecipe","renderDialog","LoadFile","SaveFile","SavePlanXLS","ShoppingList","cols","readOnly","fluid","Alert","dismissible","onBeforeunload","xs","height","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.966e45f5.chunk.js","sourcesContent":["import {\r\n  Index,\r\n  createIndex,\r\n  addDocumentToIndex,\r\n  removeDocumentFromIndex,\r\n} from \"ndx\";\r\nimport { query, QueryResult } from \"ndx-query\";\r\nimport { words } from \"lodash\";\r\n\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nimport { Map } from \"immutable\";\r\n\r\nexport class RecipeIndex {\r\n  private readonly recipesMap: Map<string, Recipe>;\r\n  private readonly index: Index<string>;\r\n\r\n  private readonly fieldAccessors = [\r\n    (r: Recipe) => r.getTitle(),\r\n    (r: Recipe) => r.getSummary() ?? \"\",\r\n    (r: Recipe) =>\r\n      r\r\n        .getIngredients()\r\n        .map((i) => i.getName())\r\n        .join(\" \"),\r\n  ];\r\n\r\n  private readonly fieldBoostFactors = [2, 0.5, 1];\r\n\r\n  constructor(index?: Index<string>, recipesMap?: Map<string, Recipe>) {\r\n    this.index = index ? index : createIndex<string>(3);\r\n    this.recipesMap = recipesMap ? recipesMap : Map({});\r\n  }\r\n\r\n  private termFilter = (term: string) => {\r\n    return term\r\n      .normalize(\"NFD\")\r\n      .replace(/[\\u0300-\\u036f]/g, \"\")\r\n      .toLowerCase();\r\n  };\r\n\r\n  public static new = () => {\r\n    return new RecipeIndex();\r\n  };\r\n\r\n  // `add()` function will add documents to the index.\r\n  public add = (r: Recipe) => {\r\n    let key = r.getId();\r\n\r\n    let toUpdate = true;\r\n\r\n    if (this.recipesMap.has(key)) {\r\n      if (JSON.stringify(this.recipesMap.get(key)) === JSON.stringify(r)) {\r\n        toUpdate = false;\r\n      }\r\n    }\r\n\r\n    if (toUpdate) {\r\n      // Don't add the same document twice, ndx becomes crazy...\r\n      this.delete(key);\r\n      let newMap = this.recipesMap.set(key, r);\r\n\r\n      addDocumentToIndex(\r\n        this.index,\r\n        this.fieldAccessors,\r\n        // Tokenizer is a function that breaks text into words, phrases, symbols, or other meaningful elements\r\n        // called tokens.\r\n        // Lodash function `words()` splits string into an array of its words, see https://lodash.com/docs/#words for\r\n        // details.\r\n        words,\r\n        // Filter is a function that processes tokens and returns terms, terms are used in Inverted Index to\r\n        // index documents.\r\n        this.termFilter,\r\n        // Document key, it can be a unique document id or a reference to a document if you want to store all documents\r\n        // in memory.\r\n        key,\r\n        // Document.\r\n        r\r\n      );\r\n\r\n      return new RecipeIndex(this.index, newMap);\r\n    } else {\r\n      return this;\r\n    }\r\n  };\r\n\r\n  public addAll = (recipes: Recipe[]) => {\r\n    return recipes.reduce((idx: RecipeIndex, recipe: Recipe) => {\r\n      return idx.add(recipe);\r\n    }, this);\r\n  };\r\n\r\n  // `search()` function will be used to perform queries.\r\n  public search = (q: string) =>\r\n    query<string>(\r\n      this.index,\r\n      this.fieldBoostFactors,\r\n      // BM25 ranking function constants:\r\n      1.2, // BM25 k1 constant, controls non-linear term frequency normalization (saturation).\r\n      0.75, // BM25 b constant, controls to what degree document length normalizes tf values.\r\n      words,\r\n      this.termFilter,\r\n      // Set of removed documents, in this example we don't want to support removing documents from the index,\r\n      // so we can ignore it by specifying this set as `undefined` value.\r\n      undefined,\r\n      q\r\n    ).reduce((acc: QueryResult<Recipe>[], res) => {\r\n      let r = this.recipesMap.get(res.key);\r\n      if (r) {\r\n        acc.push({ key: r, score: res.score });\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n  public all = () => {\r\n    return Array.from(this.recipesMap.values());\r\n  };\r\n\r\n  public get = (key: string) => {\r\n    return this.recipesMap.get(key);\r\n  };\r\n\r\n  public delete = (key: string) => {\r\n    if (this.recipesMap.has(key)) {\r\n      let newMap = this.recipesMap.delete(key);\r\n      removeDocumentFromIndex(this.index, new Set(), key);\r\n      return new RecipeIndex(this.index, newMap);\r\n    } else {\r\n      return this;\r\n    }\r\n  };\r\n\r\n  public getAll = (keys: string[]) => {\r\n    return keys.reduce((acc: Recipe[], key) => {\r\n      let r = this.recipesMap.get(key);\r\n      if (r) {\r\n        acc.push(r);\r\n      }\r\n      return acc;\r\n    }, []);\r\n  };\r\n\r\n  public count = () => {\r\n    return this.recipesMap.size;\r\n  };\r\n}\r\n","import { RecipeIndex } from './RecipeDB'\r\n\r\nexport class RecipeService {\r\n\r\n    private readonly db: RecipeIndex;\r\n\r\n    constructor(db: RecipeIndex) {\r\n        this.db = db;\r\n    }\r\n\r\n    public getIngredients() {\r\n\r\n        let ingredients = new Set<string>();\r\n\r\n        this.db.all().forEach(r => {\r\n            r.getIngredients().forEach(i => {\r\n                ingredients.add(i.getName().toLowerCase());\r\n            })\r\n        });\r\n\r\n        const c = new Intl.Collator();\r\n        return Array.from(ingredients).sort(c.compare);\r\n    }\r\n\r\n    public getUnits() {\r\n\r\n        let units = new Set<string>();\r\n\r\n        this.db.all().forEach(r => {\r\n            r.getIngredients().forEach(i => {\r\n                units.add(i.getUnit().toLowerCase());\r\n            })\r\n        });\r\n\r\n        const c = new Intl.Collator();\r\n        return Array.from(units).sort(c.compare);\r\n    }\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getRandomInt(max: number) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport class RandomFilter implements Filter {\r\n  public name = \"Random filter\";\r\n  public id = \"rnd\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    if (remainingRecipes.length === 0) {\r\n      return [];\r\n    } else {\r\n      return [remainingRecipes[getRandomInt(remainingRecipes.length)]];\r\n    }\r\n  };\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n  return recipe.getIngredients().reduce((sum, i) => {\r\n    if (ingredientsAlreadyUSed.has(i.getName())) {\r\n      return sum;\r\n    } else {\r\n      return sum + 1;\r\n    }\r\n  }, 0);\r\n}\r\n\r\nexport class MinIngredientsFilter implements Filter {\r\n  public name = \"Minimal number of ingredients\";\r\n  public id = \"miningredients\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    const ingredientsAlreadyUsed = new Set<string>(\r\n      explicitRecipes\r\n        .concat(selectedRecipes)\r\n        .flatMap((r) => r.getIngredients().map((i) => i.getName()))\r\n    );\r\n\r\n    const scoredRecipes = remainingRecipes\r\n      .map((r) => ({ recipe: r, score: getScore(ingredientsAlreadyUsed, r) }))\r\n      .sort((a, b) => {\r\n        if (a.score < b.score) {\r\n          return -1;\r\n        } else if (a.score > b.score) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    const result: Recipe[] = [];\r\n\r\n    if (scoredRecipes.length > 0) {\r\n      for (let scoredRecipe of scoredRecipes) {\r\n        if (scoredRecipes[0].score === scoredRecipe.score) {\r\n          result.push(scoredRecipe.recipe);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n  return recipe.getIngredients().reduce((sum, i) => {\r\n    if (ingredientsAlreadyUSed.has(i.getName())) {\r\n      return sum + 1;\r\n    } else {\r\n      return sum;\r\n    }\r\n  }, 0);\r\n}\r\n\r\nexport class MaxReuseFilter implements Filter {\r\n  public name = \"Maximal reuse of ingredients\";\r\n  public id = \"maxreuse\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    const ingredientsAlreadyUsed = new Set<string>(\r\n      explicitRecipes\r\n        .concat(selectedRecipes)\r\n        .flatMap((r) => r.getIngredients().map((i) => i.getName()))\r\n    );\r\n\r\n    const scoredRecipes = remainingRecipes\r\n      .map((r) => ({ recipe: r, score: getScore(ingredientsAlreadyUsed, r) }))\r\n      .sort((a, b) => {\r\n        if (a.score < b.score) {\r\n          return 1;\r\n        } else if (a.score > b.score) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    const result: Recipe[] = [];\r\n\r\n    if (scoredRecipes.length > 0) {\r\n      for (let scoredRecipe of scoredRecipes) {\r\n        if (scoredRecipes[0].score === scoredRecipe.score) {\r\n          result.push(scoredRecipe.recipe);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { Recipe } from \"../model/Recipe\";\r\n\r\nimport { RandomFilter } from \"./RandomFilter\";\r\nimport { MinIngredientsFilter } from \"./MinIngredientsFilter\";\r\nimport { MaxReuseFilter } from \"./MaxReuseFilter\";\r\n\r\nexport const randomFilter = new RandomFilter();\r\n\r\nexport interface Filter {\r\n  id: string;\r\n  name: string;\r\n  filter: (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => Recipe[];\r\n}\r\n\r\nexport type Filters = {\r\n  all: () => Filter[];\r\n  get: (id: string) => Filter | undefined;\r\n};\r\n\r\nfunction createFilters() {\r\n  const filters = [\r\n    new MinIngredientsFilter(),\r\n    new MaxReuseFilter(),\r\n    randomFilter,\r\n  ];\r\n  const filterMap = new Map<string, Filter>(filters.map((f) => [f.id, f]));\r\n\r\n  return {\r\n    all: () => filters,\r\n    get: (id: string) => filterMap.get(id),\r\n  };\r\n}\r\n\r\nexport const filters: Filters = createFilters();\r\n","import { Filter, filters } from \"../filters/Filter\";\r\n\r\nexport enum Optimization {\r\n  MinimalNrIngrediants = 1,\r\n  MaximalResueOfIngredients,\r\n}\r\n\r\nexport class PlanSettings {\r\n  constructor() {\r\n    this.nrRecipes = 5;\r\n    this.optimization = filters.all()[0];\r\n  }\r\n\r\n  public clone(): PlanSettings {\r\n    return Object.create(this);\r\n  }\r\n\r\n  public nrRecipes: number;\r\n  public optimization: Filter;\r\n}\r\n","import { Recipe } from \"./Recipe\";\r\n\r\nexport class Plan {\r\n  constructor() {\r\n    this.explicitRecipes = [];\r\n    this.calculatedRecipes = [];\r\n  }\r\n\r\n  public allRecipes() {\r\n    return this.explicitRecipes.concat(this.calculatedRecipes);\r\n  }\r\n\r\n  public nrRecipes() {\r\n    return this.explicitRecipes.length + this.calculatedRecipes.length;\r\n  }\r\n\r\n  public clone(): Plan {\r\n    return Object.create(this);\r\n  }\r\n\r\n  public explicitRecipes: Recipe[];\r\n  public calculatedRecipes: Recipe[];\r\n}\r\n","export interface IngredientJSON {\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface RecipeJSON {\r\n  id: string;\r\n  title: string;\r\n  source?: string;\r\n  summary?: string;\r\n  readyInMinutes?: number;\r\n  ingredients: IngredientJSON[];\r\n}\r\n\r\ninterface RecipeFileJSON {\r\n  version: number;\r\n  recipes: RecipeJSON[];\r\n}\r\n\r\nexport class Ingredient {\r\n  private constructor(name: string, amount: number, unit: string) {\r\n    this.name = name;\r\n    this.amount = amount;\r\n    this.unit = unit;\r\n  }\r\n\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  public getAmount(): number {\r\n    return this.amount;\r\n  }\r\n\r\n  public getUnit(): string {\r\n    return this.unit;\r\n  }\r\n\r\n  public static fromJSON(o: IngredientJSON): Ingredient {\r\n    if (!o.name) {\r\n      throw new Error(\"Missing ingredient name\");\r\n    }\r\n\r\n    if (!o.unit) {\r\n      throw new Error(\"Missing ingredient unit\");\r\n    }\r\n\r\n    if (o.amount === undefined) {\r\n      throw new Error(\"Missing ingredient amount\");\r\n    }\r\n\r\n    return new Ingredient(o.name, o.amount, o.unit);\r\n  }\r\n\r\n  public toJSON(): IngredientJSON {\r\n    return {\r\n      name: this.name,\r\n      amount: this.amount,\r\n      unit: this.unit,\r\n    };\r\n  }\r\n\r\n  private name: string;\r\n  private amount: number;\r\n  private unit: string;\r\n}\r\n\r\nfunction uuidv4() {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nexport class Recipe {\r\n  private constructor(id: string, title: string) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.ingredients = [];\r\n  }\r\n\r\n  public getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  public getTitle(): string {\r\n    return this.title;\r\n  }\r\n\r\n  public getSummary(): string | undefined {\r\n    return this.summary;\r\n  }\r\n\r\n  public getSource(): string | undefined {\r\n    return this.source;\r\n  }\r\n\r\n  public getReadyInMinutes(): number | undefined {\r\n    return this.readyInMinutes;\r\n  }\r\n\r\n  public getIngredients(): Ingredient[] {\r\n    return this.ingredients;\r\n  }\r\n\r\n  public static fromJSON(o: RecipeJSON): Recipe {\r\n    if (!o.id) {\r\n      o.id = uuidv4();\r\n    }\r\n\r\n    if (!o.title) {\r\n      throw new Error(\"Missing recipe title\");\r\n    }\r\n\r\n    let r = new Recipe(o.id, o.title);\r\n\r\n    r.summary = o.summary;\r\n    r.source = o.source;\r\n    r.readyInMinutes = o.readyInMinutes;\r\n\r\n    if (Array.isArray(o.ingredients)) {\r\n      r.ingredients = o.ingredients.map((i) => Ingredient.fromJSON(i));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  public toJSON(): RecipeJSON {\r\n    return {\r\n      id: this.id,\r\n      title: this.title,\r\n      summary: this.summary,\r\n      source: this.source,\r\n      readyInMinutes: this.readyInMinutes,\r\n      ingredients: this.ingredients.map((i) => i.toJSON()),\r\n    };\r\n  }\r\n\r\n  private id: string;\r\n  private title: string;\r\n  private summary?: string;\r\n  private source?: string;\r\n  private sourceUrl?: string;\r\n  private readyInMinutes?: number;\r\n  private ingredients: Ingredient[];\r\n}\r\n\r\nexport function serializeRecipes(recipes: Recipe[]) {\r\n  let str = JSON.stringify({ version: 1, recipes: recipes });\r\n  let bytes = new TextEncoder().encode(str);\r\n  let blob = new Blob([bytes], {\r\n    type: \"application/json;charset=utf-8\",\r\n  });\r\n  return blob;\r\n}\r\n\r\nexport function deserializeRecipes(data: string) {\r\n  let json = JSON.parse(data);\r\n\r\n  if (Array.isArray(json)) {\r\n    let v0: RecipeJSON[] = json;\r\n    return v0.map(Recipe.fromJSON);\r\n  }\r\n\r\n  if (typeof json === \"object\") {\r\n    let r: RecipeFileJSON = json;\r\n\r\n    if (typeof r.version !== \"undefined\") {\r\n      if (r.version !== 1) {\r\n        throw new Error(\"Invalid recipe file version\");\r\n      }\r\n\r\n      if (Array.isArray(r.recipes)) {\r\n        return r.recipes.map(Recipe.fromJSON);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error(\"Invalid recipe file\");\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { Form, ListGroup, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { Container, OverlayTrigger, Popover, Col, Row, Image } from 'react-bootstrap';\r\nimport { Button } from 'react-bootstrap';\r\n\r\nimport { Recipe } from '../model/Recipe';\r\nimport { RecipeIndex } from '../service/RecipeDB';\r\n\r\ntype RecipeSelectorProps = {\r\n    recipeIndex: RecipeIndex,\r\n    selectedRecipes: Recipe[],\r\n    maxNrSelected: number,\r\n    onUpdate: (recipes: Recipe[]) => void,\r\n    onEdit: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeSelector: FunctionComponent<RecipeSelectorProps> = ({ recipeIndex, selectedRecipes, maxNrSelected, onUpdate, onEdit }) => {\r\n\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const [currentRecipeid, setCurrentRecipeId] = React.useState<string | null>(null);\r\n\r\n    const refresh = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(event.currentTarget.value);\r\n    }\r\n\r\n    const filteredRecipes = (filter.trim().length === 0) ?\r\n        recipeIndex.all() : recipeIndex.search(filter).map(res => res.key);\r\n\r\n    const selectedRecipeMap = new Map(selectedRecipes.map(r => [r.getId(), r]))\r\n\r\n    const toggleSelection = (r: Recipe) => {\r\n        if (selectedRecipeMap.has(r.getId())) {\r\n            selectedRecipeMap.delete(r.getId());\r\n        }\r\n        else {\r\n            selectedRecipeMap.set(r.getId(), r);\r\n        }\r\n\r\n        onUpdate(Array.from(selectedRecipeMap.values()));\r\n    }\r\n\r\n    const renderRecipe = (recipe: Recipe) => {\r\n\r\n        const summary = recipe.getSummary() ? recipe.getSummary() : \"Summary is not available\"\r\n        const c = new Intl.Collator();\r\n        const ingredients = recipe.getIngredients().map(r => r.getName())\r\n            .sort(c.compare)\r\n            .map(n => <Col sm=\"auto\" className=\"border mt-1 ml-2 pt-2 pb-2\">{n}</Col>)\r\n\r\n        return (\r\n            <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h4\">{recipe.getTitle()}</Popover.Title>\r\n                <Popover.Content>\r\n                    <Container className=\"pl-0 pr-0\">\r\n                        <Row className=\"pb-2\">\r\n                            <Col>{summary}</Col>\r\n                        </Row>\r\n                        <Row className=\"pb-2\">\r\n                            <Col sm=\"auto\"><Image src=\"clock20x20.jpg\" /></Col>\r\n                            <Col sm=\"auto\">{recipe.getReadyInMinutes() ? \"\" + recipe.getReadyInMinutes() + \" mintes\" : \"unknown\"}</Col>\r\n                            <Col sm=\"auto\"><Image src=\"babyowl17x20.jpg\" /></Col>\r\n                            <Col sm=\"auto\">{recipe.getSource() ? recipe.getSource() : \"-\"}</Col>\r\n                        </Row>\r\n                        <Row>\r\n                            {ingredients}\r\n                        </Row>\r\n                    </Container>\r\n                </Popover.Content>\r\n            </Popover>)\r\n    }\r\n\r\n    const editButton = (recipe: Recipe) => {\r\n        if (currentRecipeid === recipe.getId()) {\r\n            return <Button variant=\"outline-primary\" size=\"sm\" className=\"mt-2\" onClick={e => onEdit(recipe)}>Edit</Button>\r\n        }\r\n        else {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const listItems = filteredRecipes\r\n        .map((recipe) =>\r\n            <OverlayTrigger placement=\"right\" overlay={renderRecipe(recipe)}\r\n                onEnter={() => setCurrentRecipeId(recipe.getId())}\r\n                onExit={() => setCurrentRecipeId(null)}\r\n                key={recipe.getId()}>\r\n                <ListGroup.Item key={recipe.getId()}>\r\n                    <Form.Check type=\"checkbox\"\r\n                        id={recipe.getId()}\r\n                        label={recipe.getTitle()}\r\n                        disabled={!selectedRecipeMap.has(recipe.getId()) && selectedRecipeMap.size >= maxNrSelected}\r\n                        checked={selectedRecipeMap.has(recipe.getId())}\r\n                        onChange={() => toggleSelection(recipe)} />\r\n                    {editButton(recipe)}\r\n                </ListGroup.Item>\r\n            </OverlayTrigger>\r\n        );\r\n\r\n    return (\r\n        <Form className=\"pt-2\" onSubmit={(e) => e.preventDefault()}>\r\n            <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl type=\"text\" placeholder=\"Filter recipes\" onChange={refresh} />\r\n            </InputGroup>\r\n            <Form.Group controlId=\"recipeGroup\">\r\n                <ListGroup>{listItems}</ListGroup>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\ntype LoadFileDialogProps = {\r\n    title: string,\r\n    loadButtonTitle: string,\r\n    onClose: () => void,\r\n    onLoad: (file: File) => void\r\n}\r\n\r\nexport const LoadFileDialog: FunctionComponent<LoadFileDialogProps> = ({title, loadButtonTitle, onClose, onLoad}) => {\r\n\r\n    const [file, setFile] = React.useState<null | File>(null);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <FormControl type=\"file\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                                if(e.target.files)\r\n                                                {\r\n                                                    setFile(e.target.files[0])\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    setFile(null)\r\n                                                }\r\n                                            }}/>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!file} \r\n                        onClick={() => {if(file) onLoad(file)}}>{loadButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport download from 'downloadjs'\r\n\r\ntype SaveFileDialogProps = {\r\n    title: string,\r\n    saveButtonTitle: string,\r\n    data: Blob,\r\n    type: string,\r\n    initialFileName: string,\r\n    extension: string,\r\n    onClose: () => void,\r\n    onSave: () => void\r\n}\r\n\r\nexport const SaveFileDialog: FunctionComponent<SaveFileDialogProps> \r\n                = ({title, saveButtonTitle, onClose, onSave, data, type, initialFileName, extension }) => {\r\n\r\n    const [fileName, setFileName] = React.useState(initialFileName);\r\n\r\n    const startDownload = () => {\r\n        download(data, fileName+\".\"+extension, type)\r\n    }\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicFileName\">\r\n        <Form.Label>File name</Form.Label>\r\n        <Form.Control type=\"fileName\" value={fileName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFileName(e.target.value)}/>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!fileName || fileName.length===0} \r\n                        onClick={() => {startDownload(); onSave()}}>{saveButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Accordion, Card} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport {PlanSettings} from '../model/PlanSettings';\r\nimport {filters} from '../filters/Filter';\r\n\r\ntype PlanSettingsPanelProps = {\r\n    planSettings: PlanSettings,\r\n    onUpdate: (planSettings: PlanSettings) => void\r\n}\r\n\r\nexport const PlanSettingsPanel: FunctionComponent<PlanSettingsPanelProps> = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n\r\n    const changeNrRecipes = (newNrRecipes: number) => {\r\n        let newSettings = props.planSettings.clone();\r\n        newSettings.nrRecipes = newNrRecipes;\r\n        props.onUpdate(newSettings);\r\n    }\r\n\r\n    const changeOptimization = (filterId: string) => {\r\n        let filter = filters.get(filterId);\r\n        if(filter)\r\n        {\r\n            let newSettings = props.planSettings.clone();\r\n            newSettings.optimization = filter;\r\n            props.onUpdate(newSettings);    \r\n        }\r\n    }\r\n\r\n    const filterList = filters.all().map(f => \r\n        <option value={f.id} key={f.id}>{f.name}</option>\r\n    )\r\n\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" onClick={() => setCollapsed(!collapsed)}>\r\n                Plan settings {collapsed ? \"[+]\" : \"[-]\"}\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n                <Form onSubmit={(e)=>e.preventDefault()}>\r\n                <Form.Group controlId=\"nrRecipes\">\r\n                    <Form.Label>Number of recipes:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.nrRecipes} \r\n                                  onChange={(e)=>changeNrRecipes(parseInt(e.target.value))}>\r\n                    <option key=\"3\">3</option>\r\n                    <option key=\"4\">4</option>\r\n                    <option key=\"5\">5</option>\r\n                    <option key=\"6\">6</option>\r\n                    <option key=\"7\">7</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"optimization\">\r\n                    <Form.Label>Optimize by:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.optimization.id} \r\n                                  onChange={(e)=>changeOptimization(e.target.value)}>\r\n                    {filterList}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion>\r\n    );    \r\n}\r\n","import { Plan } from './model/Plan';\r\nimport { Recipe } from './model/Recipe';\r\n\r\nimport XLSX from 'xlsx';\r\n\r\nexport function getIngredientMap(recipes: Recipe[]) {\r\n    // Ingredient -> (recipe id -> [amount, unit])\r\n    let ingredientMap = new Map<string, Map<string, [number, string]>>();\r\n\r\n    recipes.forEach(r => {\r\n\r\n        r.getIngredients().forEach(i => {\r\n            let oneIngredientRecord = ingredientMap.get(i.getName());\r\n            if (!oneIngredientRecord) {\r\n                oneIngredientRecord = new Map()\r\n                ingredientMap.set(i.getName(), oneIngredientRecord);\r\n            }\r\n\r\n            oneIngredientRecord.set(r.getId(), [i.getAmount(), i.getUnit()]);\r\n        });\r\n    });\r\n\r\n    return ingredientMap;\r\n}\r\n\r\nfunction calculateShoppingList(\r\n    ingredientMap: Map<string, Map<string, [number, string]>>,\r\n    ingredients: string[]) {\r\n    let ingredientList = ingredients.map(name => {\r\n\r\n        let oneIngredientRecord = new Map<string, number>()\r\n        let ingredient = ingredientMap.get(name) ?? new Map()\r\n\r\n        // Group ingredient usages by unit\r\n        for (let [amount, unit] of ingredient.values()) {\r\n            oneIngredientRecord.set(unit,\r\n                (oneIngredientRecord.get(unit) ?? 0) + amount)\r\n        }\r\n\r\n        return { \"name\": name, \"amounts\": oneIngredientRecord }\r\n    });\r\n\r\n    let ingredientsRows = []\r\n\r\n    for (let { name, amounts } of ingredientList) {\r\n        let line: [string] = [name]\r\n        for (let [unit, amount] of amounts) {\r\n            line.push(\"\" + amount + \" \" + unit)\r\n        }\r\n        ingredientsRows.push(line)\r\n    }\r\n\r\n    return ingredientsRows;\r\n}\r\n\r\n// Exports ShoppingList as list of MD lines\r\nexport function exportShoppingList(plan: Plan) {\r\n    let recipes = plan.allRecipes();\r\n    let ingredientMap = getIngredientMap(recipes);\r\n    let c = new Intl.Collator();\r\n    let ingredients = Array.from(ingredientMap.keys()).sort(c.compare);\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n\r\n    let res = \"\";\r\n\r\n    for (let row of ingredientsRows) {\r\n        res += \"**\" + row.shift() + \"**\";\r\n        res += \" - \";\r\n        res += row.join(\" + \");\r\n        res += \"\\n\";\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// Exports Plan as XLSX\r\nexport function exportPlan(plan: Plan): Blob {\r\n    let recipes = plan.allRecipes();\r\n    let ingredientMap = getIngredientMap(recipes);\r\n    let ingredients = Array.from(ingredientMap.keys()).sort();\r\n\r\n    let wb = XLSX.utils.book_new();\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Calculate shopping list\r\n\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n    let ingredientsWS = XLSX.utils.aoa_to_sheet(ingredientsRows);\r\n    XLSX.utils.book_append_sheet(wb, ingredientsWS, \"Shopping list\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate detailed plan\r\n\r\n    const planHeaderRow = recipes.map(r => r.getTitle())\r\n    planHeaderRow.unshift(\"\")\r\n\r\n    const planDataRows = ingredients.map(name => {\r\n\r\n        let line = [name]\r\n\r\n        for (let r of recipes) {\r\n            let ingredient = ingredientMap.get(name) ?? new Map();\r\n            let recipeIngredient = ingredient.get(r.getId());\r\n            if (recipeIngredient) {\r\n                line.push(\"\" + recipeIngredient[0] + \" \" + recipeIngredient[1]);\r\n            }\r\n            else {\r\n                line.push(\"\");\r\n            }\r\n\r\n        }\r\n\r\n        return line;\r\n    });\r\n\r\n    let planRows = [planHeaderRow].concat(planDataRows);\r\n\r\n    let planWS = XLSX.utils.aoa_to_sheet(planRows);\r\n    XLSX.utils.book_append_sheet(wb, planWS, \"Plan\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate recipes\r\n\r\n    for (let r of recipes) {\r\n        let recipeRows = [\r\n            [\"Title\", r.getTitle()],\r\n            [\"Summary\", r.getSummary() ?? \"-\"],\r\n            [\"Ready in minutes\", r.getReadyInMinutes() ?? \"-\"],\r\n            [\"Source\", r.getSource() ?? \"-\"],\r\n            [\"Ingredients:\"]\r\n        ];\r\n\r\n        for (let i of r.getIngredients()) {\r\n            recipeRows.push([i.getName(), i.getAmount(), i.getUnit()])\r\n        }\r\n\r\n        let recipeWS = XLSX.utils.aoa_to_sheet(recipeRows);\r\n        XLSX.utils.book_append_sheet(wb, recipeWS, r.getTitle().substr(0,31));\r\n    }\r\n\r\n    let bytes = XLSX.write(wb, { bookType: 'xlsx', bookSST: false, type: 'array' });\r\n    return new Blob([bytes], {\r\n        type: 'application/octet-stream'\r\n    });\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Container, Table} from 'react-bootstrap';\r\n\r\nimport {Plan} from \"../model/Plan\";\r\nimport {PlanSettings} from \"../model/PlanSettings\";\r\nimport {getIngredientMap}  from \"../PlanExporter\";\r\n\r\ntype PlanVisualizerProps = {\r\n    plan: Plan,\r\n    planSettings: PlanSettings\r\n}\r\n\r\nexport const PlanVisualizer: FunctionComponent<PlanVisualizerProps> = ({plan}) => {\r\n\r\n    const allRecipes = plan.allRecipes();\r\n\r\n    const explicitRecipeHeaderList = plan.explicitRecipes.map(r => \r\n        <th>{r.getTitle()}</th>)\r\n\r\n    const calculatedRecipeHeaderList = plan.calculatedRecipes.map(r => \r\n        <th className=\"bg-light\">{r.getTitle()}</th>)\r\n\r\n    let ingredientMap = getIngredientMap(allRecipes);\r\n\r\n    const ingredientLineList = Array.from(ingredientMap.keys()).sort().map(name => {\r\n        \r\n        const perRecipe = allRecipes.map(r => {\r\n            let ingredient = ingredientMap.get(name) ?? new Map();\r\n            let recipeIngredient = ingredient.get(r.getId());\r\n            if(recipeIngredient)\r\n            {\r\n                return <td>{\"\" + recipeIngredient[0] + \" \" +  recipeIngredient[1]}</td>;\r\n            }\r\n            else\r\n            {\r\n                return <td>&nbsp;</td>;\r\n            }\r\n        });\r\n\r\n        return (<tr>\r\n                    <th>{name}</th>\r\n                    {perRecipe}\r\n                </tr>);\r\n    });\r\n\r\n\r\n    return (\r\n        <Container className=\"pt-0 pb-0 pl-0 pr-0\">\r\n        <Table striped bordered size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                <th></th>\r\n                {explicitRecipeHeaderList}\r\n                {calculatedRecipeHeaderList}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {ingredientLineList}\r\n            </tbody>\r\n        </Table>\r\n        </Container>\r\n    );\r\n\r\n}","import CodeMirror from \"codemirror\";\r\nimport \"codemirror/addon/hint/show-hint\";\r\n\r\nimport { IngredientJSON } from '../model/Recipe';\r\n\r\nCodeMirror.defineMode(\"ingredients\", () => {\r\n  var Location = {\r\n    INGREDIENT: 0,\r\n    AMOUNT: 1,\r\n    UNIT: 2,\r\n    ERROR: 3,\r\n  };\r\n\r\n  return {\r\n    startState: function () {\r\n      return {\r\n        location: Location.INGREDIENT,\r\n      };\r\n    },\r\n    token: function (stream, state) {\r\n      if (stream.sol()) {\r\n        state.location = Location.INGREDIENT;\r\n      }\r\n\r\n      var ch = stream.next();\r\n\r\n      if (ch === \";\") {\r\n        if (state.location === Location.INGREDIENT)\r\n          state.location = Location.AMOUNT;\r\n        else if (state.location === Location.AMOUNT)\r\n          state.location = Location.UNIT;\r\n        else state.location = Location.ERROR;\r\n      }\r\n\r\n      if (state.location === Location.ERROR) {\r\n        return \"error\";\r\n      }\r\n\r\n      if (ch === \";\") {\r\n        return \"keyword\";\r\n      }\r\n\r\n      if (state.location === Location.INGREDIENT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"atom\";\r\n      }\r\n\r\n      if (state.location === Location.AMOUNT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"number\";\r\n      }\r\n\r\n      if (state.location === Location.UNIT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"atom\";\r\n      }\r\n\r\n      return \"error\";\r\n    },\r\n  };\r\n});\r\n\r\nexport function parseIngredients(text: string, errors: CodeMirror.Annotation[]) {\r\n\r\n  let ingredients: IngredientJSON[] = [];\r\n\r\n  let lines: string[] = text.split(/\\r?\\n/);\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let line = lines[i];\r\n\r\n    if (line.trim().length > 0) {\r\n      let parts = line.split(\";\");\r\n\r\n      if (parts.length < 3) {\r\n        errors.push({\r\n          from: CodeMirror.Pos(i, 0),\r\n          to: CodeMirror.Pos(i, line.length),\r\n          message: \"Not enough parts. Syntax: <name>;<amount>;<unit>\",\r\n        });\r\n      } else if (parts.length > 3) {\r\n        let startpos = parts[0].length + parts[1].length + parts[2].length + 2;\r\n        errors.push({\r\n          from: CodeMirror.Pos(i, startpos),\r\n          to: CodeMirror.Pos(i, line.length),\r\n          message: \"Too many parts. Syntax: <name>;<amount>;<unit>\",\r\n        });\r\n      }\r\n      else {\r\n        let startAmount = parts[0].length + 1;\r\n        let endAmount = startAmount + parts[1].length;\r\n\r\n        parts = parts.map(s => s.trim());\r\n\r\n        if (parts[0].length === 0 || parts[1].length === 0 || parts[2].length === 0) {\r\n          errors.push({\r\n            from: CodeMirror.Pos(i, 0),\r\n            to: CodeMirror.Pos(i, line.length),\r\n            message: \"Empty part(s). Syntax: <name>;<amount>;<unit>\",\r\n          });\r\n        }\r\n        else if (\"\" + Number.parseFloat(parts[1]) !== parts[1]) {\r\n          errors.push({\r\n            from: CodeMirror.Pos(i, startAmount),\r\n            to: CodeMirror.Pos(i, endAmount),\r\n            message: \"Amount should be a number.\",\r\n          });\r\n        }\r\n        else {\r\n          ingredients.push({ name: parts[0], amount: Number.parseFloat(parts[1]), unit: parts[2] })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return ingredients;\r\n}\r\n\r\nCodeMirror.registerHelper(\"lint\", \"ingredients\", function (text: string) {\r\n  let errors: CodeMirror.Annotation[] = [];\r\n  parseIngredients(text, errors);\r\n  return errors;\r\n});\r\n\r\nexport function autocomplete(ingredients: string[], units: string[]) {\r\n  return function (\r\n    cm: CodeMirror.Editor,\r\n  ) {\r\n\r\n    var cursor = cm.getCursor(),\r\n      line = cm.getLine(cursor.line);\r\n    var start = cursor.ch,\r\n      end = cursor.ch;\r\n\r\n    let nrpart = (line.substring(0, end).match(/;/g) || []).length;\r\n\r\n    if (nrpart !== 0 && nrpart !== 2) {\r\n      return null;\r\n    }\r\n\r\n    while (start && line.charAt(start - 1) !== \";\") --start;\r\n    while (end < line.length && line.charAt(end) !== \";\") ++end;\r\n    var word = line.slice(start, end).trimLeft().toLowerCase();\r\n\r\n    let selection =\r\n      nrpart === 0\r\n        ? ingredients.filter((i) => i.indexOf(word) >= 0)\r\n        : units.filter((i) => i.startsWith(word));\r\n\r\n    if(selection.length === 1 && selection[0] === word) {\r\n        selection = []\r\n    }\r\n\r\n    return {\r\n      list: selection,\r\n      from: CodeMirror.Pos(cursor.line, start),\r\n      to: CodeMirror.Pos(cursor.line, end),\r\n    };\r\n  }\r\n};\r\n","import React, { FunctionComponent, ChangeEvent } from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\nimport { RecipeJSON, Recipe, Ingredient } from '../model/Recipe';\r\nimport { RecipeService } from '../service/RecipeService';\r\n\r\nimport CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/addon/lint/lint.css';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/addon/selection/active-line.js';\r\nimport 'codemirror/addon/hint/show-hint';\r\nimport 'codemirror/addon/lint/lint.js';\r\nimport 'codemirror/addon/display/placeholder.js';\r\n\r\nimport { autocomplete, parseIngredients } from './IngredientLang'\r\n\r\ntype RecipeEditorProps = {\r\n    recipe?: Recipe,\r\n    recipeService: RecipeService,\r\n    onClose: () => void,\r\n    onSave: (recipe: Recipe) => void,\r\n    onDelete: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeEditor: FunctionComponent<RecipeEditorProps> = (props) => {\r\n\r\n    const [recipeJSON, setRecipeJSON] = React.useState<RecipeJSON>(\r\n        props.recipe ? props.recipe.toJSON() : Object.create({}));\r\n    const [isTitleInvalid, setIsTitleInvalid] = React.useState(!props.recipe);\r\n    const [isIngredientsInvalid, setIsIngredientsInvalid] = React.useState(false);\r\n\r\n    const generateIngredientCSV = (ingredients: Ingredient[]) => {\r\n        return ingredients.map(i => i.getName() + \";\" + i.getAmount() + \";\" + i.getUnit()).join(\"\\n\")\r\n    }\r\n\r\n    const [ingredientCSV, setIngredientCSV] = React.useState(props.recipe ?\r\n        generateIngredientCSV(props.recipe.getIngredients()) : \"\");\r\n\r\n    const setTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal = e.currentTarget.value;\r\n        setIsTitleInvalid(!newVal || newVal.length === 0);\r\n        setRecipeJSON(r => ({ ...r, ...{ title: newVal } }))\r\n    }\r\n\r\n    const setSummary = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({ ...r, ...{ summary: newVal } }))\r\n    }\r\n\r\n    const setSource = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({ ...r, ...{ source: newVal } }))\r\n    }\r\n\r\n    const setMinutes = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: number | undefined = Number.parseInt(e.currentTarget.value)\r\n        if (isNaN(newVal)) newVal = undefined\r\n        setRecipeJSON(r => ({ ...r, ...{ readyInMinutes: newVal } }))\r\n    }\r\n\r\n    const updateIngredients = (text: string) => {\r\n\r\n        setIngredientCSV(text);\r\n\r\n        let errors: CodeMirror.Annotation[] = [];\r\n        let ingredients = parseIngredients(text, errors);\r\n        let invalid = errors.length > 0;\r\n\r\n        if (invalid) {\r\n            setIsIngredientsInvalid(true);\r\n        }\r\n        else {\r\n            setIsIngredientsInvalid(false);\r\n            setRecipeJSON(r => ({ ...r, ...{ ingredients: ingredients } }))\r\n        }\r\n    }\r\n\r\n    const saveRecipe = () => {\r\n        props.onSave(Recipe.fromJSON(recipeJSON))\r\n    }\r\n\r\n    const deleteRecipe = () => {\r\n        if (props.recipe) {\r\n            props.onDelete(props.recipe)\r\n        }\r\n    }\r\n\r\n    const focusElement = React.createRef<HTMLInputElement>();\r\n    const ingredientEditorElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    return (\r\n        <Modal show={true} onHide={props.onClose} onEntered={() => {\r\n            if (focusElement.current) focusElement.current.focus();\r\n            if (ingredientEditorElement.current) {\r\n                let cm = CodeMirror.fromTextArea(ingredientEditorElement.current,\r\n                    {\r\n                        lineNumbers: false,\r\n                        mode: \"ingredients\",\r\n                        gutters: [\"CodeMirror-lint-markers\"],\r\n                        lint: true,\r\n                        extraKeys: { \"Ctrl-Space\": \"autocomplete\" }\r\n                    });\r\n\r\n                cm.on(\"change\", (instance: CodeMirror.Editor) => {\r\n                    updateIngredients(instance.getValue());\r\n                });\r\n                cm.on(\"cursorActivity\", (instance: CodeMirror.Editor) => {\r\n                    instance.showHint({\r\n                        hint: autocomplete(props.recipeService.getIngredients(), props.recipeService.getUnits()),\r\n                        completeSingle: false,\r\n                        closeOnUnfocus: true\r\n                    });\r\n                });\r\n            }\r\n        }}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add new recipe</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"formTitle\">\r\n                        <Form.Control type=\"title\" value={recipeJSON.title} placeholder=\"Title\"\r\n                            isInvalid={isTitleInvalid} onChange={setTitle}\r\n                            ref={focusElement}\r\n                            size=\"sm\" />\r\n                        <Form.Control.Feedback type=\"invalid\">Required field!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formSummary\">\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            value={recipeJSON.summary}\r\n                            onChange={setSummary}\r\n                            rows={4}\r\n                            placeholder=\"Summary\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formSource\">\r\n                        <Form.Control\r\n                            type=\"source\"\r\n                            value={recipeJSON.source}\r\n                            onChange={setSource}\r\n                            placeholder=\"Where to find the recipe\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formMinutes\">\r\n                        <Form.Control\r\n                            type=\"minutes\"\r\n                            value={recipeJSON.readyInMinutes}\r\n                            onChange={setMinutes}\r\n                            placeholder=\"Number of minutes to cook\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formIngredients\">\r\n                        <Form.Control as=\"textarea\" value={ingredientCSV} ref={ingredientEditorElement}\r\n                            placeholder=\"Ingredients: <name>;<amount>;<unit>\" />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button type=\"button\" variant=\"secondary\" onClick={props.onClose}>Close</Button>\r\n                <Button type=\"button\" variant=\"primary\" onClick={saveRecipe} disabled={isTitleInvalid || isIngredientsInvalid}>Save recipe</Button>\r\n                {(() => {\r\n                    if (props.recipe) {\r\n                        return (<Button type=\"button\" variant=\"primary\" onClick={deleteRecipe}>Delete recipe</Button>)\r\n                    }\r\n                })()}\r\n            </Modal.Footer>\r\n        </Modal>)\r\n}\r\n","import { Plan } from \"./model/Plan\";\r\nimport { PlanSettings } from \"./model/PlanSettings\";\r\nimport { Recipe } from \"./model/Recipe\";\r\nimport { RecipeIndex } from \"./service/RecipeDB\";\r\nimport { randomFilter } from \"./filters/Filter\";\r\n\r\nexport function optimizePlan(\r\n  recipeIndex: RecipeIndex,\r\n  previousPlan: Plan,\r\n  settings: PlanSettings\r\n) {\r\n  const nrRecipesToCalculate = Math.max(\r\n    0,\r\n    settings.nrRecipes - previousPlan.explicitRecipes.length\r\n  );\r\n\r\n  const allRecipeIds = new Set(recipeIndex.all().map((r) => r.getId()));\r\n  const freeRecipeIds = new Set(allRecipeIds);\r\n  previousPlan.explicitRecipes.forEach((r) => freeRecipeIds.delete(r.getId()));\r\n\r\n  const calcultedRecipes: Recipe[] = [];\r\n\r\n  for (let i = 0; i < nrRecipesToCalculate; i++) {\r\n    let freeRecipes = recipeIndex.getAll(Array.from(freeRecipeIds));\r\n    let currentRecipes = settings.optimization.filter(\r\n      previousPlan.explicitRecipes,\r\n      calcultedRecipes,\r\n      freeRecipes\r\n    );\r\n\r\n    if (currentRecipes.length > 0) {\r\n      var finalRecipe = randomFilter.filter(\r\n        previousPlan.explicitRecipes,\r\n        calcultedRecipes,\r\n        currentRecipes\r\n      )[0];\r\n\r\n      calcultedRecipes.push(finalRecipe);\r\n      freeRecipeIds.delete(finalRecipe.getId());\r\n    }\r\n  }\r\n\r\n  const newPlan = previousPlan.clone();\r\n  newPlan.calculatedRecipes = calcultedRecipes;\r\n\r\n  return newPlan;\r\n}\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { Navbar, Nav, NavDropdown, Button, Image } from \"react-bootstrap\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { Form, Modal, Alert } from \"react-bootstrap\";\r\n\r\nimport { RecipeIndex } from \"./service/RecipeDB\";\r\nimport { RecipeService } from \"./service/RecipeService\";\r\n\r\nimport { PlanSettings } from \"./model/PlanSettings\";\r\nimport { Plan } from \"./model/Plan\";\r\n\r\nimport { Recipe, serializeRecipes, deserializeRecipes } from \"./model/Recipe\";\r\nimport { RecipeSelector } from \"./components/RecipeSelector\";\r\nimport { LoadFileDialog } from \"./components/LoadFileDialog\";\r\nimport { SaveFileDialog } from \"./components/SaveFileDialog\";\r\nimport { PlanSettingsPanel } from \"./components/PlanSettings\";\r\nimport { PlanVisualizer } from \"./components/PlanVisualizer\";\r\nimport { RecipeEditor } from \"./components/RecipeEditor\";\r\n\r\nimport { optimizePlan } from \"./Planner\";\r\nimport { exportPlan, exportShoppingList } from \"./PlanExporter\";\r\n\r\nimport { Beforeunload } from \"react-beforeunload\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\ntype MenuProps = {\r\n  onLoadFile: () => void;\r\n  onNewRecipe: () => void;\r\n  onSaveFile: () => void;\r\n  unsavedChanges: boolean;\r\n};\r\n\r\nfunction getVersionNumber() {\r\n  return `${process.env.REACT_APP_VERSION}`;\r\n}\r\n\r\nconst Menu: FunctionComponent<MenuProps> = ({\r\n  onLoadFile,\r\n  onNewRecipe,\r\n  onSaveFile,\r\n  unsavedChanges,\r\n}) => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">Mealee</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"container-fluid\">\r\n          <NavDropdown title=\"Recipes\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#\" active={false} onClick={onLoadFile}>\r\n              Load recipes...\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              href=\"#\"\r\n              active={false}\r\n              onClick={onSaveFile}\r\n              disabled={!unsavedChanges}\r\n            >\r\n              Save recipes...\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#\" active={false} onClick={onNewRecipe}>\r\n              Add new recipe...\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Nav.Item className=\"ml-auto\">\r\n            <Nav.Link>v{getVersionNumber()}</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\ntype AppState = {\r\n  recipeIndex: RecipeIndex;\r\n  planSettings: PlanSettings;\r\n  plan: Plan;\r\n  showDialog?: Dialog;\r\n  recipeToEdit?: Recipe;\r\n  error: string | null;\r\n  unsavedChanges: boolean;\r\n};\r\n\r\nenum Dialog {\r\n  LoadFile,\r\n  SaveFile,\r\n  RecipeEditor,\r\n  SavePlanXLS,\r\n  ShoppingList,\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    let recipeIndex = new RecipeIndex();\r\n    let planSettings = new PlanSettings();\r\n\r\n    // Hard binding is needed if `loadFile` do not use arrow notation\r\n    // this.loadFile = this.loadFile.bind(this);\r\n    this.state = {\r\n      recipeIndex: recipeIndex,\r\n      planSettings: planSettings,\r\n      plan: optimizePlan(recipeIndex, new Plan(), planSettings),\r\n      showDialog: undefined,\r\n      recipeToEdit: undefined,\r\n      error: null,\r\n      unsavedChanges: false,\r\n    };\r\n  }\r\n\r\n  addRecipes = (newRecipes: Recipe[], fromFile = false) => {\r\n    this.setState((st) => {\r\n      // You want to save if it is not a first file load\r\n      let needsSave =\r\n        st.unsavedChanges || !(fromFile && st.recipeIndex.count() === 0);\r\n\r\n      let ret = {};\r\n      let newRecipeIndex = st.recipeIndex.addAll(newRecipes);\r\n\r\n      if (newRecipeIndex !== st.recipeIndex) {\r\n        ret = {\r\n          recipeIndex: newRecipeIndex,\r\n          plan: optimizePlan(newRecipeIndex, st.plan, st.planSettings),\r\n          unsavedChanges: needsSave,\r\n        };\r\n      }\r\n\r\n      return ret;\r\n    });\r\n  };\r\n\r\n  saveRecipe = (recipe: Recipe) => {\r\n    this.addRecipes([recipe]);\r\n    this.closeRecipeEditor();\r\n  };\r\n\r\n  onFileLoaded = (ev: ProgressEvent<FileReader>) => {\r\n    let res = ev.target?.result;\r\n\r\n    if (typeof res == \"string\") {\r\n      try {\r\n        this.addRecipes(deserializeRecipes(res), true);\r\n      } catch (e) {\r\n        this.setState({ error: e.message });\r\n      }\r\n    }\r\n    this.closeDialog();\r\n  };\r\n\r\n  loadFile = (file: File) => {\r\n    var reader = new FileReader();\r\n    reader.onload = (ev) => this.onFileLoaded(ev);\r\n    reader.readAsText(file, \"UTF-8\");\r\n  };\r\n\r\n  genRecipeFileContent = () => {\r\n    return serializeRecipes(this.state.recipeIndex.all());\r\n  };\r\n\r\n  fileSaved = () => {\r\n    this.setState({ unsavedChanges: false });\r\n    this.closeDialog();\r\n  };\r\n\r\n  showDialog = (dialog: Dialog) => {\r\n    return () => this.setState({ showDialog: dialog });\r\n  };\r\n\r\n  closeDialog = () => {\r\n    this.setState({ showDialog: undefined });\r\n  };\r\n\r\n  closeRecipeEditor = () => {\r\n    this.setState({ recipeToEdit: undefined, showDialog: undefined });\r\n  };\r\n\r\n  dismissError = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  updatePlanSettings = (ps: PlanSettings) => {\r\n    this.setState((st) => {\r\n      return {\r\n        planSettings: ps,\r\n        plan: optimizePlan(st.recipeIndex, st.plan, ps),\r\n      };\r\n    });\r\n  };\r\n\r\n  updateExplicitRecipes = (newExplicitRecipes: Recipe[]) => {\r\n    this.setState((st) => {\r\n      let newPlan: Plan = Object.create(st.plan);\r\n      newPlan.explicitRecipes = newExplicitRecipes;\r\n      return { plan: optimizePlan(st.recipeIndex, newPlan, st.planSettings) };\r\n    });\r\n  };\r\n\r\n  editRecipe = (recipe: Recipe) => {\r\n    this.setState({ showDialog: Dialog.RecipeEditor, recipeToEdit: recipe });\r\n  };\r\n\r\n  deleteRecipe = (recipe: Recipe) => {\r\n    this.setState((st) => {\r\n      let newRecipeIndex = st.recipeIndex.delete(recipe.getId());\r\n\r\n      return {\r\n        recipeIndex: newRecipeIndex,\r\n        plan: optimizePlan(newRecipeIndex, st.plan, st.planSettings),\r\n        showDialog: undefined,\r\n        recipeToEdit: undefined,\r\n        unsavedChanges: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  renderDialog = () => {\r\n    switch (this.state.showDialog) {\r\n      case Dialog.LoadFile: {\r\n        return (\r\n          <LoadFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Load recipes file\"\r\n            loadButtonTitle=\"Load recipes\"\r\n            onLoad={this.loadFile}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.SaveFile: {\r\n        return (\r\n          <SaveFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Save recipes file\"\r\n            saveButtonTitle=\"Save recipes\"\r\n            data={this.genRecipeFileContent()}\r\n            type=\"application/json\"\r\n            initialFileName=\"recipes\"\r\n            extension=\"json\"\r\n            onSave={this.fileSaved}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.RecipeEditor: {\r\n        return (\r\n          <RecipeEditor\r\n            onClose={this.closeRecipeEditor}\r\n            onSave={this.saveRecipe}\r\n            onDelete={this.deleteRecipe}\r\n            recipe={this.state.recipeToEdit}\r\n            recipeService={new RecipeService(this.state.recipeIndex)}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.SavePlanXLS: {\r\n        return (\r\n          <SaveFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Save plan\"\r\n            saveButtonTitle=\"Save plan\"\r\n            data={exportPlan(this.state.plan)}\r\n            type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n            initialFileName=\"plan\"\r\n            extension=\"xlsx\"\r\n            onSave={this.closeDialog}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.ShoppingList: {\r\n        return (\r\n          <Modal show={true} onHide={this.closeDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Shopping list</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n              <Form>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={20}\r\n                  cols={80}\r\n                  value={exportShoppingList(this.state.plan)}\r\n                  readOnly\r\n                />\r\n              </Form>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        );\r\n      }\r\n\r\n      default: {\r\n        return <></>;\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"p-3\">\r\n        <Alert\r\n          variant=\"danger\"\r\n          onClose={this.dismissError}\r\n          show={!!this.state.error}\r\n          dismissible\r\n        >\r\n          {this.state.error}\r\n        </Alert>\r\n\r\n        {(() => {\r\n          if (this.state.unsavedChanges) {\r\n            return (\r\n              <Beforeunload onBeforeunload={() => \"You'll lose your data!\"} />\r\n            );\r\n          }\r\n        })()}\r\n\r\n        {this.renderDialog()}\r\n\r\n        <Row>\r\n          <Col>\r\n            <Menu\r\n              onLoadFile={this.showDialog(Dialog.LoadFile)}\r\n              onNewRecipe={this.showDialog(Dialog.RecipeEditor)}\r\n              onSaveFile={this.showDialog(Dialog.SaveFile)}\r\n              unsavedChanges={this.state.unsavedChanges}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <PlanSettingsPanel\r\n              planSettings={this.state.planSettings}\r\n              onUpdate={this.updatePlanSettings}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row className=\"pb-2\">\r\n          <Col xs=\"3\">\r\n            <RecipeSelector\r\n              selectedRecipes={this.state.plan.explicitRecipes}\r\n              recipeIndex={this.state.recipeIndex}\r\n              maxNrSelected={this.state.planSettings.nrRecipes}\r\n              onUpdate={this.updateExplicitRecipes}\r\n              onEdit={this.editRecipe}\r\n            />\r\n          </Col>\r\n          <Col>\r\n            {(() => {\r\n              if (this.state.plan.nrRecipes() === 0) {\r\n                return (\r\n                  <Container className=\"pt-2 pl-0\">\r\n                    No recipes are planned\r\n                  </Container>\r\n                );\r\n              } else {\r\n                return (\r\n                  <Container className=\"pt-2 pl-0 pr-0\">\r\n                    <Row>\r\n                      <Col>\r\n                        <PlanVisualizer\r\n                          plan={this.state.plan}\r\n                          planSettings={this.state.planSettings}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <Button\r\n                          className=\"float-right\"\r\n                          onClick={this.showDialog(Dialog.SavePlanXLS)}\r\n                        >\r\n                          Export plan &nbsp;\r\n                          <Image src=\"xlsx_logo.svg\" height=\"18\" />\r\n                        </Button>\r\n                        <Button\r\n                          className=\"float-right mr-2\"\r\n                          onClick={this.showDialog(Dialog.ShoppingList)}\r\n                        >\r\n                          Show shopping list &nbsp;\r\n                          <Image src=\"todoist_logo.svg\" height=\"18\" />\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                );\r\n              }\r\n            })()}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}