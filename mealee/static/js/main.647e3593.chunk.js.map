{"version":3,"sources":["model/Recipe.tsx","components/RecipeSelector.tsx","RecipeDB.tsx","components/LoadFileDialog.tsx","components/SaveFileDialog.tsx","filters/RandomFilter.tsx","filters/MinIngredientsFilter.tsx","filters/MaxReuseFilter.tsx","filters/Filter.tsx","model/PlanSettings.tsx","components/PlanSettings.tsx","components/PlanVisualizer.tsx","components/RecipeEditor.tsx","model/Plan.tsx","Planner.tsx","App.tsx","index.js"],"names":["Ingredient","name","amount","unit","this","o","Error","undefined","Recipe","id","title","summary","source","sourceUrl","readyInMinutes","ingredients","map","i","toJSON","replace","c","r","Math","random","toString","Array","isArray","fromJSON","RecipeSelector","recipeIndex","selectedRecipes","maxNrSelected","onUpdate","onEdit","React","useState","filter","setFilter","currentRecipeid","setCurrentRecipeId","filteredRecipes","trim","length","all","search","res","key","selectedRecipeMap","Map","getId","renderRecipe","recipe","getSummary","getIngredients","getName","sort","n","Col","sm","className","Popover","Title","as","getTitle","Content","Container","Row","Image","src","getReadyInMinutes","getSource","listItems","OverlayTrigger","placement","overlay","onEnter","onExit","ListGroup","Item","Form","Check","type","label","disabled","has","size","checked","onChange","delete","set","from","values","Button","variant","onClick","e","editButton","onSubmit","preventDefault","InputGroup","Prepend","Text","FormControl","placeholder","event","currentTarget","value","Group","controlId","RecipeIndex","index","recipesMap","fieldAccessors","join","fieldBoostFactors","termFilter","term","toLowerCase","add","toUpdate","JSON","stringify","get","newMap","addDocumentToIndex","words","addAll","recipes","reduce","idx","q","query","acc","push","score","removeDocumentFromIndex","Set","getAll","keys","count","createIndex","new","LoadFileDialog","loadButtonTitle","onClose","onLoad","file","setFile","Modal","show","onHide","Header","closeButton","Body","target","files","Footer","SaveFileDialog","saveButtonTitle","onSave","data","initialFileName","fileName","setFileName","Label","Control","download","MinIngredientsFilter","explicitRecipes","remainingRecipes","ingredientsAlreadyUsed","concat","flatMap","scoredRecipes","ingredientsAlreadyUSed","sum","a","b","result","scoredRecipe","MaxReuseFilter","randomFilter","max","floor","Optimization","filters","filterMap","f","createFilters","PlanSettingsPanel","props","collapsed","setCollapsed","filterList","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","planSettings","nrRecipes","newNrRecipes","newSettings","clone","changeNrRecipes","parseInt","optimization","filterId","changeOptimization","PlanSettings","Object","create","PlanVisualizer","plan","allRecipes","calculatedRecipes","explicitRecipeHeaderList","calculatedRecipeHeaderList","ingredientMap","forEach","oneIngredientRecord","getAmount","getUnit","ingredientLineList","perRecipe","x","entry","Table","striped","bordered","RecipeEditor","recipeJSON","setRecipeJSON","isTitleInvalid","setIsTitleInvalid","isIngredientsInvalid","setIsIngredientsInvalid","ingredientCSV","setIngredientCSV","deleteRecipe","onDelete","focusElement","createRef","onEntered","current","focus","isInvalid","newVal","ref","Feedback","rows","Number","isNaN","lines","split","invalid","line","parts","s","Plan","optimizePlan","previousPlan","settings","nrRecipesToCalculate","allRecipeIds","freeRecipeIds","calcultedRecipes","freeRecipes","currentRecipes","finalRecipe","newPlan","Menu","onLoadFile","onNewRecipe","onSaveFile","unsavedChanges","Navbar","bg","Brand","href","aria-controls","Nav","NavDropdown","active","Divider","App","addRecipes","newRecipes","fromFile","setState","st","needsSave","ret","newRecipeIndex","saveRecipe","closeRecipeEditor","onFileLoaded","ev","json","parse","version","deserializeRecipes","error","message","closeLoadFileDialog","loadFile","reader","FileReader","onload","readAsText","genRecipeFileContent","state","fileSaved","closeSaveFileDialog","showLoadFileDialog","showSaveFileDialog","showRecipeEditor","recipeToEdit","dismissError","updatePlanSettings","ps","updateExplicitRecipes","newExplicitRecipes","editRecipe","fluid","Alert","dismissible","onBeforeunload","xs","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAqBaA,EAAb,WAEI,WAAoBC,EAAcC,EAAgBC,GACjD,yBAkDOF,UAlDR,OAmDQC,YAnDR,OAoDQC,UApDR,EACIC,KAAKH,KAAOA,EACZG,KAAKF,OAASA,EACdE,KAAKD,KAAOA,EANpB,sDAWQ,OAAOC,KAAKH,OAXpB,kCAgBQ,OAAOG,KAAKF,SAhBpB,gCAqBQ,OAAOE,KAAKD,OArBpB,+BA8CQ,MAAO,CACHF,KAAMG,KAAKH,KACXC,OAAQE,KAAKF,OACbC,KAAMC,KAAKD,SAjDvB,gCAwB2BE,GAEnB,IAAIA,EAAEJ,KAEF,MAAM,IAAIK,MAAM,2BAGpB,IAAID,EAAEF,KAEF,MAAM,IAAIG,MAAM,2BAGpB,QAAgBC,IAAbF,EAAEH,OAED,MAAM,IAAII,MAAM,6BAGpB,OAAO,IAAIN,EAAWK,EAAEJ,KAAMI,EAAEH,OAAQG,EAAEF,UAzClD,KAiEO,IAAMK,EAAb,WAEI,WAAoBC,EAAYC,GAC/B,yBAiFOD,QAjFR,OAkFQC,WAlFR,OAmFQC,aAnFR,OAoFQC,YApFR,OAqFQC,eArFR,OAsFQC,oBAtFR,OAuFQC,iBAvFR,EACIX,KAAKK,GAAKA,EACVL,KAAKM,MAAQA,EACbN,KAAKW,YAAc,GAN3B,oDAWQ,OAAOX,KAAKK,KAXpB,iCAgBQ,OAAOL,KAAKM,QAhBpB,mCAqBQ,OAAON,KAAKO,UArBpB,kCA0BQ,OAAOP,KAAKQ,SA1BpB,qCA+BQ,OAAOR,KAAKS,YA/BpB,0CAoCQ,OAAOT,KAAKU,iBApCpB,uCAyCQ,OAAOV,KAAKW,cAzCpB,+BAyEQ,MAAO,CACHN,GAAIL,KAAKK,GACTC,MAAON,KAAKM,MACZC,QAASP,KAAKO,QACdC,OAAQR,KAAKQ,OACbC,UAAWT,KAAKS,UAChBC,eAAgBV,KAAKU,eACrBC,YAAaX,KAAKW,YAAYC,KAAI,SAAAC,GAAC,OAAEA,EAAEC,gBAhFnD,gCA4C2Bb,GAOnB,GALIA,EAAEI,KAEFJ,EAAEI,GAtDH,uCAAuCU,QAAQ,SAAS,SAASC,GACtE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OAD0C,MAANH,EAAYC,EAAU,EAAJA,EAAW,GACxDG,SAAS,SAuDZnB,EAAEK,MAEF,MAAM,IAAIJ,MAAM,wBAGpB,IAAIe,EAAI,IAAIb,EAAOH,EAAEI,GAAIJ,EAAEK,OAY3B,OAVAW,EAAEV,QAAUN,EAAEM,QACdU,EAAET,OAASP,EAAEO,OACbS,EAAER,UAAYR,EAAEQ,UAChBQ,EAAEP,eAAiBT,EAAES,eAElBW,MAAMC,QAAQrB,EAAEU,eAEfM,EAAEN,YAAcV,EAAEU,YAAYC,KAAI,SAAAC,GAAC,OAAIjB,EAAW2B,SAASV,OAGxDI,MApEf,K,gFCrEaO,EAAyD,SAAC,GAAqE,IAApEC,EAAmE,EAAnEA,YAAaC,EAAsD,EAAtDA,gBAAiBC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,SAAUC,EAAY,EAAZA,OAAY,EAE3GC,IAAMC,SAAS,IAF4F,mBAEhIC,EAFgI,KAExHC,EAFwH,OAGzFH,IAAMC,SAAwB,MAH2D,mBAGhIG,EAHgI,KAG/GC,EAH+G,KASjIC,EAA4C,IAAzBJ,EAAOK,OAAOC,OACnCb,EAAYc,MAAQd,EAAYe,OAAOR,GAAQpB,KAAI,SAAA6B,GAAG,OAAEA,EAAIC,OAE1DC,EAAoB,IAAIC,IAAIlB,EAAgBd,KAAI,SAAAK,GAAC,MAAI,CAACA,EAAE4B,QAAS5B,OAejE6B,EAAe,SAACC,GAElB,IAAMxC,EAAUwC,EAAOC,aAAeD,EAAOC,aAAe,2BACtDrC,EAAcoC,EAAOE,iBAAiBrC,KAAI,SAAAK,GAAC,OAAGA,EAAEiC,aACfC,OACAvC,KAAI,SAAAwC,GAAC,OAAI,kBAACC,EAAA,EAAD,CAAKC,GAAG,OAAOC,UAAU,8BAA8BH,MAEvG,OACI,kBAACI,EAAA,EAAD,CAASnD,GAAG,iBACR,kBAACmD,EAAA,EAAQC,MAAT,CAAeC,GAAG,MAAMX,EAAOY,YAC/B,kBAACH,EAAA,EAAQI,QAAT,KACA,kBAACC,EAAA,EAAD,CAAWN,UAAU,aACrB,kBAACO,EAAA,EAAD,CAAKP,UAAU,QACX,kBAACF,EAAA,EAAD,KAAM9C,IAEV,kBAACuD,EAAA,EAAD,CAAKP,UAAU,QACX,kBAACF,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACS,EAAA,EAAD,CAAOC,IAAI,oBAC1B,kBAACX,EAAA,EAAD,CAAKC,GAAG,QAAQP,EAAOkB,oBAA2BlB,EAAOkB,oBAAsB,UAAY,WAC3F,kBAACZ,EAAA,EAAD,CAAKC,GAAG,QAAO,kBAACS,EAAA,EAAD,CAAOC,IAAI,sBAC1B,kBAACX,EAAA,EAAD,CAAKC,GAAG,QAAQP,EAAOmB,YAAcnB,EAAOmB,YAAc,MAE9D,kBAACJ,EAAA,EAAD,KACSnD,OAkBfwD,EAAY/B,EACbxB,KAAI,SAACmC,GAAD,OACG,kBAACqB,EAAA,EAAD,CAAgBC,UAAU,QAAQC,QAASxB,EAAaC,GACpCwB,QAAS,kBAAIpC,EAAmBY,EAAOF,UACvC2B,OAAQ,kBAAIrC,EAAmB,QAC/C,kBAACsC,EAAA,EAAUC,KAAX,CAAgBhC,IAAKK,EAAOF,SACxB,kBAAC8B,EAAA,EAAKC,MAAN,CAAYC,KAAK,WACLxE,GAAI0C,EAAOF,QACXiC,MAAO/B,EAAOY,WACdoB,UAAWpC,EAAkBqC,IAAIjC,EAAOF,UAAYF,EAAkBsC,MAAQtD,EAC9EuD,QAASvC,EAAkBqC,IAAIjC,EAAOF,SACtCsC,SAAU,kBAhEjBlE,EAgEuC8B,EA/DzDJ,EAAkBqC,IAAI/D,EAAE4B,SAEvBF,EAAkByC,OAAOnE,EAAE4B,SAI3BF,EAAkB0C,IAAIpE,EAAE4B,QAAS5B,QAGrCW,EAASP,MAAMiE,KAAK3C,EAAkB4C,WAVlB,IAACtE,KA0CN,SAAC8B,GAChB,OAAGb,IAAkBa,EAAOF,QAEjB,kBAAC2C,EAAA,EAAD,CAAQC,QAAQ,kBAAkBR,KAAK,KAAK1B,UAAU,OAAOmC,QAAS,SAAAC,GAAC,OAAE9D,EAAOkB,KAAhF,QAIA,GAgBM6C,CAAW7C,QAKhC,OACI,kBAAC4B,EAAA,EAAD,CAAMpB,UAAU,OAAOsC,SAAU,SAACF,GAAD,OAAKA,EAAEG,mBACxC,kBAACC,EAAA,EAAD,CAAYxC,UAAU,QACtB,kBAACwC,EAAA,EAAWC,QAAZ,KACA,kBAACD,EAAA,EAAWE,KAAZ,CAAiB5F,GAAG,gBAApB,MAEA,kBAAC6F,EAAA,EAAD,CAAarB,KAAK,OAAOsB,YAAY,iBAAiBhB,SArF1C,SAACiB,GACbnE,EAAUmE,EAAMC,cAAcC,WAsF9B,kBAAC3B,EAAA,EAAK4B,MAAN,CAAYC,UAAU,eAClB,kBAAC/B,EAAA,EAAD,KAAYN,M,gCCtGXsC,EAaT,WAAYC,EAAuBC,GAAmC,IAAD,gCAXpDA,gBAWoD,OAVpDD,WAUoD,OARpDE,eAAiB,CAC9B,SAAC3F,GAAD,OAAeA,EAAE0C,YACjB,SAAC1C,GAAD,uBAAeA,EAAE+B,oBAAjB,QAAiC,IACjC,SAAC/B,GAAD,OAAeA,EAAEgC,iBAAiBrC,KAAI,SAAAC,GAAC,OAAIA,EAAEqC,aAAW2D,KAAK,OAKI,KAFpDC,kBAAoB,CAAC,EAAG,GAAK,GAEuB,KAK7DC,WAAa,SAACC,GAClB,OAAOA,EAAKC,eANqD,KAc9DC,IAAM,SAACjG,GACV,IAAIyB,EAAMzB,EAAE4B,QAERsE,GAAW,EAUf,GARG,EAAKR,WAAW3B,IAAItC,IAEhB0E,KAAKC,UAAU,EAAKV,WAAWW,IAAI5E,MAAU0E,KAAKC,UAAUpG,KAE3DkG,GAAW,GAIhBA,EACH,CAEI,EAAK/B,OAAO1C,GACZ,IAAI6E,EAAS,EAAKZ,WAAWtB,IAAI3C,EAAKzB,GAoBtC,OAlBAuG,YACI,EAAKd,MACL,EAAKE,eAKLa,QAGA,EAAKV,WAGLrE,EAEAzB,GAGG,IAAIwF,EAAY,EAAKC,MAAOa,GAInC,OAAO,GAvDsD,KA2D9DG,OAAS,SAACC,GACb,OAAOA,EAAQC,QAAO,SAACC,EAAkB9E,GACrC,OAAO8E,EAAIX,IAAInE,KAChB,IA9D8D,KAkE9DP,OAAS,SAACsF,GAAD,OAAeC,YACzB,EAAKrB,MACL,EAAKI,kBAEL,IACA,IACAW,QACA,EAAKV,gBAGL5G,EACA2H,GACAF,QAAO,SAACI,EAA2BvF,GACjC,IAAIxB,EAAI,EAAK0F,WAAWW,IAAI7E,EAAIC,KAKhC,OAJGzB,GAEC+G,EAAIC,KAAK,CAACvF,IAAKzB,EAAGiH,MAAOzF,EAAIyF,QAE1BF,IACR,KArF8D,KAuF9DzF,IAAM,WACT,OAAOlB,MAAMiE,KAAK,EAAKqB,WAAWpB,WAxF+B,KA2F9D+B,IAAM,SAAC5E,GACV,OAAO,EAAKiE,WAAWW,IAAI5E,IA5FsC,KA+F9D0C,OAAS,SAAC1C,GACb,GAAG,EAAKiE,WAAW3B,IAAItC,GACvB,CACI,IAAI6E,EAAS,EAAKZ,WAAWvB,OAAO1C,GAKpC,OAJAyF,YACI,EAAKzB,MACL,IAAI0B,IACJ1F,GACG,IAAI+D,EAAY,EAAKC,MAAOa,GAInC,OAAO,GA3GsD,KA+G9Dc,OAAS,SAACC,GACb,OAAOA,EAAKV,QAAO,SAACI,EAActF,GAC9B,IAAIzB,EAAI,EAAK0F,WAAWW,IAAI5E,GAK5B,OAJGzB,GAEC+G,EAAIC,KAAKhH,GAEN+G,IACR,KAvH8D,KA0H9DO,MAAQ,WACX,OAAO,EAAK5B,WAAW1B,MA1HvBjF,KAAK0G,MAAQA,GAAgB8B,YAAoB,GACjDxI,KAAK2G,WAAaA,GAA0B/D,YAAI,KAf3C6D,EAsBKgC,IAAM,WAChB,OAAO,IAAIhC,G,YCpBNiC,EAAyD,SAAC,GAA+C,IAA9CpI,EAA6C,EAA7CA,MAAOqI,EAAsC,EAAtCA,gBAAiBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,OAAY,EAEzF/G,IAAMC,SAAsB,MAF6D,mBAE1G+G,EAF0G,KAEpGC,EAFoG,KAIjH,OACI,kBAACC,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQN,GAC3B,kBAACI,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACzB,kBAACJ,EAAA,EAAMvF,MAAP,KAAcnD,IAEd,kBAAC0I,EAAA,EAAMK,KAAP,KACA,kBAAC1E,EAAA,EAAD,KACA,kBAACuB,EAAA,EAAD,CAAarB,KAAK,OAAOM,SAAU,SAACQ,GACOA,EAAE2D,OAAOC,MAERR,EAAQpD,EAAE2D,OAAOC,MAAM,IAIvBR,EAAQ,WAKpD,kBAACC,EAAA,EAAMQ,OAAP,KACI,kBAAChE,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,YAAYC,QAASkD,GAAnD,SACA,kBAACpD,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,UAAUV,UAAW+D,EACvCpD,QAAS,WAAUoD,GAAMD,EAAOC,KAASH,M,iBCrBpDc,EAAyD,SAAC,GAA6E,IAA5EnJ,EAA2E,EAA3EA,MAAOoJ,EAAoE,EAApEA,gBAAiBd,EAAmD,EAAnDA,QAASe,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,KAAM/E,EAA4B,EAA5BA,KAAMgF,EAAsB,EAAtBA,gBAAsB,EAE/G/H,IAAMC,SAAS8H,GAFgG,mBAExIC,EAFwI,KAE9HC,EAF8H,KAQ/I,OACI,kBAACf,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQN,GAC3B,kBAACI,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACzB,kBAACJ,EAAA,EAAMvF,MAAP,KAAcnD,IAEd,kBAAC0I,EAAA,EAAMK,KAAP,KACA,kBAAC1E,EAAA,EAAD,KACA,kBAACA,EAAA,EAAK4B,MAAN,CAAYC,UAAU,qBACtB,kBAAC7B,EAAA,EAAKqF,MAAN,kBACA,kBAACrF,EAAA,EAAKsF,QAAN,CAAcpF,KAAK,WAAWyB,MAAOwD,EAAU3E,SAAU,SAACQ,GAAD,OAA4CoE,EAAYpE,EAAE2D,OAAOhD,aAI1H,kBAAC0C,EAAA,EAAMQ,OAAP,KACI,kBAAChE,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,YAAYC,QAASkD,GAAnD,SACA,kBAACpD,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,UAAUV,UAAW+E,GAA8B,IAAlBA,EAASxH,OAC5DoD,QAAS,WAnBzBwE,IAASN,EAAME,EAAUjF,GAmBwB8E,MAAYD,M,kBCjC9D,I,QCUA,IAAMS,EAAb,sCACWtK,KAAO,gCADlB,KAEWQ,GAAI,iBAFf,KAGW2B,OAAS,SAACoI,EAA2B1I,EAA2B2I,GAEnE,IAAMC,EAAyB,IAAIlC,IAC/BgC,EAAgBG,OAAO7I,GAAiB8I,SAAQ,SAAAvJ,GAAC,OAAIA,EAAEgC,iBAAiBrC,KAAI,SAAAC,GAAC,OAAIA,EAAEqC,iBAEjFuH,EAAgBJ,EACjBzJ,KAAI,SAAAK,GAAC,MAAK,CAAC8B,OAAQ9B,EAAGiH,OAvBjBwC,EAuBiCJ,EAvBIvH,EAuBoB9B,EArBhE8B,EAAOE,iBAAiB2E,QAAO,SAAC+C,EAAK9J,GACxC,OAAG6J,EAAuB1F,IAAInE,EAAEqC,WAErByH,EAIAA,EAAI,IAEhB,KAXP,IAAkBD,EAAqC3H,KAwB1CI,MAAK,SAACyH,EAAEC,GACL,OAAGD,EAAE1C,MAAQ2C,EAAE3C,OAEH,EAEJ0C,EAAE1C,MAAQ2C,EAAE3C,MAET,EAIA,KAIb4C,EAAmB,GAEzB,GAAGL,EAAcnI,OAAO,EACxB,CAAC,IAAD,gBAC4BmI,GAD5B,IACI,IAAI,EAAJ,qBACA,CAAC,IADOM,EACR,QACI,GAAGN,EAAc,GAAGvC,QAAU6C,EAAa7C,MAMvC,MAJA4C,EAAO7C,KAAK8C,EAAahI,SALrC,+BAcA,OAAO+H,IC1CR,IAAME,EAAb,sCACWnL,KAAO,+BADlB,KAEWQ,GAAI,WAFf,KAGW2B,OAAS,SAACoI,EAA2B1I,EAA2B2I,GAEnE,IAAMC,EAAyB,IAAIlC,IAC/BgC,EAAgBG,OAAO7I,GAAiB8I,SAAQ,SAAAvJ,GAAC,OAAIA,EAAEgC,iBAAiBrC,KAAI,SAAAC,GAAC,OAAIA,EAAEqC,iBAEjFuH,EAAgBJ,EACjBzJ,KAAI,SAAAK,GAAC,MAAK,CAAC8B,OAAQ9B,EAAGiH,OAvBjBwC,EAuBiCJ,EAvBIvH,EAuBoB9B,EArBhE8B,EAAOE,iBAAiB2E,QAAO,SAAC+C,EAAK9J,GACxC,OAAG6J,EAAuB1F,IAAInE,EAAEqC,WAErByH,EAAI,EAIJA,IAEZ,KAXP,IAAkBD,EAAqC3H,KAwB1CI,MAAK,SAACyH,EAAEC,GACL,OAAGD,EAAE1C,MAAQ2C,EAAE3C,MAEJ,EAEH0C,EAAE1C,MAAQ2C,EAAE3C,OAER,EAID,KAIb4C,EAAmB,GAEzB,GAAGL,EAAcnI,OAAO,EACxB,CAAC,IAAD,gBAC4BmI,GAD5B,IACI,IAAI,EAAJ,qBACA,CAAC,IADOM,EACR,QACI,GAAGN,EAAc,GAAGvC,QAAU6C,EAAa7C,MAMvC,MAJA4C,EAAO7C,KAAK8C,EAAahI,SALrC,+BAcA,OAAO+H,ICrDFG,EAAe,IHC5B,sCACWpL,KAAO,gBADlB,KAEWQ,GAAI,MAFf,KAGW2B,OAAS,SAACoI,EAA2B1I,EAA2B2I,GACnE,OAA+B,IAA5BA,EAAiB/H,OAET,GAIA,CAAC+H,GAdEa,EAc4Bb,EAAiB/H,OAbxDpB,KAAKiK,MAAMjK,KAAKC,SAAWD,KAAKiK,MAAMD,OADjD,IAAsBA,IG2Bf,IC5BKE,ED4BCC,EAXb,WAEI,IAAMA,EAAU,CAAC,IAAIlB,EAAwB,IAAIa,EAAkBC,GAC7DK,EAAY,IAAI1I,IAAmByI,EAAQzK,KAAI,SAAA2K,GAAC,MAAI,CAACA,EAAElL,GAAIkL,OAEjE,MAAO,CACHhJ,IAAK,kBAAM8I,GACX/D,IAAK,SAACjH,GAAD,OAAgBiL,EAAUhE,IAAIjH,KAIXmL,GEjBnBC,EAA+D,SAACC,GAAW,IAAD,EAEjD5J,IAAMC,UAAS,GAFkC,mBAE5E4J,EAF4E,KAEjEC,EAFiE,KAoB7EC,EAAaR,EAAQ9I,MAAM3B,KAAI,SAAA2K,GAAC,OAClC,4BAAQjF,MAAOiF,EAAElL,IAAKkL,EAAE1L,SAG5B,OACI,kBAACiM,EAAA,EAAD,CAAWC,iBAAiB,KAC5B,kBAACC,EAAA,EAAD,KACI,kBAACF,EAAA,EAAUG,OAAX,CAAkBvI,GAAIsI,IAAK7C,OAAQ1D,QAAQ,OAAOyG,SAAS,IAAIxG,QAAS,kBAAMkG,GAAcD,KAA5F,iBACmBA,EAAY,MAAQ,OAEvC,kBAACG,EAAA,EAAUK,SAAX,CAAoBD,SAAS,KAC7B,kBAACF,EAAA,EAAK3C,KAAN,KACI,kBAAC1E,EAAA,EAAD,CAAMkB,SAAU,SAACF,GAAD,OAAKA,EAAEG,mBACvB,kBAACnB,EAAA,EAAK4B,MAAN,CAAYC,UAAU,aAClB,kBAAC7B,EAAA,EAAKqF,MAAN,2BACA,kBAACrF,EAAA,EAAKsF,QAAN,CAAcvG,GAAG,SAAS4C,MAAOoF,EAAMU,aAAaC,UACtClH,SAAU,SAACQ,GAAD,OAhChB,SAAC2G,GACrB,IAAIC,EAAcb,EAAMU,aAAaI,QACrCD,EAAYF,UAAYC,EACxBZ,EAAM9J,SAAS2K,GA6B0BE,CAAgBC,SAAS/G,EAAE2D,OAAOhD,UAC/D,qCACA,qCACA,qCACA,qCACA,uCAGJ,kBAAC3B,EAAA,EAAK4B,MAAN,CAAYC,UAAU,gBAClB,kBAAC7B,EAAA,EAAKqF,MAAN,qBACA,kBAACrF,EAAA,EAAKsF,QAAN,CAAcvG,GAAG,SAAS4C,MAAOoF,EAAMU,aAAaO,aAAatM,GACnD8E,SAAU,SAACQ,GAAD,OArCb,SAACiH,GACxB,IAAI5K,EAASqJ,EAAQ/D,IAAIsF,GACzB,GAAG5K,EACH,CACI,IAAIuK,EAAcb,EAAMU,aAAaI,QACrCD,EAAYI,aAAe3K,EAC3B0J,EAAM9J,SAAS2K,IA+BsBM,CAAmBlH,EAAE2D,OAAOhD,SACxDuF,W,SD3DTT,O,+CAAAA,I,0DAAAA,M,KAKL,IAAM0B,EAAb,WAEI,aAAe,yBASRT,eATO,OAUPM,kBAVO,EACV3M,KAAKqM,UAAY,EACjBrM,KAAK2M,aAAetB,EAAQ9I,MAAM,GAJ1C,oDAQQ,OAAOwK,OAAOC,OAAOhN,UAR7B,K,QEKaiN,EAAyD,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAE9DC,EAAaD,EAAK9C,gBAAgBG,OAAO2C,EAAKE,mBAEpD,GAAyB,IAAtBD,EAAW7K,OAEV,OACI,kBAACuB,EAAA,EAAD,CAAWN,UAAU,QAArB,0BAMR,IAAM8J,EAA2BH,EAAK9C,gBAAgBxJ,KAAI,SAAAK,GAAC,OACvD,4BAAKA,EAAE0C,eAEL2J,EAA6BJ,EAAKE,kBAAkBxM,KAAI,SAAAK,GAAC,OAC3D,wBAAIsC,UAAU,YAAYtC,EAAE0C,eAE5B4J,EAAgB,IAAI3K,IAEpBiF,EAAM,EACVsF,EAAWK,SAAQ,SAAAvM,GAEfA,EAAEgC,iBAAiBuK,SAAQ,SAAA3M,GACrB,IAAI4M,EAAsBF,EAAcjG,IAAIzG,EAAEqC,WAC1CuK,IAEFA,EAAsB,GACtBF,EAAclI,IAAIxE,EAAEqC,UAAWuK,IAGjCA,EAAoB5F,GAAYhH,EAAE6M,YAAc,IAAM7M,EAAE8M,aAG9D9F,OAGJ,IAAM+F,EAAqBvM,MAAMiE,KAAKiI,EAAcjF,QAAQnF,OAAOvC,KAAI,SAAAf,GAEnE,IAEMgO,EAFiBxM,MAAMiE,KAAK,CAAChD,OAAQ6K,EAAW7K,SAAS,SAACwL,EAAGjN,GAAJ,OAAUA,KAElDD,KAAI,SAAAiH,GACvB,IAAIkG,EAAQR,EAAcjG,IAAIzH,GAC9B,OAAGkO,GAASA,EAAMlG,GAEP,4BAAKkG,EAAMlG,IAIX,uCAIf,OAAQ,4BACI,4BAAKhI,GACJgO,MAKjB,OACI,kBAAChK,EAAA,EAAD,CAAWN,UAAU,QACrB,kBAACyK,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACjJ,KAAK,MACzB,+BACI,4BACA,6BACCoI,EACAC,IAGL,+BACCM,M,QCxEAO,EAAqD,SAACzC,GAAW,IAAD,EAErC5J,IAAMC,SAClB2J,EAAM3I,OAAO2I,EAAM3I,OAAOjC,SAASiM,OAAOC,OAAO,KAHA,mBAElEoB,EAFkE,KAEtDC,EAFsD,OAI7BvM,IAAMC,UAAU2J,EAAM3I,QAJO,mBAIlEuL,EAJkE,KAIlDC,EAJkD,OAKjBzM,IAAMC,UAAS,GALE,mBAKlEyM,EALkE,KAK5CC,EAL4C,OAY/B3M,IAAMC,SAAS2J,EAAM3I,OACjB2I,EAAM3I,OAAOE,iBAJpCrC,KAAI,SAAAC,GAAC,OAAEA,EAAEqC,UAAY,IAAMrC,EAAE6M,YAAc,IAAM7M,EAAE8M,aAAW9G,KAAK,MAIb,IAbJ,mBAYlE6H,EAZkE,KAYnDC,EAZmD,KAqFnEC,EAAe,WAEdlD,EAAM3I,QAEL2I,EAAMmD,SAASnD,EAAM3I,SAIvB+L,EAAehN,IAAMiN,YAE3B,OACI,kBAAC/F,EAAA,EAAD,CAAOC,MAAM,EAAMC,OAAQwC,EAAM9C,QAASoG,UAAW,WAAUF,EAAaG,SAASH,EAAaG,QAAQC,UAC1G,kBAAClG,EAAA,EAAMG,OAAP,CAAcC,aAAW,GACzB,kBAACJ,EAAA,EAAMvF,MAAP,wBAEA,kBAACuF,EAAA,EAAMK,KAAP,KACA,kBAAC1E,EAAA,EAAD,KACA,kBAACA,EAAA,EAAK4B,MAAN,CAAYC,UAAU,aAClB,kBAAC7B,EAAA,EAAKsF,QAAN,CAAcpF,KAAK,QAAQyB,MAAO8H,EAAW9N,MAAO6F,YAAY,QACrCgJ,UAAWb,EAAgBnJ,SAzF7C,SAACQ,GACd,IAAIyJ,EAASzJ,EAAEU,cAAcC,MAC7BiI,GAAmBa,GAA4B,IAAlBA,EAAO9M,QACpC+L,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACX,MAAO8O,QAuFPC,IAAKP,IAChC,kBAACnK,EAAA,EAAKsF,QAAQqF,SAAd,CAAuBzK,KAAK,WAA5B,oBAEJ,kBAACF,EAAA,EAAK4B,MAAN,CAAYC,UAAU,eAClB,kBAAC7B,EAAA,EAAKsF,QAAN,CAAcvG,GAAG,WAAW4C,MAAO8H,EAAW7N,QAAS4E,SAxF5C,SAACQ,GAChB,IAAIyJ,EAAiBzJ,EAAEU,cAAcC,MACrC+H,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACV,QAAS6O,QAsFyCG,KAAM,EAAGpJ,YAAY,aAEtG,kBAACxB,EAAA,EAAK4B,MAAN,CAAYC,UAAU,cAClB,kBAAC7B,EAAA,EAAKsF,QAAN,CAAcpF,KAAK,SAASyB,MAAO8H,EAAW5N,OAAQ2E,SAtF5C,SAACQ,GACf,IAAIyJ,EAAkBzJ,EAAEU,cAAcC,MACtC+H,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACT,OAAQ4O,QAoFwCjJ,YAAY,8BAE3F,kBAACxB,EAAA,EAAK4B,MAAN,CAAYC,UAAU,eAClB,kBAAC7B,EAAA,EAAKsF,QAAN,CAAcpF,KAAK,UAAUyB,MAAO8H,EAAW1N,eACnByE,SArFjB,SAACQ,GAChB,IAAIyJ,EAA6BI,OAAO9C,SAAS/G,EAAEU,cAAcC,OAC9DmJ,MAAML,KAASA,OAASjP,GAC3BkO,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACP,eAAgB0O,QAkFOjJ,YAAY,+BAElE,kBAACxB,EAAA,EAAK4B,MAAN,CAAYC,UAAU,mBAClB,kBAAC7B,EAAA,EAAKsF,QAAN,CAAcvG,GAAG,WAAW4C,MAAOoI,EAAea,KAAM,EAC5BpK,SAnFV,SAACQ,GAEvBgJ,EAAiBhJ,EAAEU,cAAcC,OACjC,IAAIoJ,EAAkB/J,EAAEU,cAAcC,MAAMqJ,MAAM,SAElD,GAAoB,IAAjBD,EAAMpN,OAEL+L,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACN,YAAa,YAGhD,CACI,IAAIA,EAAgC,GAChCiP,GAAU,EAEdF,EAAMlC,SAAQ,SAAAqC,GACV,GAAGA,EAAKvN,OAAO,EACf,CACI,IAAIwN,EAAkBD,EAAKF,MAAM,KAAK/O,KAAI,SAAAmP,GAAC,OAAEA,EAAE1N,UAC7B,IAAfyN,EAAMxN,QACW,IAAlBwN,EAAM,GAAGxN,QAAgC,IAAlBwN,EAAM,GAAGxN,QAAgC,IAAlBwN,EAAM,GAAGxN,QACvD,GAAGkN,OAAO9C,SAASoD,EAAM,MAAMA,EAAM,GAEnCF,GAAU,EAIVjP,EAAYsH,KAAK,CAACpI,KAAMiQ,EAAM,GAAIhQ,OAAQ0P,OAAO9C,SAASoD,EAAM,IAAK/P,KAAM+P,EAAM,SAK1FF,EAECnB,GAAwB,IAIxBA,GAAwB,GACxBJ,GAAc,SAAApN,GAAC,kCAASA,GAAM,CAACN,YAAaA,UA6CSwO,UAAWX,EACxCrI,YAAY,wCACxC,kBAACxB,EAAA,EAAKsF,QAAQqF,SAAd,CAAuBzK,KAAK,WAA5B,kBAAsD,IAAtD,OAA+D,IAA/D,IAAqE,IAArE,SAAgF,IAAhF,IAAsF,IAAtF,OAA+F,IAA/F,wBAIJ,kBAACmE,EAAA,EAAMQ,OAAP,KACA,kBAAChE,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,YAAYC,QAASgG,EAAM9C,SAAzD,SACA,kBAACpD,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,UAAUC,QAhDzB,WAEfgG,EAAM/B,OAAOvJ,EAAOmB,SAAS6M,KA8CgCrJ,SAAUuJ,GAAgBE,GAAvF,eACE,WACE,GAAG9C,EAAM3I,OACL,OAAQ,kBAACyC,EAAA,EAAD,CAAQX,KAAK,SAASY,QAAQ,UAAUC,QAASkJ,GAAjD,iBAFd,MC3IGoB,GAAb,WAEI,aAAe,yBASR5F,qBATO,OAUPgD,uBAVO,EACVpN,KAAKoK,gBAAkB,GACvBpK,KAAKoN,kBAAoB,GAJjC,oDAQQ,OAAOL,OAAOC,OAAOhN,UAR7B,KCIO,SAASiQ,GAAaxO,EAA0ByO,EAAoBC,GAEvE,IAAMC,EAAuBlP,KAAKgK,IAAI,EAAGiF,EAAS9D,UAAY6D,EAAa9F,gBAAgB9H,QAErF+N,EAAe,IAAIjI,IAAI3G,EAAYc,MAAM3B,KAAI,SAAAK,GAAC,OAAEA,EAAE4B,YAClDyN,EAAgB,IAAIlI,IAAIiI,GAC9BH,EAAa9F,gBAAgBoD,SAAQ,SAAAvM,GAAC,OAAEqP,EAAclL,OAAOnE,EAAE4B,YAI/D,IAFA,IAAM0N,EAA6B,GAE3B1P,EAAE,EAAGA,EAAEuP,EAAsBvP,IACrC,CACI,IAAI2P,EAAc/O,EAAY4G,OAAOhH,MAAMiE,KAAKgL,IAC5CG,EAAiBN,EAASxD,aAAa3K,OAAOkO,EAAa9F,gBAAiBmG,EAAkBC,GAElG,GAAGC,EAAenO,OAAS,EAC3B,CACI,IAAIoO,EAAczF,EAAajJ,OAAOkO,EAAa9F,gBAAiBmG,EAAkBE,GAAgB,GAEtGF,EAAiBtI,KAAKyI,GACtBJ,EAAclL,OAAOsL,EAAY7N,UAIzC,IAAM8N,EAAUT,EAAa1D,QAG7B,OAFAmE,EAAQvD,kBAAoBmD,EAErBI,E,aCJLC,I,MAAqC,SAAC,GAA2D,IAA1DC,EAAyD,EAAzDA,WAAYC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,eAE9E,OACI,kBAACC,EAAA,EAAD,CAAQC,GAAG,OAAOzL,QAAQ,QAC1B,kBAACwL,EAAA,EAAOE,MAAR,CAAcC,KAAK,SAAnB,UACA,kBAACH,EAAA,EAAOhF,OAAR,CAAeoF,gBAAc,qBAC7B,kBAACJ,EAAA,EAAO9E,SAAR,CAAiB9L,GAAG,oBAChB,kBAACiR,EAAA,EAAD,CAAK/N,UAAU,WACf,kBAACgO,EAAA,EAAD,CAAajR,MAAM,UAAUD,GAAG,2BAC9B,kBAACkR,EAAA,EAAY7M,KAAb,CAAkB0M,KAAK,IAAII,QAAQ,EAAO9L,QAASmL,GAAnD,mBACA,kBAACU,EAAA,EAAY7M,KAAb,CAAkB0M,KAAK,IAAII,QAAQ,EAAO9L,QAASqL,EAAYhM,UAAWiM,GAA1E,mBACA,kBAACO,EAAA,EAAYE,QAAb,MACA,kBAACF,EAAA,EAAY7M,KAAb,CAAkB0M,KAAK,IAAII,QAAQ,EAAO9L,QAASoL,GAAnD,2BA+OCY,G,kDAzNX,WAAYhG,GAAY,IAAD,uBACnB,cAAMA,IAoBViG,WAAa,SAACC,GAA4C,IAAtBC,EAAqB,wDACrD,EAAKC,UAAS,SAAAC,GAGV,IAAIC,EAAYD,EAAGf,kBAAoBa,GAAqC,IAAzBE,EAAGtQ,YAAY8G,SAE9D0J,EAAM,GACNC,EAAiBH,EAAGtQ,YAAYiG,OAAOkK,GAS3C,OAPGM,IAAmBH,EAAGtQ,cAErBwQ,EAAM,CAACxQ,YAAayQ,EACbhF,KAAM+C,GAAaiC,EAAgBH,EAAG7E,KAAM6E,EAAG3F,cAC/C4E,eAAgBgB,IAGpBC,MArCQ,EAyCvBE,WAAa,SAACpP,GACV,EAAK4O,WAAW,CAAC5O,IACjB,EAAKqP,qBA3Cc,EA8CvBC,aAAe,SAACC,GAAmC,IAAD,EAC1C7P,EAAG,UAAG6P,EAAGhJ,cAAN,aAAG,EAAWwB,OAErB,GAAiB,iBAAPrI,EAEN,IAEI,EAAKkP,WfmEd,SAA4B/H,GAC/B,IAAI2I,EAAOnL,KAAKoL,MAAM5I,GAEtB,GAAGvI,MAAMC,QAAQiR,GAGb,OADuBA,EACb3R,IAAIR,EAAOmB,UAGzB,GAAmB,kBAATgR,EACV,CACI,IAAItR,EAAoBsR,EAExB,GAAwB,qBAAdtR,EAAEwR,QACZ,CACI,GAAiB,IAAdxR,EAAEwR,QAED,MAAM,IAAIvS,MAAM,+BAGpB,GAAGmB,MAAMC,QAAQL,EAAE0G,SAEf,OAAO1G,EAAE0G,QAAQ/G,IAAIR,EAAOmB,WAKxC,MAAM,IAAIrB,MAAM,uBe9FYwS,CAAmBjQ,IAAM,GAE7C,MAAMkD,GAEF,EAAKmM,SAAS,CAACa,MAAOhN,EAAEiN,UAIhC,EAAKC,uBA7Dc,EAgEvBC,SAAW,SAAChK,GACR,IAAIiK,EAAS,IAAIC,WACjBD,EAAOE,OAAS,SAACX,GAAD,OAAQ,EAAKD,aAAaC,IAC1CS,EAAOG,WAAWpK,IAnEC,EAsEvBqK,qBAAuB,WACnB,Of6CyBxL,Ee7CD,EAAKyL,MAAM3R,YAAYc,Mf8C5C6E,KAAKC,UAAU,CAACoL,QAAS,EAAG9K,QAASA,IADzC,IAA0BA,GepHN,EA0EvB0L,UAAY,WACR,EAAKvB,SAAS,CAACd,gBAAgB,IAC/B,EAAKsC,uBA5Ec,EA+EvBC,mBAAqB,WACjB,EAAKzB,SAAS,CAACyB,oBAAoB,KAhFhB,EAmFvBC,mBAAqB,WACjB,EAAK1B,SAAS,CAAC0B,oBAAoB,KApFhB,EAuFvBC,iBAAmB,WACf,EAAK3B,SAAS,CAAC2B,kBAAkB,KAxFd,EA2FvBZ,oBAAsB,WAClB,EAAKf,SAAS,CAACyB,oBAAoB,KA5FhB,EA+FvBD,oBAAsB,WAClB,EAAKxB,SAAS,CAAC0B,oBAAoB,KAhGhB,EAmGvBpB,kBAAoB,WAChB,EAAKN,SAAS,CAAC2B,kBAAkB,EAAOC,kBAAcvT,KApGnC,EAuGvBwT,aAAe,WACX,EAAK7B,SAAS,CAACa,MAAO,QAxGH,EA2GvBiB,mBAAqB,SAACC,GAClB,EAAK/B,UAAS,SAAAC,GACV,MAAO,CAAC3F,aAAcyH,EACd3G,KAAM+C,GAAa8B,EAAGtQ,YAAasQ,EAAG7E,KAAM2G,QA9GrC,EAkHvBC,sBAAwB,SAACC,GACrB,EAAKjC,UAAS,SAAAC,GACV,IAAIpB,EAAgB5D,OAAOC,OAAO+E,EAAG7E,MAErC,OADAyD,EAAQvG,gBAAkB2J,EACnB,CAAC7G,KAAM+C,GAAa8B,EAAGtQ,YAAakP,EAASoB,EAAG3F,mBAtHxC,EA0HvB4H,WAAa,SAACjR,GACV,EAAK+O,SAAS,CAAC2B,kBAAkB,EAClBC,aAAc3Q,KA5HV,EA+HvB6L,aAAe,SAAC7L,GACZ,EAAK+O,UAAS,SAAAC,GAGV,OAFAA,EAAGtQ,YAAY2D,OAAOrC,EAAOF,SAEtB,CAACpB,YAAasQ,EAAGtQ,YAChByL,KAAM+C,GAAa8B,EAAGtQ,YAAasQ,EAAG7E,KAAM6E,EAAG3F,cAC/CqH,kBAAkB,EAClBC,kBAAcvT,EACd6Q,gBAAgB,OApI5B,IAAIvP,EAAc,IAAIgF,EAClB2F,EAAe,IAAIU,EAJJ,OAQnB,EAAKsG,MAAQ,CACT3R,YAAaA,EACb2K,aAAcA,EACdc,KAAM+C,GAAaxO,EAAa,IAAIuO,GAAQ5D,GAC5CmH,oBAAoB,EACpBC,oBAAoB,EACpBC,kBAAkB,EAClBC,kBAAcvT,EACdwS,MAAO,KACP3B,gBAAgB,GAjBD,E,qDA2Ib,IAAD,OACL,OACI,kBAACnN,EAAA,EAAD,CAAWoQ,OAAK,EAAC1Q,UAAU,OAEvB,kBAAC2Q,EAAA,EAAD,CAAOzO,QAAQ,SAASmD,QAAS5I,KAAK2T,aAAc1K,OAAQjJ,KAAKoT,MAAMT,MAAOwB,aAAW,GACpFnU,KAAKoT,MAAMT,OAGd,WACE,GAAG,EAAKS,MAAMpC,eACV,OAAO,kBAAC,KAAD,CAAcoD,eAAgB,iBAAM,4BAFjD,GAMA,WACE,GAAG,EAAKhB,MAAMG,mBACV,OAAQ,kBAAC,EAAD,CACI3K,QAAS,EAAKiK,oBACdvS,MAAM,oBACNqI,gBAAgB,eAChBE,OAAQ,EAAKiK,WAN/B,GAUA,WACE,GAAG,EAAKM,MAAMI,mBACV,OAAQ,kBAAC,EAAD,CACI5K,QAAS,EAAK0K,oBACdhT,MAAM,oBACNoJ,gBAAgB,eAChBE,KAAM,EAAKuJ,uBACXtO,KAAK,6BACLgF,gBAAgB,eAChBF,OAAQ,EAAK0J,YAT/B,GAaA,WACE,GAAG,EAAKD,MAAMK,iBACV,OAAQ,kBAAC,EAAD,CACI7K,QAAS,EAAKwJ,kBACdzI,OAAQ,EAAKwI,WACbtD,SAAU,EAAKD,aACf7L,OAAQ,EAAKqQ,MAAMM,eANrC,GAUF,kBAAC5P,EAAA,EAAD,KACI,kBAACT,EAAA,EAAD,KACI,kBAAC,GAAD,CAAMwN,WAAY7Q,KAAKuT,mBACjBzC,YAAa9Q,KAAKyT,iBAClB1C,WAAY/Q,KAAKwT,mBACjBxC,eAAgBhR,KAAKoT,MAAMpC,mBAGzC,kBAAClN,EAAA,EAAD,KACI,kBAACT,EAAA,EAAD,KACI,kBAAC,EAAD,CAAmB+I,aAAcpM,KAAKoT,MAAMhH,aACzBxK,SAAU5B,KAAK4T,uBAG1C,kBAAC9P,EAAA,EAAD,CAAKP,UAAU,QACX,kBAACF,EAAA,EAAD,CAAKgR,GAAG,KACJ,kBAAC,EAAD,CAAgB3S,gBAAiB1B,KAAKoT,MAAMlG,KAAK9C,gBACjC3I,YAAazB,KAAKoT,MAAM3R,YACxBE,cAAe3B,KAAKoT,MAAMhH,aAAaC,UACvCzK,SAAU5B,KAAK8T,sBACfjS,OAAQ7B,KAAKgU,cAEjC,kBAAC3Q,EAAA,EAAD,KACI,kBAAC,EAAD,CAAgB6J,KAAMlN,KAAKoT,MAAMlG,KAAMd,aAAcpM,KAAKoT,MAAMhH,sB,GAnNtEtK,IAAMwS,WCxDxBC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.647e3593.chunk.js","sourcesContent":["export interface IngredientJSON {\r\n    name: string,\r\n    amount: number,\r\n    unit: string\r\n}   \r\n \r\nexport interface RecipeJSON {\r\n    id: string,\r\n    title: string,\r\n    sourceUrl?:  string,\r\n    source?: string,\r\n    summary?: string,\r\n    readyInMinutes?: number,\r\n    ingredients: IngredientJSON[]\r\n}\r\n\r\ninterface RecipeFileJSON {\r\n    version: number,\r\n    recipes: RecipeJSON[]\r\n}\r\n\r\nexport class Ingredient {\r\n\r\n    private constructor(name: string, amount: number, unit: string)\r\n    {\r\n        this.name = name;\r\n        this.amount = amount;\r\n        this.unit = unit;\r\n    }\r\n\r\n    public getName(): string\r\n    {\r\n        return this.name;\r\n    }\r\n\r\n    public getAmount(): number\r\n    {\r\n        return this.amount;\r\n    }\r\n\r\n    public getUnit(): string\r\n    {\r\n        return this.unit;\r\n    }\r\n\r\n    public static fromJSON(o: IngredientJSON) : Ingredient\r\n    {\r\n        if(!o.name)\r\n        {\r\n            throw new Error(\"Missing ingredient name\");\r\n        }\r\n\r\n        if(!o.unit)\r\n        {\r\n            throw new Error(\"Missing ingredient unit\");\r\n        }\r\n\r\n        if(o.amount === undefined)\r\n        {\r\n            throw new Error(\"Missing ingredient amount\");\r\n        }\r\n\r\n        return new Ingredient(o.name, o.amount, o.unit);\r\n    }\r\n\r\n    public toJSON() : IngredientJSON\r\n    {\r\n        return {\r\n            name: this.name,\r\n            amount: this.amount,\r\n            unit: this.unit\r\n        }\r\n    }\r\n\r\n    private name: string; \r\n    private amount: number;\r\n    private unit: string;\r\n}\r\n\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  }\r\n\r\nexport class Recipe {\r\n    \r\n    private constructor(id: string, title: string)\r\n    {\r\n        this.id = id;\r\n        this.title = title;\r\n        this.ingredients = [];\r\n    }\r\n\r\n    public getId(): string\r\n    {\r\n        return this.id;\r\n    }\r\n\r\n    public getTitle(): string\r\n    {\r\n        return this.title;\r\n    }\r\n\r\n    public getSummary(): string | undefined\r\n    {\r\n        return this.summary;\r\n    }\r\n\r\n    public getSource(): string | undefined\r\n    {\r\n        return this.source;\r\n    }\r\n\r\n    public getSourceUrl(): string | undefined\r\n    {\r\n        return this.sourceUrl;\r\n    }\r\n\r\n    public getReadyInMinutes(): number | undefined\r\n    {\r\n        return this.readyInMinutes;\r\n    }\r\n\r\n    public getIngredients(): Ingredient[] \r\n    {\r\n        return this.ingredients;\r\n    }\r\n\r\n    public static fromJSON(o: RecipeJSON) : Recipe\r\n    {\r\n        if(!o.id)\r\n        {\r\n            o.id = uuidv4();\r\n        }\r\n\r\n        if(!o.title)\r\n        {\r\n            throw new Error(\"Missing recipe title\");\r\n        }\r\n\r\n        let r = new Recipe(o.id, o.title);\r\n\r\n        r.summary = o.summary;\r\n        r.source = o.source;\r\n        r.sourceUrl = o.sourceUrl;\r\n        r.readyInMinutes = o.readyInMinutes;\r\n\r\n        if(Array.isArray(o.ingredients))\r\n        {\r\n            r.ingredients = o.ingredients.map(i => Ingredient.fromJSON(i));\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    public toJSON() : RecipeJSON\r\n    {\r\n        return {\r\n            id: this.id,\r\n            title: this.title,\r\n            summary: this.summary,\r\n            source: this.source,\r\n            sourceUrl: this.sourceUrl,\r\n            readyInMinutes: this.readyInMinutes,\r\n            ingredients: this.ingredients.map(i=>i.toJSON())\r\n        }\r\n    }\r\n\r\n    private id: string;\r\n    private title: string;\r\n    private summary?: string;\r\n    private source?: string;\r\n    private sourceUrl?: string;\r\n    private readyInMinutes?: number;\r\n    private ingredients: Ingredient[];\r\n}\r\n\r\nexport function serializeRecipes(recipes: Recipe[]) {\r\n    return JSON.stringify({version: 1, recipes: recipes});\r\n}\r\n\r\nexport function deserializeRecipes(data: string) {\r\n    let json = JSON.parse(data);\r\n\r\n    if(Array.isArray(json))\r\n    {\r\n        let v0: RecipeJSON[] = json;\r\n        return v0.map(Recipe.fromJSON);\r\n    }\r\n\r\n    if(typeof json === 'object')\r\n    {\r\n        let r: RecipeFileJSON = json;\r\n        \r\n        if(typeof r.version !== 'undefined')\r\n        {\r\n            if(r.version !== 1)\r\n            {\r\n                throw new Error(\"Invalid recipe file version\");\r\n            }\r\n    \r\n            if(Array.isArray(r.recipes))\r\n            {\r\n                return r.recipes.map(Recipe.fromJSON);\r\n            }    \r\n        }\r\n    }\r\n\r\n    throw new Error(\"Invalid recipe file\");\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Form, ListGroup, FormControl, InputGroup} from 'react-bootstrap';\r\nimport {Container, OverlayTrigger, Popover, Col, Row, Image} from 'react-bootstrap';\r\nimport {Button} from 'react-bootstrap';\r\n\r\nimport {Recipe} from '../model/Recipe';\r\nimport {RecipeIndex} from '../RecipeDB';\r\n\r\ntype RecipeSelectorProps = {\r\n    recipeIndex: RecipeIndex,\r\n    selectedRecipes: Recipe[],\r\n    maxNrSelected: number,\r\n    onUpdate: (recipes: Recipe[]) => void,\r\n    onEdit: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeSelector: FunctionComponent<RecipeSelectorProps> = ({recipeIndex, selectedRecipes, maxNrSelected, onUpdate, onEdit}) => {\r\n\r\n    const [filter, setFilter] = React.useState(\"\");\r\n    const [currentRecipeid, setCurrentRecipeId] = React.useState<string | null>(null);\r\n\r\n    const refresh = (event : React.ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(event.currentTarget.value);\r\n    }\r\n\r\n    const filteredRecipes = (filter.trim().length === 0) ? \r\n        recipeIndex.all() : recipeIndex.search(filter).map(res=>res.key);\r\n\r\n    const selectedRecipeMap = new Map(selectedRecipes.map(r => [r.getId(), r]))\r\n\r\n    const toggleSelection = (r: Recipe) => {\r\n        if(selectedRecipeMap.has(r.getId()))\r\n        {\r\n            selectedRecipeMap.delete(r.getId());\r\n        }\r\n        else\r\n        {\r\n            selectedRecipeMap.set(r.getId(), r);\r\n        }\r\n\r\n        onUpdate(Array.from(selectedRecipeMap.values()));\r\n    }\r\n\r\n    const renderRecipe = (recipe: Recipe) => {\r\n\r\n        const summary = recipe.getSummary() ? recipe.getSummary() : \"Summary is not available\"\r\n        const ingredients = recipe.getIngredients().map(r=> r.getName())\r\n                                              .sort()\r\n                                              .map(n => <Col sm=\"auto\" className=\"border mt-1 ml-2 pt-2 pb-2\">{n}</Col>)\r\n\r\n        return (\r\n            <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h4\">{recipe.getTitle()}</Popover.Title>\r\n                <Popover.Content>\r\n                <Container className=\"pl-0 pr-0\">\r\n                <Row className=\"pb-2\">\r\n                    <Col>{summary}</Col>\r\n                </Row>\r\n                <Row className=\"pb-2\">\r\n                    <Col sm=\"auto\"><Image src=\"clock20x20.jpg\"/></Col>\r\n                    <Col sm=\"auto\">{recipe.getReadyInMinutes() ? \"\" + recipe.getReadyInMinutes() + \" mintes\" : \"unknown\"}</Col>\r\n                    <Col sm=\"auto\"><Image src=\"babyowl17x20.jpg\"/></Col>\r\n                    <Col sm=\"auto\">{recipe.getSource() ? recipe.getSource() : \"-\"}</Col>\r\n                </Row>\r\n                <Row>\r\n                        {ingredients}\r\n                </Row>\r\n                </Container> \r\n                </Popover.Content>\r\n            </Popover>)\r\n    }\r\n\r\n    const editButton = (recipe: Recipe) => {\r\n        if(currentRecipeid===recipe.getId())\r\n        {\r\n            return <Button variant=\"outline-primary\" size=\"sm\" className=\"mt-2\" onClick={e=>onEdit(recipe)}>Edit</Button>\r\n        }\r\n        else\r\n        {\r\n            return \"\"\r\n        }\r\n    }\r\n\r\n    const listItems = filteredRecipes\r\n        .map((recipe) =>\r\n                <OverlayTrigger placement=\"right\" overlay={renderRecipe(recipe)} \r\n                                    onEnter={()=>setCurrentRecipeId(recipe.getId())}\r\n                                    onExit={()=>setCurrentRecipeId(null)}>\r\n                    <ListGroup.Item key={recipe.getId()}>\r\n                        <Form.Check type=\"checkbox\" \r\n                                    id={recipe.getId()}\r\n                                    label={recipe.getTitle()}\r\n                                    disabled={!selectedRecipeMap.has(recipe.getId()) && selectedRecipeMap.size >= maxNrSelected}\r\n                                    checked={selectedRecipeMap.has(recipe.getId())}\r\n                                    onChange={() => toggleSelection(recipe)}/>\r\n                        {editButton(recipe)}\r\n                    </ListGroup.Item>\r\n                </OverlayTrigger>\r\n            );\r\n\r\n    return (\r\n        <Form className=\"pt-2\" onSubmit={(e)=>e.preventDefault()}>\r\n        <InputGroup className=\"mb-2\">\r\n        <InputGroup.Prepend>\r\n        <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n        </InputGroup.Prepend>\r\n        <FormControl type=\"text\" placeholder=\"Filter recipes\" onChange={refresh}/>\r\n        </InputGroup>\r\n        <Form.Group controlId=\"recipeGroup\">\r\n            <ListGroup>{listItems}</ListGroup>\r\n        </Form.Group>\r\n        </Form>\r\n    );\r\n}","import { Index, createIndex, addDocumentToIndex, removeDocumentFromIndex } from 'ndx';\r\nimport { query, QueryResult } from 'ndx-query';\r\nimport { words } from 'lodash';\r\n\r\nimport { Recipe } from './model/Recipe';\r\n\r\nimport { Map } from 'immutable';\r\n\r\nexport class RecipeIndex {\r\n\r\n    private readonly recipesMap: Map<string, Recipe>;\r\n    private readonly index: Index<string>;\r\n\r\n    private readonly fieldAccessors = [\r\n        (r: Recipe) => r.getTitle(),\r\n        (r: Recipe) => r.getSummary() ?? \"\",\r\n        (r: Recipe) => r.getIngredients().map(i => i.getName()).join(\" \")\r\n    ]\r\n\r\n    private readonly fieldBoostFactors = [2, 0.5, 1];\r\n\r\n    constructor(index?: Index<string>, recipesMap?: Map<string, Recipe>) {\r\n        this.index = index ? index : createIndex<string>(3);\r\n        this.recipesMap = recipesMap ? recipesMap : Map({}); \r\n    }\r\n\r\n    private termFilter = (term: string) => {\r\n        return term.toLowerCase();\r\n    }\r\n\r\n    public static new = () => {\r\n        return new RecipeIndex();\r\n    }\r\n\r\n    // `add()` function will add documents to the index.\r\n    public add = (r: Recipe) => {\r\n        let key = r.getId();\r\n\r\n        let toUpdate = true;\r\n\r\n        if(this.recipesMap.has(key))\r\n        {\r\n            if(JSON.stringify(this.recipesMap.get(key)) === JSON.stringify(r))\r\n            {\r\n                toUpdate = false;\r\n            }\r\n        }\r\n\r\n        if(toUpdate)\r\n        {\r\n            // Don't add the same document twice, ndx becomes crazy...\r\n            this.delete(key);\r\n            let newMap = this.recipesMap.set(key, r);\r\n\r\n            addDocumentToIndex(\r\n                this.index,\r\n                this.fieldAccessors,\r\n                // Tokenizer is a function that breaks text into words, phrases, symbols, or other meaningful elements\r\n                // called tokens.\r\n                // Lodash function `words()` splits string into an array of its words, see https://lodash.com/docs/#words for\r\n                // details.\r\n                words,\r\n                // Filter is a function that processes tokens and returns terms, terms are used in Inverted Index to\r\n                // index documents.\r\n                this.termFilter,\r\n                // Document key, it can be a unique document id or a reference to a document if you want to store all documents\r\n                // in memory.\r\n                key,\r\n                // Document.\r\n                r,\r\n            );\r\n\r\n            return new RecipeIndex(this.index, newMap);\r\n        }\r\n        else\r\n        {\r\n            return this;\r\n        }\r\n    };\r\n\r\n    public addAll = (recipes: Recipe[]) => {\r\n        return recipes.reduce((idx: RecipeIndex, recipe: Recipe) => {\r\n            return idx.add(recipe);\r\n        }, this);\r\n    };\r\n\r\n    // `search()` function will be used to perform queries.\r\n    public search = (q: string) => query<string>(\r\n          this.index,\r\n          this.fieldBoostFactors,\r\n          // BM25 ranking function constants:\r\n          1.2,  // BM25 k1 constant, controls non-linear term frequency normalization (saturation).\r\n          0.75, // BM25 b constant, controls to what degree document length normalizes tf values.\r\n          words,\r\n          this.termFilter,\r\n          // Set of removed documents, in this example we don't want to support removing documents from the index,\r\n          // so we can ignore it by specifying this set as `undefined` value.\r\n          undefined, \r\n          q,\r\n        ).reduce((acc: QueryResult<Recipe>[],res) => {\r\n            let r = this.recipesMap.get(res.key);\r\n            if(r)\r\n            {\r\n                acc.push({key: r, score: res.score});\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n    public all = () => {\r\n        return Array.from(this.recipesMap.values());\r\n    };\r\n\r\n    public get = (key: string) => {\r\n        return this.recipesMap.get(key);\r\n    };\r\n\r\n    public delete = (key: string) => {\r\n        if(this.recipesMap.has(key))\r\n        {\r\n            let newMap = this.recipesMap.delete(key);\r\n            removeDocumentFromIndex(\r\n                this.index,\r\n                new Set(),\r\n                key);    \r\n            return new RecipeIndex(this.index, newMap);    \r\n        }\r\n        else\r\n        {\r\n            return this;\r\n        }\r\n    };\r\n\r\n    public getAll = (keys: string[]) => {\r\n        return keys.reduce((acc: Recipe[],key) => {\r\n            let r = this.recipesMap.get(key);\r\n            if(r)\r\n            {\r\n                acc.push(r);\r\n            }\r\n            return acc;\r\n        }, []);\r\n    };\r\n\r\n    public count = () => {\r\n        return this.recipesMap.size;\r\n    }\r\n};\r\n    \r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\ntype LoadFileDialogProps = {\r\n    title: string,\r\n    loadButtonTitle: string,\r\n    onClose: () => void,\r\n    onLoad: (file: File) => void\r\n}\r\n\r\nexport const LoadFileDialog: FunctionComponent<LoadFileDialogProps> = ({title, loadButtonTitle, onClose, onLoad}) => {\r\n\r\n    const [file, setFile] = React.useState<null | File>(null);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <FormControl type=\"file\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                                if(e.target.files)\r\n                                                {\r\n                                                    setFile(e.target.files[0])\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    setFile(null)\r\n                                                }\r\n                                            }}/>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!file} \r\n                        onClick={() => {if(file) onLoad(file)}}>{loadButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport download from 'downloadjs'\r\n\r\ntype SaveFileDialogProps = {\r\n    title: string,\r\n    saveButtonTitle: string,\r\n    data: string,\r\n    type: string,\r\n    initialFileName: string,\r\n    onClose: () => void,\r\n    onSave: () => void\r\n}\r\n\r\nexport const SaveFileDialog: FunctionComponent<SaveFileDialogProps> = ({title, saveButtonTitle, onClose, onSave, data, type, initialFileName }) => {\r\n\r\n    const [fileName, setFileName] = React.useState(initialFileName);\r\n\r\n    const startDownload = () => {\r\n        download(data, fileName, type)\r\n    }\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicFileName\">\r\n        <Form.Label>File name</Form.Label>\r\n        <Form.Control type=\"fileName\" value={fileName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFileName(e.target.value)}/>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!fileName || fileName.length===0} \r\n                        onClick={() => {startDownload(); onSave()}}>{saveButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getRandomInt(max: number) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport class RandomFilter implements Filter {\r\n    public name = \"Random filter\";\r\n    public id =\"rnd\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n        if(remainingRecipes.length === 0)\r\n        {\r\n            return []\r\n        }\r\n        else\r\n        {\r\n            return [remainingRecipes[getRandomInt(remainingRecipes.length)]];\r\n        }\r\n    }\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n    \r\n    return recipe.getIngredients().reduce((sum, i) => {\r\n        if(ingredientsAlreadyUSed.has(i.getName()))\r\n        {\r\n            return sum;\r\n        }\r\n        else\r\n        {\r\n            return sum+1;\r\n        }\r\n    }, 0);\r\n}\r\n\r\nexport class MinIngredientsFilter implements Filter {\r\n    public name = \"Minimal number of ingredients\";\r\n    public id =\"miningredients\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n\r\n        const ingredientsAlreadyUsed = new Set<string>(\r\n            explicitRecipes.concat(selectedRecipes).flatMap(r => r.getIngredients().map(i => i.getName())));\r\n\r\n        const scoredRecipes = remainingRecipes\r\n            .map(r => ({recipe: r, score: getScore(ingredientsAlreadyUsed, r)}))\r\n            .sort((a,b) => {\r\n                if(a.score < b.score)\r\n                {\r\n                    return -1;\r\n                }\r\n                else if(a.score > b.score)\r\n                {\r\n                    return 1;\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n        const result: Recipe[] = [];\r\n\r\n        if(scoredRecipes.length>0)\r\n        {\r\n            for(let scoredRecipe of scoredRecipes)\r\n            {\r\n                if(scoredRecipes[0].score === scoredRecipe.score)\r\n                {\r\n                    result.push(scoredRecipe.recipe);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        \r\n        return result;\r\n    }\r\n}","import {Filter} from './Filter';\r\nimport {Recipe} from '../model/Recipe';\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n    \r\n    return recipe.getIngredients().reduce((sum, i) => {\r\n        if(ingredientsAlreadyUSed.has(i.getName()))\r\n        {\r\n            return sum+1;\r\n        }\r\n        else\r\n        {\r\n            return sum;\r\n        }\r\n    }, 0);\r\n}\r\n\r\nexport class MaxReuseFilter implements Filter {\r\n    public name = \"Maximal reuse of ingredients\";\r\n    public id =\"maxreuse\";\r\n    public filter = (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => {\r\n\r\n        const ingredientsAlreadyUsed = new Set<string>(\r\n            explicitRecipes.concat(selectedRecipes).flatMap(r => r.getIngredients().map(i => i.getName())));\r\n\r\n        const scoredRecipes = remainingRecipes\r\n            .map(r => ({recipe: r, score: getScore(ingredientsAlreadyUsed, r)}))\r\n            .sort((a,b) => {\r\n                if(a.score < b.score)\r\n                {\r\n                    return 1;\r\n                }\r\n                else if(a.score > b.score)\r\n                {\r\n                    return -1;\r\n                }\r\n                else\r\n                {\r\n                    return 0;\r\n                }\r\n            });\r\n\r\n        const result: Recipe[] = [];\r\n\r\n        if(scoredRecipes.length>0)\r\n        {\r\n            for(let scoredRecipe of scoredRecipes)\r\n            {\r\n                if(scoredRecipes[0].score === scoredRecipe.score)\r\n                {\r\n                    result.push(scoredRecipe.recipe);\r\n                }\r\n                else\r\n                {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}","import {Recipe} from '../model/Recipe';\r\n\r\nimport { RandomFilter } from './RandomFilter';\r\nimport { MinIngredientsFilter } from './MinIngredientsFilter';\r\nimport { MaxReuseFilter } from './MaxReuseFilter';\r\n\r\nexport const randomFilter = new RandomFilter();\r\n\r\nexport interface Filter {\r\n    id: string,\r\n    name: string,\r\n    filter: (explicitRecipes: Recipe[], selectedRecipes: Recipe[], remainingRecipes: Recipe[]) => Recipe[]\r\n}\r\n\r\nexport type Filters = {\r\n    all: () => Filter[],\r\n    get: (id: string) => Filter | undefined \r\n}\r\n\r\nfunction createFilters() {\r\n\r\n    const filters = [new MinIngredientsFilter(), new MaxReuseFilter(), randomFilter];\r\n    const filterMap = new Map<string,Filter>(filters.map(f => [f.id, f])); \r\n\r\n    return {\r\n        all: () => filters,\r\n        get: (id: string) => filterMap.get(id)\r\n    }\r\n}\r\n\r\nexport const filters: Filters = createFilters();\r\n","import {Filter, filters} from '../filters/Filter';\r\n\r\nexport enum Optimization {\r\n    MinimalNrIngrediants = 1,\r\n    MaximalResueOfIngredients\r\n  }\r\n\r\nexport class PlanSettings {\r\n\r\n    constructor() {\r\n        this.nrRecipes = 5;\r\n        this.optimization = filters.all()[0];\r\n     }\r\n\r\n    public clone() : PlanSettings {\r\n        return Object.create(this);\r\n    }\r\n\r\n    public nrRecipes: number\r\n    public optimization: Filter\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Accordion, Card} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport {PlanSettings} from '../model/PlanSettings';\r\nimport {filters} from '../filters/Filter';\r\n\r\ntype PlanSettingsPanelProps = {\r\n    planSettings: PlanSettings,\r\n    onUpdate: (planSettings: PlanSettings) => void\r\n}\r\n\r\nexport const PlanSettingsPanel: FunctionComponent<PlanSettingsPanelProps> = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n\r\n    const changeNrRecipes = (newNrRecipes: number) => {\r\n        let newSettings = props.planSettings.clone();\r\n        newSettings.nrRecipes = newNrRecipes;\r\n        props.onUpdate(newSettings);\r\n    }\r\n\r\n    const changeOptimization = (filterId: string) => {\r\n        let filter = filters.get(filterId);\r\n        if(filter)\r\n        {\r\n            let newSettings = props.planSettings.clone();\r\n            newSettings.optimization = filter;\r\n            props.onUpdate(newSettings);    \r\n        }\r\n    }\r\n\r\n    const filterList = filters.all().map(f => \r\n        <option value={f.id}>{f.name}</option>\r\n    )\r\n\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" onClick={() => setCollapsed(!collapsed)}>\r\n                Plan settings {collapsed ? \"[+]\" : \"[-]\"}\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n                <Form onSubmit={(e)=>e.preventDefault()}>\r\n                <Form.Group controlId=\"nrRecipes\">\r\n                    <Form.Label>Number of recipes:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.nrRecipes} \r\n                                  onChange={(e)=>changeNrRecipes(parseInt(e.target.value))}>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                    <option>6</option>\r\n                    <option>7</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"optimization\">\r\n                    <Form.Label>Optimize by:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.optimization.id} \r\n                                  onChange={(e)=>changeOptimization(e.target.value)}>\r\n                    {filterList}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion>\r\n    );    \r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Container, Table} from 'react-bootstrap';\r\n\r\nimport {Plan} from \"../model/Plan\";\r\nimport {PlanSettings} from \"../model/PlanSettings\";\r\n\r\ntype PlanVisualizerProps = {\r\n    plan: Plan,\r\n    planSettings: PlanSettings\r\n}\r\n\r\nexport const PlanVisualizer: FunctionComponent<PlanVisualizerProps> = ({plan}) => {\r\n\r\n    const allRecipes = plan.explicitRecipes.concat(plan.calculatedRecipes)\r\n\r\n    if(allRecipes.length === 0)\r\n    {\r\n        return (\r\n            <Container className=\"pt-2\">\r\n                No recipes are planned\r\n            </Container>\r\n        ) \r\n    }\r\n\r\n    const explicitRecipeHeaderList = plan.explicitRecipes.map(r => \r\n        <th>{r.getTitle()}</th>)\r\n\r\n    const calculatedRecipeHeaderList = plan.calculatedRecipes.map(r => \r\n        <th className=\"bg-light\">{r.getTitle()}</th>)\r\n\r\n    let ingredientMap = new Map<string, Record<number, string>>();\r\n\r\n    let idx = 0;\r\n    allRecipes.forEach(r => {\r\n        \r\n        r.getIngredients().forEach(i => {\r\n              let oneIngredientRecord = ingredientMap.get(i.getName());\r\n              if(!oneIngredientRecord)\r\n              {\r\n                oneIngredientRecord = {}\r\n                ingredientMap.set(i.getName(), oneIngredientRecord);\r\n              }\r\n              \r\n              oneIngredientRecord[idx] = \"\" + i.getAmount() + \" \" + i.getUnit();\r\n        });\r\n\r\n        idx++;\r\n    });\r\n\r\n    const ingredientLineList = Array.from(ingredientMap.keys()).sort().map(name => {\r\n        \r\n        const idxs: number[] = Array.from({length: allRecipes.length}, (x, i) => i);\r\n\r\n        const perRecipe = idxs.map(idx => {\r\n            var entry = ingredientMap.get(name);\r\n            if(entry && entry[idx])\r\n            {\r\n                return <td>{entry[idx]}</td>;\r\n            }\r\n            else\r\n            {\r\n                return <td>&nbsp;</td>;\r\n            }\r\n        });\r\n\r\n        return (<tr>\r\n                    <th>{name}</th>\r\n                    {perRecipe}\r\n                </tr>);\r\n    });\r\n\r\n\r\n    return (\r\n        <Container className=\"pt-2\">\r\n        <Table striped bordered size=\"sm\">\r\n            <thead>\r\n                <tr>\r\n                <th></th>\r\n                {explicitRecipeHeaderList}\r\n                {calculatedRecipeHeaderList}\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n            {ingredientLineList}\r\n            </tbody>\r\n        </Table>\r\n        </Container>\r\n    );\r\n\r\n}","import React, {FunctionComponent, ChangeEvent} from 'react';\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport {RecipeJSON, IngredientJSON, Recipe, Ingredient} from '../model/Recipe';\r\n\r\ntype RecipeEditorProps = {\r\n    recipe?: Recipe,\r\n    onClose: () => void,\r\n    onSave: (recipe: Recipe) => void,\r\n    onDelete: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeEditor: FunctionComponent<RecipeEditorProps> = (props) => {\r\n\r\n    const [recipeJSON, setRecipeJSON] = React.useState<RecipeJSON>(\r\n                            props.recipe?props.recipe.toJSON():Object.create({}));\r\n    const [isTitleInvalid, setIsTitleInvalid] = React.useState(!props.recipe);\r\n    const [isIngredientsInvalid, setIsIngredientsInvalid] = React.useState(false);\r\n\r\n    const generateIngredientCSV = (ingredients: Ingredient[]) =>\r\n    {\r\n        return ingredients.map(i=>i.getName() + \";\" + i.getAmount() + \";\" + i.getUnit()).join(\"\\n\")\r\n    }\r\n\r\n    const [ingredientCSV, setIngredientCSV] = React.useState(props.recipe ? \r\n                            generateIngredientCSV(props.recipe.getIngredients()):\"\");\r\n\r\n    const setTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal = e.currentTarget.value;\r\n        setIsTitleInvalid(!newVal || newVal.length === 0);\r\n        setRecipeJSON(r => ({...r, ...{title: newVal}}))\r\n    }\r\n\r\n    const setSummary = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({...r, ...{summary: newVal}}))\r\n    }\r\n\r\n    const setSource = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string =  e.currentTarget.value;\r\n        setRecipeJSON(r => ({...r, ...{source: newVal}}))\r\n    }\r\n\r\n    const setMinutes = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: number | undefined = Number.parseInt(e.currentTarget.value)\r\n        if(isNaN(newVal)) newVal = undefined\r\n        setRecipeJSON(r => ({...r, ...{readyInMinutes: newVal}}))\r\n    }\r\n\r\n    const updateIngredients = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n        setIngredientCSV(e.currentTarget.value);\r\n        let lines: string[] = e.currentTarget.value.split(/\\r?\\n/);\r\n\r\n        if(lines.length === 0)\r\n        {\r\n            setRecipeJSON(r => ({...r, ...{ingredients: []}}))\r\n        }\r\n        else\r\n        {\r\n            let ingredients: IngredientJSON[] = [];\r\n            let invalid = false;\r\n\r\n            lines.forEach(line => {\r\n                if(line.length>0)\r\n                {\r\n                    let parts: string[] = line.split(';').map(s=>s.trim());\r\n                    if(parts.length!==3 ||\r\n                      parts[0].length===0 || parts[1].length===0 || parts[2].length===0 ||\r\n                      \"\"+Number.parseInt(parts[1])!==parts[1])\r\n                    {\r\n                        invalid = true;\r\n                    }\r\n                    else\r\n                    {\r\n                        ingredients.push({name: parts[0], amount: Number.parseInt(parts[1]), unit: parts[2]});\r\n                    }\r\n                }\r\n            });\r\n\r\n            if(invalid)\r\n            {\r\n                setIsIngredientsInvalid(true);\r\n            }\r\n            else\r\n            {\r\n                setIsIngredientsInvalid(false);\r\n                setRecipeJSON(r => ({...r, ...{ingredients: ingredients}}))\r\n            }\r\n        }\r\n    }\r\n\r\n    const saveRecipe = () =>\r\n    {\r\n        props.onSave(Recipe.fromJSON(recipeJSON))\r\n    }\r\n\r\n    const deleteRecipe = () =>\r\n    {\r\n        if(props.recipe)\r\n        {\r\n            props.onDelete(props.recipe)\r\n        }\r\n    }\r\n\r\n    const focusElement = React.createRef<HTMLInputElement>();\r\n\r\n    return (\r\n        <Modal show={true} onHide={props.onClose} onEntered={() => {if(focusElement.current) focusElement.current.focus()}}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>Add new recipe</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formTitle\">\r\n            <Form.Control type=\"title\" value={recipeJSON.title} placeholder=\"Title\" \r\n                                       isInvalid={isTitleInvalid} onChange={setTitle}\r\n                                       ref={focusElement}/>\r\n            <Form.Control.Feedback type=\"invalid\">Required field!</Form.Control.Feedback>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formSummary\">\r\n            <Form.Control as=\"textarea\" value={recipeJSON.summary} onChange={setSummary} rows={4} placeholder=\"Summary\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formSource\">\r\n            <Form.Control type=\"source\" value={recipeJSON.source} onChange={setSource} placeholder=\"Where to find the recipe\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formMinutes\">\r\n            <Form.Control type=\"minutes\" value={recipeJSON.readyInMinutes} \r\n                                        onChange={setMinutes} placeholder=\"Number of minutes to cook\"/>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formIngredients\">\r\n            <Form.Control as=\"textarea\" value={ingredientCSV} rows={8} \r\n                                        onChange={updateIngredients} isInvalid={isIngredientsInvalid}\r\n                                        placeholder=\"Ingredients: <name>;<amount>;<unit>\" />\r\n            <Form.Control.Feedback type=\"invalid\">Format must be {\"<\"}name{\">\"};{\"<\"}amount{\">\"};{\"<\"}unit{\">\"} for every line!\"</Form.Control.Feedback>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n        <Button type=\"button\" variant=\"secondary\" onClick={props.onClose}>Close</Button>\r\n        <Button type=\"button\" variant=\"primary\" onClick={saveRecipe} disabled={isTitleInvalid||isIngredientsInvalid}>Save recipe</Button>\r\n        {(() => {\r\n            if(props.recipe) {\r\n                return (<Button type=\"button\" variant=\"primary\" onClick={deleteRecipe}>Delete recipe</Button>)\r\n            }\r\n        })()}\r\n        </Modal.Footer>\r\n        </Modal>)\r\n}","import {Recipe} from './Recipe';\r\n\r\nexport class Plan {\r\n\r\n    constructor() {\r\n        this.explicitRecipes = [];\r\n        this.calculatedRecipes = [];\r\n    }\r\n\r\n    public clone() : Plan {\r\n        return Object.create(this);\r\n    }\r\n\r\n    public explicitRecipes: Recipe[];\r\n    public calculatedRecipes: Recipe[];\r\n}","import {Plan} from './model/Plan';\r\nimport {PlanSettings} from './model/PlanSettings';\r\nimport {Recipe} from './model/Recipe';\r\nimport {RecipeIndex} from './RecipeDB';\r\nimport {randomFilter} from './filters/Filter';\r\n\r\nexport function optimizePlan(recipeIndex: RecipeIndex, previousPlan: Plan, settings: PlanSettings) {\r\n\r\n    const nrRecipesToCalculate = Math.max(0, settings.nrRecipes - previousPlan.explicitRecipes.length);\r\n\r\n    const allRecipeIds = new Set(recipeIndex.all().map(r=>r.getId())); \r\n    const freeRecipeIds = new Set(allRecipeIds);\r\n    previousPlan.explicitRecipes.forEach(r=>freeRecipeIds.delete(r.getId()));\r\n\r\n    const calcultedRecipes: Recipe[] = [];\r\n\r\n    for(let i=0; i<nrRecipesToCalculate; i++)\r\n    {\r\n        let freeRecipes = recipeIndex.getAll(Array.from(freeRecipeIds));\r\n        let currentRecipes = settings.optimization.filter(previousPlan.explicitRecipes, calcultedRecipes, freeRecipes);\r\n\r\n        if(currentRecipes.length > 0)\r\n        {\r\n            var finalRecipe = randomFilter.filter(previousPlan.explicitRecipes, calcultedRecipes, currentRecipes)[0];\r\n\r\n            calcultedRecipes.push(finalRecipe);\r\n            freeRecipeIds.delete(finalRecipe.getId());\r\n        }\r\n    }\r\n\r\n    const newPlan = previousPlan.clone();\r\n    newPlan.calculatedRecipes = calcultedRecipes;\r\n\r\n    return newPlan;\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Navbar, Nav, NavDropdown} from 'react-bootstrap';\r\nimport {Container, Row, Col} from 'react-bootstrap';\r\nimport {Alert} from 'react-bootstrap';\r\n\r\nimport {Recipe, serializeRecipes, deserializeRecipes} from './model/Recipe';\r\nimport {RecipeSelector} from './components/RecipeSelector';\r\nimport {RecipeIndex} from './RecipeDB';\r\nimport {LoadFileDialog} from './components/LoadFileDialog';\r\nimport {SaveFileDialog} from './components/SaveFileDialog';\r\nimport {PlanSettingsPanel} from './components/PlanSettings';\r\nimport {PlanSettings} from './model/PlanSettings';\r\nimport {PlanVisualizer} from './components/PlanVisualizer';\r\nimport {RecipeEditor} from './components/RecipeEditor';\r\nimport {Plan} from './model/Plan';\r\nimport {optimizePlan} from './Planner';\r\n\r\nimport {Beforeunload} from 'react-beforeunload';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n    \r\ntype MenuProps = {\r\n    onLoadFile: () => void,\r\n    onNewRecipe: () => void,\r\n    onSaveFile: () => void,\r\n    unsavedChanges: boolean\r\n}\r\n\r\nconst Menu: FunctionComponent<MenuProps> = ({onLoadFile, onNewRecipe, onSaveFile, unsavedChanges}) => {\r\n\r\n    return (\r\n        <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Navbar.Brand href=\"#home\">Mealee</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav className=\"mr-auto\">\r\n            <NavDropdown title=\"Recipes\" id=\"collasible-nav-dropdown\">\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onLoadFile}>Load recipes...</NavDropdown.Item>\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onSaveFile} disabled={!unsavedChanges}>Save recipes...</NavDropdown.Item>\r\n              <NavDropdown.Divider />\r\n              <NavDropdown.Item href=\"#\" active={false} onClick={onNewRecipe}>Add new recipe...</NavDropdown.Item>\r\n            </NavDropdown>\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n        </Navbar>\r\n    );    \r\n}\r\n\r\ntype AppState = {\r\n    recipeIndex: RecipeIndex,\r\n    planSettings: PlanSettings,\r\n    plan: Plan,\r\n    showLoadFileDialog: boolean,\r\n    showSaveFileDialog: boolean,\r\n    showRecipeEditor: boolean,\r\n    recipeToEdit?: Recipe,\r\n    error: string | null,\r\n    unsavedChanges: boolean \r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        let recipeIndex = new RecipeIndex();\r\n        let planSettings = new PlanSettings();\r\n\r\n        // Hard binding is needed if `loadFile` do not use arrow notation \r\n        // this.loadFile = this.loadFile.bind(this);\r\n        this.state = { \r\n            recipeIndex: recipeIndex,\r\n            planSettings: planSettings,\r\n            plan: optimizePlan(recipeIndex, new Plan(), planSettings),\r\n            showLoadFileDialog: false,\r\n            showSaveFileDialog: false,\r\n            showRecipeEditor: false,\r\n            recipeToEdit: undefined,\r\n            error: null,\r\n            unsavedChanges: false\r\n        };\r\n    }\r\n\r\n    addRecipes = (newRecipes: Recipe[], fromFile = false) => {\r\n        this.setState(st => {\r\n\r\n            // You want to save if it is not a first file load\r\n            let needsSave = st.unsavedChanges || !(fromFile && st.recipeIndex.count()===0);\r\n\r\n            let ret = {}\r\n            let newRecipeIndex = st.recipeIndex.addAll(newRecipes);\r\n\r\n            if(newRecipeIndex !== st.recipeIndex){\r\n\r\n                ret = {recipeIndex: newRecipeIndex,\r\n                       plan: optimizePlan(newRecipeIndex, st.plan, st.planSettings),\r\n                       unsavedChanges: needsSave};\r\n            }\r\n\r\n            return ret;\r\n        });\r\n    }\r\n\r\n    saveRecipe = (recipe: Recipe) => {\r\n        this.addRecipes([recipe]);\r\n        this.closeRecipeEditor();\r\n    }\r\n\r\n    onFileLoaded = (ev: ProgressEvent<FileReader>) => {\r\n        let res = ev.target?.result;\r\n\r\n        if(typeof res == \"string\")\r\n        {\r\n            try\r\n            {\r\n                this.addRecipes(deserializeRecipes(res), true);\r\n            }\r\n            catch(e)\r\n            {\r\n                this.setState({error: e.message});\r\n            }\r\n            \r\n        }\r\n        this.closeLoadFileDialog();\r\n    }\r\n\r\n    loadFile = (file: File) => {\r\n        var reader = new FileReader();\r\n        reader.onload = (ev) => this.onFileLoaded(ev);\r\n        reader.readAsText(file);\r\n    } \r\n\r\n    genRecipeFileContent = () => {\r\n        return serializeRecipes(this.state.recipeIndex.all());\r\n    }\r\n\r\n    fileSaved = () => {\r\n        this.setState({unsavedChanges: false});\r\n        this.closeSaveFileDialog();\r\n    }\r\n\r\n    showLoadFileDialog = () => {\r\n        this.setState({showLoadFileDialog: true});\r\n    }\r\n\r\n    showSaveFileDialog = () => {\r\n        this.setState({showSaveFileDialog: true});\r\n    }\r\n\r\n    showRecipeEditor = () => {\r\n        this.setState({showRecipeEditor: true});\r\n    }\r\n\r\n    closeLoadFileDialog = () => {\r\n        this.setState({showLoadFileDialog: false});\r\n    }\r\n\r\n    closeSaveFileDialog = () => {\r\n        this.setState({showSaveFileDialog: false});\r\n    }\r\n\r\n    closeRecipeEditor = () => {\r\n        this.setState({showRecipeEditor: false, recipeToEdit: undefined});\r\n    }\r\n\r\n    dismissError = () => {\r\n        this.setState({error: null});\r\n    }\r\n\r\n    updatePlanSettings = (ps: PlanSettings) => {\r\n        this.setState(st => {\r\n            return {planSettings: ps,\r\n                    plan: optimizePlan(st.recipeIndex, st.plan, ps)}\r\n        });\r\n    }\r\n\r\n    updateExplicitRecipes = (newExplicitRecipes: Recipe[]) => {\r\n        this.setState(st => {\r\n            let newPlan: Plan = Object.create(st.plan);\r\n            newPlan.explicitRecipes = newExplicitRecipes;\r\n            return {plan: optimizePlan(st.recipeIndex, newPlan, st.planSettings)};\r\n        });\r\n    }\r\n\r\n    editRecipe = (recipe: Recipe) => {\r\n        this.setState({showRecipeEditor: true,\r\n                       recipeToEdit: recipe});\r\n    }\r\n\r\n    deleteRecipe = (recipe: Recipe) => {\r\n        this.setState(st => {\r\n            st.recipeIndex.delete(recipe.getId());\r\n\r\n            return {recipeIndex: st.recipeIndex,\r\n                    plan: optimizePlan(st.recipeIndex, st.plan, st.planSettings),\r\n                    showRecipeEditor: false,\r\n                    recipeToEdit: undefined,\r\n                    unsavedChanges: true};\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container fluid className=\"p-3\">\r\n\r\n                <Alert variant=\"danger\" onClose={this.dismissError} show={!!this.state.error} dismissible>\r\n                    {this.state.error}\r\n                </Alert>\r\n\r\n                {(() => {\r\n                    if(this.state.unsavedChanges) {\r\n                        return <Beforeunload onBeforeunload={() => \"You'll lose your data!\"} />\r\n                    }\r\n                })()}\r\n\r\n                {(() => {\r\n                    if(this.state.showLoadFileDialog) {\r\n                        return (<LoadFileDialog\r\n                                    onClose={this.closeLoadFileDialog}\r\n                                    title=\"Load recipes file\"\r\n                                    loadButtonTitle=\"Load recipes\"\r\n                                    onLoad={this.loadFile}/>)\r\n                    }\r\n                })()}\r\n\r\n                {(() => {\r\n                    if(this.state.showSaveFileDialog) {\r\n                        return (<SaveFileDialog\r\n                                    onClose={this.closeSaveFileDialog}\r\n                                    title=\"Save recipes file\"\r\n                                    saveButtonTitle=\"Save recipes\"\r\n                                    data={this.genRecipeFileContent()}\r\n                                    type=\"application/mealee-recipes\"\r\n                                    initialFileName=\"recipes.json\"\r\n                                    onSave={this.fileSaved}/>)\r\n                    }\r\n                })()}\r\n\r\n                {(() => {\r\n                    if(this.state.showRecipeEditor) {\r\n                        return (<RecipeEditor\r\n                                    onClose={this.closeRecipeEditor}\r\n                                    onSave={this.saveRecipe}\r\n                                    onDelete={this.deleteRecipe}\r\n                                    recipe={this.state.recipeToEdit}/>)\r\n                    }\r\n                })()}\r\n\r\n                <Row>\r\n                    <Col> \r\n                        <Menu onLoadFile={this.showLoadFileDialog} \r\n                              onNewRecipe={this.showRecipeEditor}\r\n                              onSaveFile={this.showSaveFileDialog}\r\n                              unsavedChanges={this.state.unsavedChanges}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <PlanSettingsPanel planSettings={this.state.planSettings} \r\n                                           onUpdate={this.updatePlanSettings}/>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"pb-2\">\r\n                    <Col xs=\"3\">\r\n                        <RecipeSelector selectedRecipes={this.state.plan.explicitRecipes} \r\n                                        recipeIndex={this.state.recipeIndex}\r\n                                        maxNrSelected={this.state.planSettings.nrRecipes}\r\n                                        onUpdate={this.updateExplicitRecipes}\r\n                                        onEdit={this.editRecipe}/>\r\n                    </Col>\r\n                    <Col>\r\n                        <PlanVisualizer plan={this.state.plan} planSettings={this.state.planSettings}/>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    };\r\n};\r\n\r\nexport default App;","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}