{"version":3,"sources":["service/RecipeDB.ts","service/RecipeService.ts","filter/RandomFilter.ts","filter/MinIngredientsFilter.ts","filter/MaxReuseFilter.ts","filter/Filter.ts","model/PlanSettings.ts","model/Plan2.ts","model/Recipe.ts","component/RecipeQuickView.tsx","component/RecipeSelector.tsx","component/LoadFileDialog.tsx","component/SaveFileDialog.tsx","component/PlanSettings.tsx","component/Planner.tsx","component/IngredientLang.ts","component/RecipeEditor.tsx","PlanExporter.ts","App.tsx","index.js"],"names":["RecipeIndex","index","recipesMap","fieldAccessors","r","getTitle","getSummary","getIngredients","map","i","getName","join","fieldBoostFactors","termFilter","term","normalize","replace","toLowerCase","add","key","getId","toUpdate","has","JSON","stringify","get","delete","newMap","set","addDocumentToIndex","words","addAll","recipes","reduce","idx","recipe","search","q","query","undefined","acc","res","push","score","all","Array","from","values","removeDocumentFromIndex","Set","getAll","keys","count","size","this","createIndex","Map","new","RecipeService","db","ingredients","forEach","c","Intl","Collator","sort","compare","units","getUnit","MinIngredientsFilter","name","id","filter","explicitRecipes","selectedRecipes","remainingRecipes","ingredientsAlreadyUsed","concat","flatMap","scoredRecipes","ingredientsAlreadyUSed","sum","a","b","result","length","scoredRecipe","MaxReuseFilter","randomFilter","max","Math","floor","random","Optimization","filters","filterMap","f","createFilters","PlanSettings","nrRecipes","optimization","Object","create","Plan2","buckets","List","nrBuckets","setSize","bucketNr","recipeId","bucket","deDuplicate","ids","Ingredient","amount","unit","o","Error","Recipe","title","summary","source","sourceUrl","readyInMinutes","toJSON","toString","isArray","fromJSON","RecipeQuickView","n","Col","sm","className","Container","Row","Image","src","getReadyInMinutes","getSource","RecipeListItem","selected","onEdit","useDrag","item","type","collect","monitor","isDragging","drag","style","position","width","height","ListGroup","Item","ref","opacity","cursor","backgroundColor","top","right","zIndex","onClick","OverlayTrigger","placement","overlay","Popover","Title","as","Content","RecipeSelector","recipeIndex","plan","React","useState","setFilter","filteredRecipes","trim","selectedRecipeSet","getAllRecipeIds","listItems","Form","onSubmit","e","preventDefault","InputGroup","Prepend","Text","FormControl","placeholder","onChange","event","currentTarget","value","Group","controlId","LoadFileDialog","loadButtonTitle","onClose","onLoad","file","setFile","Modal","show","onHide","Header","closeButton","Body","target","files","Footer","Button","variant","disabled","SaveFileDialog","saveButtonTitle","onSave","data","initialFileName","extension","fileName","setFileName","Label","Control","download","PlanSettingsPanel","props","collapsed","setCollapsed","filterList","Accordion","defaultActiveKey","Card","Toggle","eventKey","Collapse","planSettings","newNrRecipes","newSettings","clone","onUpdate","changeNrRecipes","parseInt","filterId","changeOptimization","RecipeBox","bucketId","onDelete","Bucket","fluid","DroppableBucket","onDrop","onMove","useDrop","accept","drop","r2","isOver","left","Planner","recipeDB","updatePlan","addRecipe","bucketIdx","addRecipeId","deleteRecipe","deleteRecipeId","moveRecipe","to","cols","_","range","getNrBuckets","getRecipeIds","parseIngredients","text","errors","lines","split","line","parts","CodeMirror","Pos","message","startpos","startAmount","endAmount","s","Number","parseFloat","autocomplete","cm","getCursor","getLine","start","ch","end","nrpart","substring","match","charAt","word","slice","trimLeft","selection","indexOf","startsWith","list","defineMode","Location","startState","location","token","stream","state","sol","next","eatWhile","registerHelper","RecipeEditor","recipeJSON","setRecipeJSON","isTitleInvalid","setIsTitleInvalid","isIngredientsInvalid","setIsIngredientsInvalid","getAmount","ingredientCSV","setIngredientCSV","focusElement","createRef","ingredientEditorElement","onEntered","current","focus","fromTextArea","lineNumbers","mode","gutters","lint","extraKeys","on","instance","updateIngredients","getValue","showHint","hint","recipeService","getUnits","completeSingle","closeOnUnfocus","isInvalid","newVal","Feedback","rows","isNaN","getIngredientMap","ingredientMap","ingredientName","oneIngredientRecord","oneRecipeRecord","calculateShoppingList","ingredientList","ingredient","oneUsage","ingredientsRows","amounts","exportShoppingList","row","shift","exportPlan","uniqueRecipes","wb","XLSX","utils","book_new","planRows","bid","planWS","aoa_to_sheet","book_append_sheet","ingredientsWS","mapHeaderRow","unshift","mapDataRows","recipeIngredient","au","mapRows","mapWS","recipeRows","recipeWS","substr","bytes","write","bookType","bookSST","Blob","Dialog","Menu","onLoadFile","onNewRecipe","onSaveFile","unsavedChanges","Navbar","bg","Brand","href","aria-controls","Nav","NavDropdown","active","Divider","Link","process","App","addRecipes","newRecipes","fromFile","setState","st","needsSave","ret","newRecipeIndex","saveRecipe","closeRecipeEditor","onFileLoaded","ev","json","parse","version","deserializeRecipes","error","closeDialog","loadFile","reader","FileReader","onload","readAsText","genRecipeFileContent","str","TextEncoder","encode","serializeRecipes","fileSaved","showDialog","dialog","recipeToEdit","dismissError","updatePlanSettings","ps","plan2","setNrBuckets","editRecipe","renderDialog","LoadFile","SaveFile","SavePlanXLS","ShoppingList","readOnly","Alert","dismissible","onBeforeunload","xs","minHeight","Component","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById"],"mappings":"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","file":"static/js/main.edef197f.chunk.js","sourcesContent":["import {\r\n  Index,\r\n  createIndex,\r\n  addDocumentToIndex,\r\n  removeDocumentFromIndex,\r\n} from \"ndx\";\r\nimport { query, QueryResult } from \"ndx-query\";\r\nimport { words } from \"lodash\";\r\n\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nimport { Map } from \"immutable\";\r\n\r\nexport class RecipeIndex {\r\n  private readonly recipesMap: Map<string, Recipe>;\r\n  private readonly index: Index<string>;\r\n\r\n  private readonly fieldAccessors = [\r\n    (r: Recipe) => r.getTitle(),\r\n    (r: Recipe) => r.getSummary() ?? \"\",\r\n    (r: Recipe) =>\r\n      r\r\n        .getIngredients()\r\n        .map((i) => i.getName())\r\n        .join(\" \"),\r\n  ];\r\n\r\n  private readonly fieldBoostFactors = [2, 0.5, 1];\r\n\r\n  constructor(index?: Index<string>, recipesMap?: Map<string, Recipe>) {\r\n    this.index = index ? index : createIndex<string>(3);\r\n    this.recipesMap = recipesMap ? recipesMap : Map({});\r\n  }\r\n\r\n  private termFilter = (term: string) => {\r\n    return term\r\n      .normalize(\"NFD\")\r\n      .replace(/[\\u0300-\\u036f]/g, \"\")\r\n      .toLowerCase();\r\n  };\r\n\r\n  public static new = () => {\r\n    return new RecipeIndex();\r\n  };\r\n\r\n  // `add()` function will add documents to the index.\r\n  public add = (r: Recipe) => {\r\n    let key = r.getId();\r\n\r\n    let toUpdate = true;\r\n\r\n    if (this.recipesMap.has(key)) {\r\n      if (JSON.stringify(this.recipesMap.get(key)) === JSON.stringify(r)) {\r\n        toUpdate = false;\r\n      }\r\n    }\r\n\r\n    if (toUpdate) {\r\n      // Don't add the same document twice, ndx becomes crazy...\r\n      this.delete(key);\r\n      let newMap = this.recipesMap.set(key, r);\r\n\r\n      addDocumentToIndex(\r\n        this.index,\r\n        this.fieldAccessors,\r\n        // Tokenizer is a function that breaks text into words, phrases, symbols, or other meaningful elements\r\n        // called tokens.\r\n        // Lodash function `words()` splits string into an array of its words, see https://lodash.com/docs/#words for\r\n        // details.\r\n        words,\r\n        // Filter is a function that processes tokens and returns terms, terms are used in Inverted Index to\r\n        // index documents.\r\n        this.termFilter,\r\n        // Document key, it can be a unique document id or a reference to a document if you want to store all documents\r\n        // in memory.\r\n        key,\r\n        // Document.\r\n        r\r\n      );\r\n\r\n      return new RecipeIndex(this.index, newMap);\r\n    } else {\r\n      return this;\r\n    }\r\n  };\r\n\r\n  public addAll = (recipes: Recipe[]) => {\r\n    return recipes.reduce((idx: RecipeIndex, recipe: Recipe) => {\r\n      return idx.add(recipe);\r\n    }, this);\r\n  };\r\n\r\n  // `search()` function will be used to perform queries.\r\n  public search = (q: string) =>\r\n    query<string>(\r\n      this.index,\r\n      this.fieldBoostFactors,\r\n      // BM25 ranking function constants:\r\n      1.2, // BM25 k1 constant, controls non-linear term frequency normalization (saturation).\r\n      0.75, // BM25 b constant, controls to what degree document length normalizes tf values.\r\n      words,\r\n      this.termFilter,\r\n      // Set of removed documents, in this example we don't want to support removing documents from the index,\r\n      // so we can ignore it by specifying this set as `undefined` value.\r\n      undefined,\r\n      q\r\n    ).reduce((acc: QueryResult<Recipe>[], res) => {\r\n      let r = this.recipesMap.get(res.key);\r\n      if (r) {\r\n        acc.push({ key: r, score: res.score });\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n  public all = () => {\r\n    return Array.from(this.recipesMap.values());\r\n  };\r\n\r\n  public get = (key: string) => {\r\n    return this.recipesMap.get(key);\r\n  };\r\n\r\n  public delete = (key: string) => {\r\n    if (this.recipesMap.has(key)) {\r\n      let newMap = this.recipesMap.delete(key);\r\n      removeDocumentFromIndex(this.index, new Set(), key);\r\n      return new RecipeIndex(this.index, newMap);\r\n    } else {\r\n      return this;\r\n    }\r\n  };\r\n\r\n  public getAll = (keys: string[]) => {\r\n    return keys.reduce((acc: Recipe[], key) => {\r\n      let r = this.recipesMap.get(key);\r\n      if (r) {\r\n        acc.push(r);\r\n      }\r\n      return acc;\r\n    }, []);\r\n  };\r\n\r\n  public count = () => {\r\n    return this.recipesMap.size;\r\n  };\r\n}\r\n","import { RecipeIndex } from './RecipeDB'\r\n\r\nexport class RecipeService {\r\n\r\n    private readonly db: RecipeIndex;\r\n\r\n    constructor(db: RecipeIndex) {\r\n        this.db = db;\r\n    }\r\n\r\n    public getIngredients() {\r\n\r\n        let ingredients = new Set<string>();\r\n\r\n        this.db.all().forEach(r => {\r\n            r.getIngredients().forEach(i => {\r\n                ingredients.add(i.getName().toLowerCase());\r\n            })\r\n        });\r\n\r\n        const c = new Intl.Collator();\r\n        return Array.from(ingredients).sort(c.compare);\r\n    }\r\n\r\n    public getUnits() {\r\n\r\n        let units = new Set<string>();\r\n\r\n        this.db.all().forEach(r => {\r\n            r.getIngredients().forEach(i => {\r\n                units.add(i.getUnit().toLowerCase());\r\n            })\r\n        });\r\n\r\n        const c = new Intl.Collator();\r\n        return Array.from(units).sort(c.compare);\r\n    }\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getRandomInt(max: number) {\r\n  return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nexport class RandomFilter implements Filter {\r\n  public name = \"Random filter\";\r\n  public id = \"rnd\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    if (remainingRecipes.length === 0) {\r\n      return [];\r\n    } else {\r\n      return [remainingRecipes[getRandomInt(remainingRecipes.length)]];\r\n    }\r\n  };\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n  return recipe.getIngredients().reduce((sum, i) => {\r\n    if (ingredientsAlreadyUSed.has(i.getName())) {\r\n      return sum;\r\n    } else {\r\n      return sum + 1;\r\n    }\r\n  }, 0);\r\n}\r\n\r\nexport class MinIngredientsFilter implements Filter {\r\n  public name = \"Minimal number of ingredients\";\r\n  public id = \"miningredients\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    const ingredientsAlreadyUsed = new Set<string>(\r\n      explicitRecipes\r\n        .concat(selectedRecipes)\r\n        .flatMap((r) => r.getIngredients().map((i) => i.getName()))\r\n    );\r\n\r\n    const scoredRecipes = remainingRecipes\r\n      .map((r) => ({ recipe: r, score: getScore(ingredientsAlreadyUsed, r) }))\r\n      .sort((a, b) => {\r\n        if (a.score < b.score) {\r\n          return -1;\r\n        } else if (a.score > b.score) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    const result: Recipe[] = [];\r\n\r\n    if (scoredRecipes.length > 0) {\r\n      for (let scoredRecipe of scoredRecipes) {\r\n        if (scoredRecipes[0].score === scoredRecipe.score) {\r\n          result.push(scoredRecipe.recipe);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { Filter } from \"./Filter\";\r\nimport { Recipe } from \"../model/Recipe\";\r\n\r\nfunction getScore(ingredientsAlreadyUSed: Set<string>, recipe: Recipe) {\r\n  return recipe.getIngredients().reduce((sum, i) => {\r\n    if (ingredientsAlreadyUSed.has(i.getName())) {\r\n      return sum + 1;\r\n    } else {\r\n      return sum;\r\n    }\r\n  }, 0);\r\n}\r\n\r\nexport class MaxReuseFilter implements Filter {\r\n  public name = \"Maximal reuse of ingredients\";\r\n  public id = \"maxreuse\";\r\n  public filter = (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => {\r\n    const ingredientsAlreadyUsed = new Set<string>(\r\n      explicitRecipes\r\n        .concat(selectedRecipes)\r\n        .flatMap((r) => r.getIngredients().map((i) => i.getName()))\r\n    );\r\n\r\n    const scoredRecipes = remainingRecipes\r\n      .map((r) => ({ recipe: r, score: getScore(ingredientsAlreadyUsed, r) }))\r\n      .sort((a, b) => {\r\n        if (a.score < b.score) {\r\n          return 1;\r\n        } else if (a.score > b.score) {\r\n          return -1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n\r\n    const result: Recipe[] = [];\r\n\r\n    if (scoredRecipes.length > 0) {\r\n      for (let scoredRecipe of scoredRecipes) {\r\n        if (scoredRecipes[0].score === scoredRecipe.score) {\r\n          result.push(scoredRecipe.recipe);\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return result;\r\n  };\r\n}\r\n","import { Recipe } from \"../model/Recipe\";\r\n\r\nimport { RandomFilter } from \"./RandomFilter\";\r\nimport { MinIngredientsFilter } from \"./MinIngredientsFilter\";\r\nimport { MaxReuseFilter } from \"./MaxReuseFilter\";\r\n\r\nexport const randomFilter = new RandomFilter();\r\n\r\nexport interface Filter {\r\n  id: string;\r\n  name: string;\r\n  filter: (\r\n    explicitRecipes: Recipe[],\r\n    selectedRecipes: Recipe[],\r\n    remainingRecipes: Recipe[]\r\n  ) => Recipe[];\r\n}\r\n\r\nexport type Filters = {\r\n  all: () => Filter[];\r\n  get: (id: string) => Filter | undefined;\r\n};\r\n\r\nfunction createFilters() {\r\n  const filters = [\r\n    new MinIngredientsFilter(),\r\n    new MaxReuseFilter(),\r\n    randomFilter,\r\n  ];\r\n  const filterMap = new Map<string, Filter>(filters.map((f) => [f.id, f]));\r\n\r\n  return {\r\n    all: () => filters,\r\n    get: (id: string) => filterMap.get(id),\r\n  };\r\n}\r\n\r\nexport const filters: Filters = createFilters();\r\n","import { Filter, filters } from \"../filter/Filter\";\r\n\r\nexport enum Optimization {\r\n  MinimalNrIngrediants = 1,\r\n  MaximalResueOfIngredients,\r\n}\r\n\r\nexport class PlanSettings {\r\n  constructor() {\r\n    this.nrRecipes = 5;\r\n    this.optimization = filters.all()[0];\r\n  }\r\n\r\n  public clone(): PlanSettings {\r\n    return Object.create(this);\r\n  }\r\n\r\n  public nrRecipes: number;\r\n  public optimization: Filter;\r\n}\r\n","import { List, Set } from \"immutable\";\r\n\r\nexport class Plan2 {\r\n\r\n  // Don't store Recipes, only ids. They are immutable, so if they change...\r\n  private buckets = List<Set<string>>();\r\n\r\n  private constructor(buckets: List<Set<string>>) {\r\n    this.buckets = buckets;\r\n  }\r\n\r\n  public static new = (nrBuckets: number) => {\r\n    return new Plan2(List().setSize(nrBuckets));\r\n  };\r\n\r\n  public setNrBuckets(nrBuckets: number) {\r\n    return new Plan2(this.buckets.setSize(nrBuckets));\r\n  }\r\n\r\n  public getNrBuckets() {\r\n    return this.buckets.size;\r\n  }\r\n\r\n  public addRecipeId(bucketNr: number, recipeId: string) {\r\n    let bucket = this.buckets.get(bucketNr) ?? Set();\r\n    return new Plan2(this.buckets.set(bucketNr, bucket.add(recipeId)));\r\n  }\r\n\r\n  public deleteRecipeId(bucketNr: number, recipeId: string) {\r\n    let bucket = this.buckets.get(bucketNr) ?? Set();\r\n    return new Plan2(this.buckets.set(bucketNr, bucket.delete(recipeId)));\r\n  }\r\n\r\n  public getRecipeIds(bucketNr: number) {\r\n    let bucket = this.buckets.get(bucketNr) ?? Set();\r\n    return Array.from(bucket);\r\n  }\r\n\r\n  public getAllRecipeIds(deDuplicate: boolean = true) {\r\n    if(deDuplicate)\r\n    {\r\n        let ids = Set<string>();\r\n        for (let bucket of this.buckets) {\r\n            if (bucket) {\r\n                ids = ids.concat(bucket);\r\n            }\r\n        }\r\n        return Array.from(ids);\r\n    }\r\n    else\r\n    {\r\n        let ids = List<string>();\r\n        for (let bucket of this.buckets) {\r\n          if (bucket) {\r\n            ids = ids.concat(bucket);\r\n          }\r\n        }\r\n        return Array.from(ids);\r\n    }\r\n  }\r\n}\r\n","export interface IngredientJSON {\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n}\r\n\r\nexport interface RecipeJSON {\r\n  id: string;\r\n  title: string;\r\n  source?: string;\r\n  summary?: string;\r\n  readyInMinutes?: number;\r\n  ingredients: IngredientJSON[];\r\n}\r\n\r\ninterface RecipeFileJSON {\r\n  version: number;\r\n  recipes: RecipeJSON[];\r\n}\r\n\r\nexport class Ingredient {\r\n  private constructor(name: string, amount: number, unit: string) {\r\n    this.name = name;\r\n    this.amount = amount;\r\n    this.unit = unit;\r\n  }\r\n\r\n  public getName(): string {\r\n    return this.name;\r\n  }\r\n\r\n  public getAmount(): number {\r\n    return this.amount;\r\n  }\r\n\r\n  public getUnit(): string {\r\n    return this.unit;\r\n  }\r\n\r\n  public static fromJSON(o: IngredientJSON): Ingredient {\r\n    if (!o.name) {\r\n      throw new Error(\"Missing ingredient name\");\r\n    }\r\n\r\n    if (!o.unit) {\r\n      throw new Error(\"Missing ingredient unit\");\r\n    }\r\n\r\n    if (o.amount === undefined) {\r\n      throw new Error(\"Missing ingredient amount\");\r\n    }\r\n\r\n    return new Ingredient(o.name, o.amount, o.unit);\r\n  }\r\n\r\n  public toJSON(): IngredientJSON {\r\n    return {\r\n      name: this.name,\r\n      amount: this.amount,\r\n      unit: this.unit,\r\n    };\r\n  }\r\n\r\n  private name: string;\r\n  private amount: number;\r\n  private unit: string;\r\n}\r\n\r\nfunction uuidv4() {\r\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function (c) {\r\n    var r = (Math.random() * 16) | 0,\r\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\nexport class Recipe {\r\n  private constructor(id: string, title: string) {\r\n    this.id = id;\r\n    this.title = title;\r\n    this.ingredients = [];\r\n  }\r\n\r\n  public getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  public getTitle(): string {\r\n    return this.title;\r\n  }\r\n\r\n  public getSummary(): string | undefined {\r\n    return this.summary;\r\n  }\r\n\r\n  public getSource(): string | undefined {\r\n    return this.source;\r\n  }\r\n\r\n  public getReadyInMinutes(): number | undefined {\r\n    return this.readyInMinutes;\r\n  }\r\n\r\n  public getIngredients(): Ingredient[] {\r\n    return this.ingredients;\r\n  }\r\n\r\n  public static fromJSON(o: RecipeJSON): Recipe {\r\n    if (!o.id) {\r\n      o.id = uuidv4();\r\n    }\r\n\r\n    if (!o.title) {\r\n      throw new Error(\"Missing recipe title\");\r\n    }\r\n\r\n    let r = new Recipe(o.id, o.title);\r\n\r\n    r.summary = o.summary;\r\n    r.source = o.source;\r\n    r.readyInMinutes = o.readyInMinutes;\r\n\r\n    if (Array.isArray(o.ingredients)) {\r\n      r.ingredients = o.ingredients.map((i) => Ingredient.fromJSON(i));\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  public toJSON(): RecipeJSON {\r\n    return {\r\n      id: this.id,\r\n      title: this.title,\r\n      summary: this.summary,\r\n      source: this.source,\r\n      readyInMinutes: this.readyInMinutes,\r\n      ingredients: this.ingredients.map((i) => i.toJSON()),\r\n    };\r\n  }\r\n\r\n  private id: string;\r\n  private title: string;\r\n  private summary?: string;\r\n  private source?: string;\r\n  private sourceUrl?: string;\r\n  private readyInMinutes?: number;\r\n  private ingredients: Ingredient[];\r\n}\r\n\r\nexport function serializeRecipes(recipes: Recipe[]) {\r\n  let str = JSON.stringify({ version: 1, recipes: recipes });\r\n  let bytes = new TextEncoder().encode(str);\r\n  let blob = new Blob([bytes], {\r\n    type: \"application/json;charset=utf-8\",\r\n  });\r\n  return blob;\r\n}\r\n\r\nexport function deserializeRecipes(data: string) {\r\n  let json = JSON.parse(data);\r\n\r\n  if (Array.isArray(json)) {\r\n    let v0: RecipeJSON[] = json;\r\n    return v0.map(Recipe.fromJSON);\r\n  }\r\n\r\n  if (typeof json === \"object\") {\r\n    let r: RecipeFileJSON = json;\r\n\r\n    if (typeof r.version !== \"undefined\") {\r\n      if (r.version !== 1) {\r\n        throw new Error(\"Invalid recipe file version\");\r\n      }\r\n\r\n      if (Array.isArray(r.recipes)) {\r\n        return r.recipes.map(Recipe.fromJSON);\r\n      }\r\n    }\r\n  }\r\n\r\n  throw new Error(\"Invalid recipe file\");\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { Container, Col, Row, Image } from 'react-bootstrap';\r\n\r\nimport { Recipe } from '../model/Recipe';\r\n\r\ntype RecipePopoverProps = {\r\n    recipe: Recipe\r\n}\r\n\r\nexport const RecipeQuickView: FunctionComponent<RecipePopoverProps> = ({ recipe }) => {\r\n\r\n    const summary = recipe.getSummary() ? recipe.getSummary() : \"Summary is not available\"\r\n    const c = new Intl.Collator();\r\n    const ingredients = recipe.getIngredients().map(r => r.getName())\r\n        .sort(c.compare)\r\n        .map(n => <Col key={n} sm=\"auto\" className=\"border mt-1 ml-2 pt-2 pb-2\">{n}</Col>)\r\n\r\n    return (\r\n        <Container className=\"pl-0 pr-0\">\r\n            <Row className=\"pb-2\">\r\n                <Col>{summary}</Col>\r\n            </Row>\r\n            <Row className=\"pb-2\">\r\n                <Col sm=\"auto\"><Image src=\"clock20x20.jpg\" /></Col>\r\n                <Col sm=\"auto\">{recipe.getReadyInMinutes() ? \"\" + recipe.getReadyInMinutes() + \" mintes\" : \"unknown\"}</Col>\r\n                <Col sm=\"auto\"><Image src=\"babyowl17x20.jpg\" /></Col>\r\n                <Col sm=\"auto\">{recipe.getSource() ? recipe.getSource() : \"-\"}</Col>\r\n            </Row>\r\n            <Row>\r\n                {ingredients}\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { Form, ListGroup, FormControl, InputGroup } from 'react-bootstrap';\r\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\r\n\r\nimport { Gear, Eye } from 'react-bootstrap-icons';\r\n\r\nimport { RecipeQuickView } from './RecipeQuickView'\r\n\r\nimport { Recipe } from '../model/Recipe';\r\nimport { Plan2 } from '../model/Plan2';\r\nimport { RecipeIndex } from '../service/RecipeDB';\r\n\r\nimport { useDrag } from 'react-dnd'\r\n\r\ntype RecipeSelectorProps = {\r\n    recipeIndex: RecipeIndex,\r\n    plan: Plan2,\r\n    onEdit: (recipe: Recipe) => void\r\n}\r\n\r\ntype RecipeListItemProps = {\r\n    recipe: Recipe,\r\n    selected: boolean,\r\n    onEdit: (recipe: Recipe) => void\r\n}\r\n\r\nconst RecipeListItem: FunctionComponent<RecipeListItemProps> = ({ recipe, selected, onEdit }) => {\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: \"recipe\", id: recipe.getId() },\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div\r\n            className=\"hover\"\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}>\r\n\r\n            <ListGroup.Item\r\n                key={recipe.getId()}\r\n                ref={drag}\r\n                style={{\r\n                    opacity: isDragging ? 0.5 : 1,\r\n                    cursor: 'move',\r\n                    backgroundColor: selected ? '#CFEEFA    ' : undefined\r\n                }}>\r\n                {recipe.getTitle()}\r\n            </ListGroup.Item>\r\n\r\n            <div\r\n                className=\"hover-on\"\r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 10,\r\n                    right: 10,\r\n                    height: 20,\r\n                    width: 40,\r\n                    zIndex: 1,\r\n                    opacity: 0.5\r\n                }}>\r\n\r\n                <Gear height=\"18\" onClick={() => onEdit(recipe)} style={{ cursor: 'pointer' }} />\r\n                &nbsp;\r\n                <OverlayTrigger\r\n                    placement=\"right\"\r\n                    overlay={\r\n                        <Popover id=\"popover-basic\">\r\n                            <Popover.Title as=\"h4\">{recipe.getTitle()}</Popover.Title>\r\n                            <Popover.Content>\r\n                                <RecipeQuickView recipe={recipe} />\r\n                            </Popover.Content>\r\n                        </Popover>}>\r\n                    <Eye height=\"18\" style={{ cursor: 'pointer' }} />\r\n                </OverlayTrigger>\r\n\r\n            </div>\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\nexport const RecipeSelector: FunctionComponent<RecipeSelectorProps> = ({ recipeIndex, plan, onEdit }) => {\r\n\r\n    const [filter, setFilter] = React.useState(\"\");\r\n\r\n    const refresh = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setFilter(event.currentTarget.value);\r\n    }\r\n\r\n    const filteredRecipes = (filter.trim().length === 0) ?\r\n        recipeIndex.all() : recipeIndex.search(filter).map(res => res.key);\r\n\r\n    const selectedRecipeSet = new Set(plan.getAllRecipeIds())\r\n\r\n    const listItems = filteredRecipes\r\n        .map((recipe) =>\r\n            <RecipeListItem\r\n                key={recipe.getId()}\r\n                recipe={recipe}\r\n                onEdit={onEdit}\r\n                selected={selectedRecipeSet.has(recipe.getId())} />\r\n        );\r\n\r\n    return (\r\n        <Form className=\"pt-2 h-100 d-flex flex-column\" onSubmit={(e) => e.preventDefault()}>\r\n            <InputGroup className=\"mb-2\">\r\n                <InputGroup.Prepend>\r\n                    <InputGroup.Text id=\"basic-addon1\">@</InputGroup.Text>\r\n                </InputGroup.Prepend>\r\n                <FormControl type=\"text\" placeholder=\"Filter recipes\" onChange={refresh} />\r\n            </InputGroup>\r\n            <Form.Group controlId=\"recipeGroup\" className=\"flex-grow-1 overflow-auto\">\r\n                <ListGroup>{listItems}</ListGroup>\r\n            </Form.Group>\r\n        </Form>\r\n    );\r\n}\r\n","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, FormControl, Button} from 'react-bootstrap';\r\n\r\ntype LoadFileDialogProps = {\r\n    title: string,\r\n    loadButtonTitle: string,\r\n    onClose: () => void,\r\n    onLoad: (file: File) => void\r\n}\r\n\r\nexport const LoadFileDialog: FunctionComponent<LoadFileDialogProps> = ({title, loadButtonTitle, onClose, onLoad}) => {\r\n\r\n    const [file, setFile] = React.useState<null | File>(null);\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <FormControl type=\"file\" onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n                                                if(e.target.files)\r\n                                                {\r\n                                                    setFile(e.target.files[0])\r\n                                                }\r\n                                                else\r\n                                                {\r\n                                                    setFile(null)\r\n                                                }\r\n                                            }}/>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!file} \r\n                        onClick={() => {if(file) onLoad(file)}}>{loadButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Modal, Form, Button} from 'react-bootstrap';\r\n\r\nimport download from 'downloadjs'\r\n\r\ntype SaveFileDialogProps = {\r\n    title: string,\r\n    saveButtonTitle: string,\r\n    data: Blob,\r\n    type: string,\r\n    initialFileName: string,\r\n    extension: string,\r\n    onClose: () => void,\r\n    onSave: () => void\r\n}\r\n\r\nexport const SaveFileDialog: FunctionComponent<SaveFileDialogProps> \r\n                = ({title, saveButtonTitle, onClose, onSave, data, type, initialFileName, extension }) => {\r\n\r\n    const [fileName, setFileName] = React.useState(initialFileName);\r\n\r\n    const startDownload = () => {\r\n        download(data, fileName+\".\"+extension, type)\r\n    }\r\n\r\n    return (\r\n        <Modal show={true} onHide={onClose}>\r\n        <Modal.Header closeButton>\r\n        <Modal.Title>{title}</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n        <Form>\r\n        <Form.Group controlId=\"formBasicFileName\">\r\n        <Form.Label>File name</Form.Label>\r\n        <Form.Control type=\"fileName\" value={fileName} onChange={(e: React.ChangeEvent<HTMLInputElement>) => setFileName(e.target.value)}/>\r\n        </Form.Group>\r\n        </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n            <Button type=\"button\" variant=\"secondary\" onClick={onClose}>Close</Button>\r\n            <Button type=\"button\" variant=\"primary\" disabled={!fileName || fileName.length===0} \r\n                        onClick={() => {startDownload(); onSave()}}>{saveButtonTitle}</Button>\r\n        </Modal.Footer>   \r\n        </Modal>\r\n    );\r\n}","import React, {FunctionComponent} from 'react';\r\n\r\nimport {Accordion, Card} from 'react-bootstrap';\r\nimport {Form} from 'react-bootstrap';\r\n\r\nimport {PlanSettings} from '../model/PlanSettings';\r\nimport {filters} from '../filter/Filter';\r\n\r\ntype PlanSettingsPanelProps = {\r\n    planSettings: PlanSettings,\r\n    onUpdate: (planSettings: PlanSettings) => void\r\n}\r\n\r\nexport const PlanSettingsPanel: FunctionComponent<PlanSettingsPanelProps> = (props) => {\r\n\r\n    const [collapsed, setCollapsed] = React.useState(true);\r\n\r\n    const changeNrRecipes = (newNrRecipes: number) => {\r\n        let newSettings = props.planSettings.clone();\r\n        newSettings.nrRecipes = newNrRecipes;\r\n        props.onUpdate(newSettings);\r\n    }\r\n\r\n    const changeOptimization = (filterId: string) => {\r\n        let filter = filters.get(filterId);\r\n        if(filter)\r\n        {\r\n            let newSettings = props.planSettings.clone();\r\n            newSettings.optimization = filter;\r\n            props.onUpdate(newSettings);    \r\n        }\r\n    }\r\n\r\n    const filterList = filters.all().map(f => \r\n        <option value={f.id} key={f.id}>{f.name}</option>\r\n    )\r\n\r\n    return (\r\n        <Accordion defaultActiveKey=\"0\">\r\n        <Card>\r\n            <Accordion.Toggle as={Card.Header} variant=\"link\" eventKey=\"1\" onClick={() => setCollapsed(!collapsed)}>\r\n                Plan settings {collapsed ? \"[+]\" : \"[-]\"}\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey=\"1\">\r\n            <Card.Body>\r\n                <Form onSubmit={(e)=>e.preventDefault()}>\r\n                <Form.Group controlId=\"nrRecipes\">\r\n                    <Form.Label>Number of recipes:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.nrRecipes} \r\n                                  onChange={(e)=>changeNrRecipes(parseInt(e.target.value))}>\r\n                    <option key=\"3\">3</option>\r\n                    <option key=\"4\">4</option>\r\n                    <option key=\"5\">5</option>\r\n                    <option key=\"6\">6</option>\r\n                    <option key=\"7\">7</option>\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                <Form.Group controlId=\"optimization\">\r\n                    <Form.Label>Optimize by:</Form.Label>\r\n                    <Form.Control as=\"select\" value={props.planSettings.optimization.id} \r\n                                  onChange={(e)=>changeOptimization(e.target.value)}>\r\n                    {filterList}\r\n                    </Form.Control>\r\n                </Form.Group>\r\n                </Form>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n        </Accordion>\r\n    );    \r\n}\r\n","import React, { FunctionComponent } from 'react';\r\n\r\nimport { Container, Row, Col, Card } from 'react-bootstrap';\r\nimport { Popover, OverlayTrigger } from 'react-bootstrap';\r\nimport { Trash, Eye } from 'react-bootstrap-icons';\r\n\r\nimport { RecipeQuickView } from './RecipeQuickView'\r\n\r\nimport { RecipeIndex } from \"../service/RecipeDB\";\r\nimport { Recipe } from \"../model/Recipe\";\r\nimport { Plan2 } from \"../model/Plan2\";\r\n\r\nimport { useDrop, useDrag } from 'react-dnd'\r\nimport _ from 'lodash';\r\n\r\ntype RecipeBoxProps = {\r\n    bucketId: number,\r\n    recipe: Recipe,\r\n    onDelete: (recipeId: string) => void\r\n}\r\n\r\nconst RecipeBox: FunctionComponent<RecipeBoxProps> = ({ bucketId, recipe, onDelete }) => {\r\n\r\n    const [{ isDragging }, drag] = useDrag({\r\n        item: { type: \"recipe\", id: recipe.getId(), from: bucketId},\r\n        collect: (monitor) => ({\r\n            isDragging: !!monitor.isDragging()\r\n        })\r\n    })\r\n\r\n    return (\r\n        <div\r\n            ref={drag}\r\n            className=\"hover\"\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n                opacity: isDragging ? 0.5 : 1,\r\n                cursor: 'move',\r\n            }}>\r\n\r\n            <Card className=\"mt-2 mb-2\">\r\n                <Card.Body>{recipe.getTitle()}</Card.Body>\r\n            </Card>\r\n\r\n            <div\r\n                className=\"hover-on\"\r\n                style={{\r\n                    position: 'absolute',\r\n                    top: 0,\r\n                    right: 0,\r\n                    height: 40,\r\n                    width: 20,\r\n                    zIndex: 1,\r\n                    opacity: 0.5\r\n                }}>\r\n\r\n                <Trash height=\"18\" onClick={() => onDelete(recipe.getId())} style={{ cursor: 'pointer' }} />\r\n                <OverlayTrigger\r\n                    placement=\"right\"\r\n                    overlay={\r\n                        <Popover id=\"popover-basic\">\r\n                            <Popover.Title as=\"h4\">{recipe.getTitle()}</Popover.Title>\r\n                            <Popover.Content>\r\n                                <RecipeQuickView recipe={recipe} />\r\n                            </Popover.Content>\r\n                        </Popover>}>\r\n                    <Eye height=\"18\" style={{ cursor: 'pointer' }} />\r\n                </OverlayTrigger>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype BucketProps = {\r\n    bucketId: number,\r\n    recipes: Recipe[],\r\n    onDelete: (bucketid: number, recipeid: string) => void\r\n}\r\n\r\nconst Bucket: FunctionComponent<BucketProps> = ({ bucketId, recipes, onDelete }) => {\r\n\r\n    return (\r\n        <Card>\r\n            <Card.Header>Day #{bucketId + 1}</Card.Header>\r\n            <Container fluid>\r\n                {recipes.map(r => <RecipeBox key={r.getId()} bucketId={bucketId} recipe={r}\r\n                                        onDelete={(recipeId) => onDelete(bucketId, recipeId)} />)}\r\n            </Container>\r\n        </Card>\r\n    )\r\n}\r\n\r\ntype DroppableBucketProps = BucketProps & {\r\n    onDrop: (buckedId: number, recipeId: string) => void,\r\n    onMove: (from: number, to: number, recipeId: string) => void\r\n}\r\n\r\nconst DroppableBucket: FunctionComponent<DroppableBucketProps> = ({ bucketId, recipes, onDrop, onMove, onDelete }) => {\r\n\r\n    const [{ isOver }, drop] = useDrop({\r\n        accept: \"recipe\",\r\n        drop: (r) => {\r\n            let r2 = r as unknown as { id: string, from?: number };\r\n            if(r2.from !== undefined)\r\n            {\r\n                onMove(r2.from, bucketId, r2.id)\r\n            } \r\n            else\r\n            {\r\n                onDrop(bucketId, r2.id)\r\n            }\r\n        },\r\n        collect: monitor => ({\r\n            isOver: !!monitor.isOver(),\r\n        }),\r\n    })\r\n\r\n    return (\r\n        <div\r\n            ref={drop}\r\n            style={{\r\n                position: 'relative',\r\n                width: '100%',\r\n                height: '100%',\r\n            }}\r\n        >\r\n            <Bucket bucketId={bucketId} recipes={recipes} onDelete={onDelete}></Bucket>\r\n\r\n            {isOver && (\r\n                <div\r\n                    style={{\r\n                        position: 'absolute',\r\n                        top: 0,\r\n                        left: 0,\r\n                        height: '100%',\r\n                        width: '100%',\r\n                        zIndex: 1,\r\n                        opacity: 0.5,\r\n                        backgroundColor: 'yellow',\r\n                    }} />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\ntype PlannerProps = {\r\n    recipeDB: RecipeIndex,\r\n    plan: Plan2,\r\n    updatePlan: (plan: Plan2) => void\r\n}\r\n\r\nexport const Planner: FunctionComponent<PlannerProps> = ({ recipeDB, plan, updatePlan }) => {\r\n\r\n    const addRecipe = (bucketIdx: number, recipeId: string) => {\r\n        updatePlan(plan.addRecipeId(bucketIdx, recipeId))\r\n    }\r\n\r\n    const deleteRecipe = (bucketIdx: number, recipeId: string) => {\r\n        updatePlan(plan.deleteRecipeId(bucketIdx, recipeId))\r\n    }\r\n\r\n    const moveRecipe = (from: number, to: number, recipeId: string) => {\r\n        updatePlan(plan.deleteRecipeId(from, recipeId).addRecipeId(to, recipeId))\r\n    }\r\n\r\n    let cols = _.range(plan.getNrBuckets()).map(i => {\r\n        return (\r\n            <Col key={i}>\r\n                <DroppableBucket\r\n                    bucketId={i}\r\n                    recipes={recipeDB.getAll(plan.getRecipeIds(i))}\r\n                    onDrop={addRecipe}\r\n                    onDelete={deleteRecipe}\r\n                    onMove={moveRecipe} />\r\n            </Col>\r\n        )\r\n    })\r\n\r\n    return (\r\n        <Container className=\"pt-0 pb-2 pl-0 pr-0\">\r\n            <Row>\r\n                {cols}\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n}\r\n","import CodeMirror from \"codemirror\";\r\nimport \"codemirror/addon/hint/show-hint\";\r\n\r\nimport { IngredientJSON } from '../model/Recipe';\r\n\r\nCodeMirror.defineMode(\"ingredients\", () => {\r\n  var Location = {\r\n    INGREDIENT: 0,\r\n    AMOUNT: 1,\r\n    UNIT: 2,\r\n    ERROR: 3,\r\n  };\r\n\r\n  return {\r\n    startState: function () {\r\n      return {\r\n        location: Location.INGREDIENT,\r\n      };\r\n    },\r\n    token: function (stream, state) {\r\n      if (stream.sol()) {\r\n        state.location = Location.INGREDIENT;\r\n      }\r\n\r\n      var ch = stream.next();\r\n\r\n      if (ch === \";\") {\r\n        if (state.location === Location.INGREDIENT)\r\n          state.location = Location.AMOUNT;\r\n        else if (state.location === Location.AMOUNT)\r\n          state.location = Location.UNIT;\r\n        else state.location = Location.ERROR;\r\n      }\r\n\r\n      if (state.location === Location.ERROR) {\r\n        return \"error\";\r\n      }\r\n\r\n      if (ch === \";\") {\r\n        return \"keyword\";\r\n      }\r\n\r\n      if (state.location === Location.INGREDIENT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"atom\";\r\n      }\r\n\r\n      if (state.location === Location.AMOUNT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"number\";\r\n      }\r\n\r\n      if (state.location === Location.UNIT) {\r\n        stream.eatWhile(function (c: string) {\r\n          if (c !== \";\") {\r\n            return true;\r\n          }\r\n          return false;\r\n        });\r\n        return \"atom\";\r\n      }\r\n\r\n      return \"error\";\r\n    },\r\n  };\r\n});\r\n\r\nexport function parseIngredients(text: string, errors: CodeMirror.Annotation[]) {\r\n\r\n  let ingredients: IngredientJSON[] = [];\r\n\r\n  let lines: string[] = text.split(/\\r?\\n/);\r\n\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let line = lines[i];\r\n\r\n    if (line.trim().length > 0) {\r\n      let parts = line.split(\";\");\r\n\r\n      if (parts.length < 3) {\r\n        errors.push({\r\n          from: CodeMirror.Pos(i, 0),\r\n          to: CodeMirror.Pos(i, line.length),\r\n          message: \"Not enough parts. Syntax: <name>;<amount>;<unit>\",\r\n        });\r\n      } else if (parts.length > 3) {\r\n        let startpos = parts[0].length + parts[1].length + parts[2].length + 2;\r\n        errors.push({\r\n          from: CodeMirror.Pos(i, startpos),\r\n          to: CodeMirror.Pos(i, line.length),\r\n          message: \"Too many parts. Syntax: <name>;<amount>;<unit>\",\r\n        });\r\n      }\r\n      else {\r\n        let startAmount = parts[0].length + 1;\r\n        let endAmount = startAmount + parts[1].length;\r\n\r\n        parts = parts.map(s => s.trim());\r\n\r\n        if (parts[0].length === 0 || parts[1].length === 0 || parts[2].length === 0) {\r\n          errors.push({\r\n            from: CodeMirror.Pos(i, 0),\r\n            to: CodeMirror.Pos(i, line.length),\r\n            message: \"Empty part(s). Syntax: <name>;<amount>;<unit>\",\r\n          });\r\n        }\r\n        else if (\"\" + Number.parseFloat(parts[1]) !== parts[1]) {\r\n          errors.push({\r\n            from: CodeMirror.Pos(i, startAmount),\r\n            to: CodeMirror.Pos(i, endAmount),\r\n            message: \"Amount should be a number.\",\r\n          });\r\n        }\r\n        else {\r\n          ingredients.push({ name: parts[0], amount: Number.parseFloat(parts[1]), unit: parts[2] })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return ingredients;\r\n}\r\n\r\nCodeMirror.registerHelper(\"lint\", \"ingredients\", function (text: string) {\r\n  let errors: CodeMirror.Annotation[] = [];\r\n  parseIngredients(text, errors);\r\n  return errors;\r\n});\r\n\r\nexport function autocomplete(ingredients: string[], units: string[]) {\r\n  return function (\r\n    cm: CodeMirror.Editor,\r\n  ) {\r\n\r\n    var cursor = cm.getCursor(),\r\n      line = cm.getLine(cursor.line);\r\n    var start = cursor.ch,\r\n      end = cursor.ch;\r\n\r\n    let nrpart = (line.substring(0, end).match(/;/g) || []).length;\r\n\r\n    if (nrpart !== 0 && nrpart !== 2) {\r\n      return null;\r\n    }\r\n\r\n    while (start && line.charAt(start - 1) !== \";\") --start;\r\n    while (end < line.length && line.charAt(end) !== \";\") ++end;\r\n    var word = line.slice(start, end).trimLeft().toLowerCase();\r\n\r\n    let selection =\r\n      nrpart === 0\r\n        ? ingredients.filter((i) => i.indexOf(word) >= 0)\r\n        : units.filter((i) => i.startsWith(word));\r\n\r\n    if(selection.length === 1 && selection[0] === word) {\r\n        selection = []\r\n    }\r\n\r\n    return {\r\n      list: selection,\r\n      from: CodeMirror.Pos(cursor.line, start),\r\n      to: CodeMirror.Pos(cursor.line, end),\r\n    };\r\n  }\r\n};\r\n","import React, { FunctionComponent, ChangeEvent } from 'react';\r\nimport { Modal, Form, Button } from 'react-bootstrap';\r\n\r\nimport { RecipeJSON, Recipe, Ingredient } from '../model/Recipe';\r\nimport { RecipeService } from '../service/RecipeService';\r\n\r\nimport CodeMirror from 'codemirror';\r\nimport 'codemirror/lib/codemirror.css';\r\nimport 'codemirror/addon/lint/lint.css';\r\nimport 'codemirror/addon/hint/show-hint.css';\r\nimport 'codemirror/addon/selection/active-line.js';\r\nimport 'codemirror/addon/hint/show-hint';\r\nimport 'codemirror/addon/lint/lint.js';\r\nimport 'codemirror/addon/display/placeholder.js';\r\n\r\nimport { autocomplete, parseIngredients } from './IngredientLang'\r\n\r\ntype RecipeEditorProps = {\r\n    recipe?: Recipe,\r\n    recipeService: RecipeService,\r\n    onClose: () => void,\r\n    onSave: (recipe: Recipe) => void,\r\n    onDelete: (recipe: Recipe) => void\r\n}\r\n\r\nexport const RecipeEditor: FunctionComponent<RecipeEditorProps> = (props) => {\r\n\r\n    const [recipeJSON, setRecipeJSON] = React.useState<RecipeJSON>(\r\n        props.recipe ? props.recipe.toJSON() : Object.create({}));\r\n    const [isTitleInvalid, setIsTitleInvalid] = React.useState(!props.recipe);\r\n    const [isIngredientsInvalid, setIsIngredientsInvalid] = React.useState(false);\r\n\r\n    const generateIngredientCSV = (ingredients: Ingredient[]) => {\r\n        return ingredients.map(i => i.getName() + \";\" + i.getAmount() + \";\" + i.getUnit()).join(\"\\n\")\r\n    }\r\n\r\n    const [ingredientCSV, setIngredientCSV] = React.useState(props.recipe ?\r\n        generateIngredientCSV(props.recipe.getIngredients()) : \"\");\r\n\r\n    const setTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal = e.currentTarget.value;\r\n        setIsTitleInvalid(!newVal || newVal.length === 0);\r\n        setRecipeJSON(r => ({ ...r, ...{ title: newVal } }))\r\n    }\r\n\r\n    const setSummary = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({ ...r, ...{ summary: newVal } }))\r\n    }\r\n\r\n    const setSource = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: string = e.currentTarget.value;\r\n        setRecipeJSON(r => ({ ...r, ...{ source: newVal } }))\r\n    }\r\n\r\n    const setMinutes = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let newVal: number | undefined = Number.parseInt(e.currentTarget.value)\r\n        if (isNaN(newVal)) newVal = undefined\r\n        setRecipeJSON(r => ({ ...r, ...{ readyInMinutes: newVal } }))\r\n    }\r\n\r\n    const updateIngredients = (text: string) => {\r\n\r\n        setIngredientCSV(text);\r\n\r\n        let errors: CodeMirror.Annotation[] = [];\r\n        let ingredients = parseIngredients(text, errors);\r\n        let invalid = errors.length > 0;\r\n\r\n        if (invalid) {\r\n            setIsIngredientsInvalid(true);\r\n        }\r\n        else {\r\n            setIsIngredientsInvalid(false);\r\n            setRecipeJSON(r => ({ ...r, ...{ ingredients: ingredients } }))\r\n        }\r\n    }\r\n\r\n    const saveRecipe = () => {\r\n        props.onSave(Recipe.fromJSON(recipeJSON))\r\n    }\r\n\r\n    const deleteRecipe = () => {\r\n        if (props.recipe) {\r\n            props.onDelete(props.recipe)\r\n        }\r\n    }\r\n\r\n    const focusElement = React.createRef<HTMLInputElement>();\r\n    const ingredientEditorElement = React.createRef<HTMLTextAreaElement>();\r\n\r\n    return (\r\n        <Modal show={true} onHide={props.onClose} onEntered={() => {\r\n            if (focusElement.current) focusElement.current.focus();\r\n            if (ingredientEditorElement.current) {\r\n                let cm = CodeMirror.fromTextArea(ingredientEditorElement.current,\r\n                    {\r\n                        lineNumbers: false,\r\n                        mode: \"ingredients\",\r\n                        gutters: [\"CodeMirror-lint-markers\"],\r\n                        lint: true,\r\n                        extraKeys: { \"Ctrl-Space\": \"autocomplete\" }\r\n                    });\r\n\r\n                cm.on(\"change\", (instance: CodeMirror.Editor) => {\r\n                    updateIngredients(instance.getValue());\r\n                });\r\n                cm.on(\"cursorActivity\", (instance: CodeMirror.Editor) => {\r\n                    instance.showHint({\r\n                        hint: autocomplete(props.recipeService.getIngredients(), props.recipeService.getUnits()),\r\n                        completeSingle: false,\r\n                        closeOnUnfocus: true\r\n                    });\r\n                });\r\n            }\r\n        }}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Add new recipe</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Group controlId=\"formTitle\">\r\n                        <Form.Control type=\"title\" value={recipeJSON.title} placeholder=\"Title\"\r\n                            isInvalid={isTitleInvalid} onChange={setTitle}\r\n                            ref={focusElement}\r\n                            size=\"sm\" />\r\n                        <Form.Control.Feedback type=\"invalid\">Required field!</Form.Control.Feedback>\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formSummary\">\r\n                        <Form.Control\r\n                            as=\"textarea\"\r\n                            value={recipeJSON.summary}\r\n                            onChange={setSummary}\r\n                            rows={4}\r\n                            placeholder=\"Summary\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formSource\">\r\n                        <Form.Control\r\n                            type=\"source\"\r\n                            value={recipeJSON.source}\r\n                            onChange={setSource}\r\n                            placeholder=\"Where to find the recipe\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formMinutes\">\r\n                        <Form.Control\r\n                            type=\"minutes\"\r\n                            value={recipeJSON.readyInMinutes}\r\n                            onChange={setMinutes}\r\n                            placeholder=\"Number of minutes to cook\"\r\n                            size=\"sm\" />\r\n                    </Form.Group>\r\n                    <Form.Group controlId=\"formIngredients\">\r\n                        <Form.Control as=\"textarea\" value={ingredientCSV} ref={ingredientEditorElement}\r\n                            placeholder=\"Ingredients: <name>;<amount>;<unit>\" />\r\n                    </Form.Group>\r\n                </Form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button type=\"button\" variant=\"secondary\" onClick={props.onClose}>Close</Button>\r\n                <Button type=\"button\" variant=\"primary\" onClick={saveRecipe} disabled={isTitleInvalid || isIngredientsInvalid}>Save recipe</Button>\r\n                {(() => {\r\n                    if (props.recipe) {\r\n                        return (<Button type=\"button\" variant=\"primary\" onClick={deleteRecipe}>Delete recipe</Button>)\r\n                    }\r\n                })()}\r\n            </Modal.Footer>\r\n        </Modal>)\r\n}\r\n","import { RecipeIndex } from './service/RecipeDB';\r\n\r\nimport { Plan2 } from './model/Plan2';\r\nimport { Recipe } from './model/Recipe';\r\n\r\nimport XLSX from 'xlsx';\r\nimport _ from 'lodash';\r\n\r\nexport function getIngredientMap(recipes: Recipe[]) {\r\n    // Ingredient -> (recipe id -> [amount, unit][])\r\n    let ingredientMap = new Map<string, Map<string, [number, string][]>>();\r\n\r\n    recipes.forEach(r => {\r\n\r\n        r.getIngredients().forEach(i => {\r\n            let ingredientName = i.getName().toLowerCase();\r\n            let oneIngredientRecord = ingredientMap.get(ingredientName);\r\n            if (!oneIngredientRecord) {\r\n                oneIngredientRecord = new Map()\r\n                ingredientMap.set(ingredientName, oneIngredientRecord);\r\n            }\r\n\r\n            let oneRecipeRecord = oneIngredientRecord.get(r.getId()) ?? [];\r\n            oneRecipeRecord.push([i.getAmount(), i.getUnit().toLowerCase()]);\r\n            oneIngredientRecord.set(r.getId(), oneRecipeRecord);\r\n        });\r\n    });\r\n\r\n    return ingredientMap;\r\n}\r\n\r\nfunction calculateShoppingList(\r\n    ingredientMap: Map<string, Map<string, [number, string][]>>,\r\n    ingredients: string[]) {\r\n    let ingredientList = ingredients.map(name => {\r\n\r\n        let oneIngredientRecord = new Map<string, number>()\r\n        let ingredient = ingredientMap.get(name) ?? new Map<string, [number, string][]>()\r\n\r\n        // Group ingredient usages by unit\r\n        for (let oneUsage of ingredient.values()) {\r\n            for (let [amount, unit] of oneUsage) {\r\n                oneIngredientRecord.set(unit,\r\n                    (oneIngredientRecord.get(unit) ?? 0) + amount)\r\n            }\r\n        }   \r\n\r\n        return { \"name\": name, \"amounts\": oneIngredientRecord }\r\n    });\r\n\r\n    let ingredientsRows = []\r\n\r\n    for (let { name, amounts } of ingredientList) {\r\n        let line: [string] = [name]\r\n        for (let [unit, amount] of amounts) {\r\n            line.push(\"\" + amount + \" \" + unit)\r\n        }\r\n        ingredientsRows.push(line)\r\n    }\r\n\r\n    return ingredientsRows;\r\n}\r\n\r\n// Exports ShoppingList as list of MD lines\r\nexport function exportShoppingList(recipeIndex: RecipeIndex, plan: Plan2) {\r\n    // Wan't here the recipes as many times as they appear in the plan\r\n    let recipes = recipeIndex.getAll(plan.getAllRecipeIds(false)); \r\n    let ingredientMap = getIngredientMap(recipes);\r\n    let c = new Intl.Collator();\r\n    let ingredients = Array.from(ingredientMap.keys()).sort(c.compare);\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n\r\n    let res = \"\";\r\n\r\n    for (let row of ingredientsRows) {\r\n        res += \"**\" + row.shift() + \"**\";\r\n        res += \" - \";\r\n        res += row.join(\" + \");\r\n        res += \"\\n\";\r\n    }\r\n\r\n    return res;\r\n}\r\n\r\n// Exports Plan as XLSX\r\nexport function exportPlan(recipeIndex: RecipeIndex, plan: Plan2): Blob {\r\n    // Wan't here the recipes as many times as they appear in the plan\r\n    let recipes = recipeIndex.getAll(plan.getAllRecipeIds(false));\r\n    let uniqueRecipes = new Set(recipes);\r\n    let ingredientMap = getIngredientMap(recipes);\r\n    let ingredients = Array.from(ingredientMap.keys()).sort();\r\n\r\n    let wb = XLSX.utils.book_new();\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate map\r\n\r\n    let planRows = _.range(0, plan.getNrBuckets()).map(bid => \r\n        [\"Day #\"+(bid+1)].concat(\r\n            recipeIndex.getAll(plan.getRecipeIds(bid)).map(r => r.getTitle())));\r\n    let planWS = XLSX.utils.aoa_to_sheet(planRows);\r\n    XLSX.utils.book_append_sheet(wb, planWS, \"Plan\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Calculate shopping list\r\n\r\n    let ingredientsRows = calculateShoppingList(ingredientMap, ingredients);\r\n    let ingredientsWS = XLSX.utils.aoa_to_sheet(ingredientsRows);\r\n    XLSX.utils.book_append_sheet(wb, ingredientsWS, \"Shopping list\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate ingredient map\r\n\r\n    const mapHeaderRow = recipes.map(r => r.getTitle())\r\n    mapHeaderRow.unshift(\"\")\r\n\r\n    const mapDataRows = ingredients.map(name => {\r\n\r\n        let line = [name]\r\n\r\n        for (let r of recipes) {\r\n            let ingredient = ingredientMap.get(name) ?? new Map<string, [number, string][]>();\r\n            let recipeIngredient = ingredient.get(r.getId());\r\n            if (recipeIngredient) {\r\n                line.push(recipeIngredient.map(au => \"\" + au[0] + \" \" + au[1]).join(\", \"));\r\n            }\r\n            else {\r\n                line.push(\"\");\r\n            }\r\n\r\n        }\r\n\r\n        return line;\r\n    });\r\n\r\n    let mapRows = [mapHeaderRow].concat(mapDataRows);\r\n    let mapWS = XLSX.utils.aoa_to_sheet(mapRows);\r\n    XLSX.utils.book_append_sheet(wb, mapWS, \"Ingredient map\");\r\n\r\n    // ----------------------------------------------------------------------------------------\r\n    // Generate recipes\r\n\r\n    // Recipes must be converted to a set to eliminate duplications\r\n    for (let r of uniqueRecipes) {\r\n        let recipeRows = [\r\n            [\"Title\", r.getTitle()],\r\n            [\"Summary\", r.getSummary() ?? \"-\"],\r\n            [\"Ready in minutes\", r.getReadyInMinutes() ?? \"-\"],\r\n            [\"Source\", r.getSource() ?? \"-\"],\r\n            [\"Ingredients:\"]\r\n        ];\r\n\r\n        for (let i of r.getIngredients()) {\r\n            recipeRows.push([i.getName().toLowerCase(), i.getAmount(), i.getUnit().toLowerCase()])\r\n        }\r\n\r\n        let recipeWS = XLSX.utils.aoa_to_sheet(recipeRows);\r\n        XLSX.utils.book_append_sheet(wb, recipeWS, r.getTitle().substr(0,31));\r\n    }\r\n\r\n    let bytes = XLSX.write(wb, { bookType: 'xlsx', bookSST: false, type: 'array' });\r\n    return new Blob([bytes], {\r\n        type: 'application/octet-stream'\r\n    });\r\n}\r\n","import React, { FunctionComponent } from \"react\";\r\n\r\nimport { Navbar, Nav, NavDropdown, Button, Image } from \"react-bootstrap\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\nimport { Form, Modal, Alert } from \"react-bootstrap\";\r\n\r\nimport { RecipeIndex } from \"./service/RecipeDB\";\r\nimport { RecipeService } from \"./service/RecipeService\";\r\n\r\nimport { PlanSettings } from \"./model/PlanSettings\";\r\nimport { Plan2 } from \"./model/Plan2\";\r\n\r\nimport { Recipe, serializeRecipes, deserializeRecipes } from \"./model/Recipe\";\r\nimport { RecipeSelector } from \"./component/RecipeSelector\";\r\nimport { LoadFileDialog } from \"./component/LoadFileDialog\";\r\nimport { SaveFileDialog } from \"./component/SaveFileDialog\";\r\nimport { PlanSettingsPanel } from \"./component/PlanSettings\";\r\nimport { Planner } from \"./component/Planner\";\r\nimport { RecipeEditor } from \"./component/RecipeEditor\";\r\n\r\nimport { exportPlan, exportShoppingList } from \"./PlanExporter\";\r\n\r\nimport { Beforeunload } from \"react-beforeunload\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\ntype MenuProps = {\r\n  onLoadFile: () => void;\r\n  onNewRecipe: () => void;\r\n  onSaveFile: () => void;\r\n  unsavedChanges: boolean;\r\n};\r\n\r\nfunction getVersionNumber() {\r\n  return `${process.env.REACT_APP_VERSION}`;\r\n}\r\n\r\nconst Menu: FunctionComponent<MenuProps> = ({\r\n  onLoadFile,\r\n  onNewRecipe,\r\n  onSaveFile,\r\n  unsavedChanges,\r\n}) => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\">\r\n      <Navbar.Brand href=\"#home\">Mealee</Navbar.Brand>\r\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n      <Navbar.Collapse id=\"basic-navbar-nav\">\r\n        <Nav className=\"container-fluid\">\r\n          <NavDropdown title=\"Recipes\" id=\"collasible-nav-dropdown\">\r\n            <NavDropdown.Item href=\"#\" active={false} onClick={onLoadFile}>\r\n              Load recipes...\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Item\r\n              href=\"#\"\r\n              active={false}\r\n              onClick={onSaveFile}\r\n              disabled={!unsavedChanges}\r\n            >\r\n              Save recipes...\r\n            </NavDropdown.Item>\r\n            <NavDropdown.Divider />\r\n            <NavDropdown.Item href=\"#\" active={false} onClick={onNewRecipe}>\r\n              Add new recipe...\r\n            </NavDropdown.Item>\r\n          </NavDropdown>\r\n          <Nav.Item className=\"ml-auto\">\r\n            <Nav.Link>v{getVersionNumber()}</Nav.Link>\r\n          </Nav.Item>\r\n        </Nav>\r\n      </Navbar.Collapse>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\ntype AppState = {\r\n  recipeIndex: RecipeIndex;\r\n  planSettings: PlanSettings;\r\n  plan2: Plan2;\r\n  showDialog?: Dialog;\r\n  recipeToEdit?: Recipe;\r\n  error: string | null;\r\n  unsavedChanges: boolean;\r\n};\r\n\r\nenum Dialog {\r\n  LoadFile,\r\n  SaveFile,\r\n  RecipeEditor,\r\n  SavePlanXLS,\r\n  ShoppingList,\r\n}\r\n\r\nclass App extends React.Component<{}, AppState> {\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    let recipeIndex = new RecipeIndex();\r\n    let planSettings = new PlanSettings();\r\n\r\n    // Hard binding is needed if `loadFile` do not use arrow notation\r\n    // this.loadFile = this.loadFile.bind(this);\r\n    this.state = {\r\n      recipeIndex: recipeIndex,\r\n      planSettings: planSettings,\r\n      plan2: Plan2.new(planSettings.nrRecipes),\r\n      showDialog: undefined,\r\n      recipeToEdit: undefined,\r\n      error: null,\r\n      unsavedChanges: false,\r\n    };\r\n  }\r\n\r\n  addRecipes = (newRecipes: Recipe[], fromFile = false) => {\r\n    this.setState((st) => {\r\n      // You want to save if it is not a first file load\r\n      let needsSave =\r\n        st.unsavedChanges || !(fromFile && st.recipeIndex.count() === 0);\r\n\r\n      let ret = {};\r\n      let newRecipeIndex = st.recipeIndex.addAll(newRecipes);\r\n\r\n      if (newRecipeIndex !== st.recipeIndex) {\r\n        ret = {\r\n          recipeIndex: newRecipeIndex,\r\n          unsavedChanges: needsSave,\r\n        };\r\n      }\r\n\r\n      return ret;\r\n    });\r\n  };\r\n\r\n  saveRecipe = (recipe: Recipe) => {\r\n    this.addRecipes([recipe]);\r\n    this.closeRecipeEditor();\r\n  };\r\n\r\n  onFileLoaded = (ev: ProgressEvent<FileReader>) => {\r\n    let res = ev.target?.result;\r\n\r\n    if (typeof res == \"string\") {\r\n      try {\r\n        this.addRecipes(deserializeRecipes(res), true);\r\n      } catch (e) {\r\n        this.setState({ error: e.message });\r\n      }\r\n    }\r\n    this.closeDialog();\r\n  };\r\n\r\n  loadFile = (file: File) => {\r\n    var reader = new FileReader();\r\n    reader.onload = (ev) => this.onFileLoaded(ev);\r\n    reader.readAsText(file, \"UTF-8\");\r\n  };\r\n\r\n  genRecipeFileContent = () => {\r\n    return serializeRecipes(this.state.recipeIndex.all());\r\n  };\r\n\r\n  fileSaved = () => {\r\n    this.setState({ unsavedChanges: false });\r\n    this.closeDialog();\r\n  };\r\n\r\n  showDialog = (dialog: Dialog) => {\r\n    return () => this.setState({ showDialog: dialog });\r\n  };\r\n\r\n  closeDialog = () => {\r\n    this.setState({ showDialog: undefined });\r\n  };\r\n\r\n  closeRecipeEditor = () => {\r\n    this.setState({ recipeToEdit: undefined, showDialog: undefined });\r\n  };\r\n\r\n  dismissError = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  updatePlanSettings = (ps: PlanSettings) => {\r\n    this.setState((st) => {\r\n      return {\r\n        planSettings: ps,\r\n        plan2: st.plan2.setNrBuckets(ps.nrRecipes)\r\n      };\r\n    });\r\n  };\r\n\r\n  updatePlan = (plan: Plan2) => {\r\n    this.setState({\r\n      plan2: plan\r\n    });\r\n  };\r\n\r\n  editRecipe = (recipe: Recipe) => {\r\n    this.setState({ showDialog: Dialog.RecipeEditor, recipeToEdit: recipe });\r\n  };\r\n\r\n  deleteRecipe = (recipe: Recipe) => {\r\n    this.setState((st) => {\r\n      let newRecipeIndex = st.recipeIndex.delete(recipe.getId());\r\n\r\n      return {\r\n        recipeIndex: newRecipeIndex,\r\n        showDialog: undefined,\r\n        recipeToEdit: undefined,\r\n        unsavedChanges: true,\r\n      };\r\n    });\r\n  };\r\n\r\n  renderDialog = () => {\r\n    switch (this.state.showDialog) {\r\n      case Dialog.LoadFile: {\r\n        return (\r\n          <LoadFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Load recipes file\"\r\n            loadButtonTitle=\"Load recipes\"\r\n            onLoad={this.loadFile}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.SaveFile: {\r\n        return (\r\n          <SaveFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Save recipes file\"\r\n            saveButtonTitle=\"Save recipes\"\r\n            data={this.genRecipeFileContent()}\r\n            type=\"application/json\"\r\n            initialFileName=\"recipes\"\r\n            extension=\"json\"\r\n            onSave={this.fileSaved}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.RecipeEditor: {\r\n        return (\r\n          <RecipeEditor\r\n            onClose={this.closeRecipeEditor}\r\n            onSave={this.saveRecipe}\r\n            onDelete={this.deleteRecipe}\r\n            recipe={this.state.recipeToEdit}\r\n            recipeService={new RecipeService(this.state.recipeIndex)}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.SavePlanXLS: {\r\n        return (\r\n          <SaveFileDialog\r\n            onClose={this.closeDialog}\r\n            title=\"Save plan\"\r\n            saveButtonTitle=\"Save plan\"\r\n            data={exportPlan(this.state.recipeIndex, this.state.plan2)}\r\n            type=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\r\n            initialFileName=\"plan\"\r\n            extension=\"xlsx\"\r\n            onSave={this.closeDialog}\r\n          />\r\n        );\r\n      }\r\n\r\n      case Dialog.ShoppingList: {\r\n        return (\r\n          <Modal show={true} onHide={this.closeDialog}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Shopping list</Modal.Title>\r\n            </Modal.Header>\r\n\r\n            <Modal.Body>\r\n              <Form>\r\n                <Form.Control\r\n                  as=\"textarea\"\r\n                  rows={20}\r\n                  cols={80}\r\n                  value={exportShoppingList(this.state.recipeIndex, this.state.plan2)}\r\n                  readOnly\r\n                />\r\n              </Form>\r\n            </Modal.Body>\r\n\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={this.closeDialog}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n        );\r\n      }\r\n\r\n      default: {\r\n        return <></>;\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container fluid className=\"p-3 d-flex flex-column vh-100\">\r\n        <Alert\r\n          variant=\"danger\"\r\n          onClose={this.dismissError}\r\n          show={!!this.state.error}\r\n          dismissible\r\n        >\r\n          {this.state.error}\r\n        </Alert>\r\n\r\n        {(() => {\r\n          if (this.state.unsavedChanges) {\r\n            return (\r\n              <Beforeunload onBeforeunload={() => \"You'll lose your data!\"} />\r\n            );\r\n          }\r\n        })()}\r\n\r\n        {this.renderDialog()}\r\n\r\n        <Row>\r\n          <Col>\r\n            <Menu\r\n              onLoadFile={this.showDialog(Dialog.LoadFile)}\r\n              onNewRecipe={this.showDialog(Dialog.RecipeEditor)}\r\n              onSaveFile={this.showDialog(Dialog.SaveFile)}\r\n              unsavedChanges={this.state.unsavedChanges}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <PlanSettingsPanel\r\n              planSettings={this.state.planSettings}\r\n              onUpdate={this.updatePlanSettings}\r\n            />\r\n          </Col>\r\n        </Row>\r\n        {(() => {\r\n          if (this.state.recipeIndex.count() === 0) {\r\n            return (\r\n              <Row>\r\n                <Col xs=\"12\">\r\n                  <Alert key=\"recipe\" variant=\"warning\">\r\n                    No recipes are available\r\n                </Alert>\r\n                </Col>\r\n              </Row>\r\n            );\r\n          } else {\r\n            return (\r\n              <Row className=\"h-100\" style={{ minHeight: 0 }}>\r\n                <Col xs=\"3\" className=\"h-100\" style={{ minHeight: 0 }}>\r\n\r\n                  <RecipeSelector\r\n                    plan={this.state.plan2}\r\n                    recipeIndex={this.state.recipeIndex}\r\n                    onEdit={this.editRecipe}\r\n                  />\r\n\r\n                </Col>\r\n                <Col>\r\n\r\n                  <Container className=\"pt-2 pl-0 pr-0\">\r\n                    <Row>\r\n                      <Col>\r\n                        <Planner\r\n                          recipeDB={this.state.recipeIndex}\r\n                          plan={this.state.plan2}\r\n                          updatePlan={this.updatePlan}\r\n                        />\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col>\r\n                        <Button\r\n                          className=\"float-right\"\r\n                          onClick={this.showDialog(Dialog.SavePlanXLS)}\r\n                        >\r\n                          Export plan &nbsp;\r\n                          <Image src=\"xlsx_logo.svg\" height=\"18\" />\r\n                        </Button>\r\n                        <Button\r\n                          className=\"float-right mr-2\"\r\n                          onClick={this.showDialog(Dialog.ShoppingList)}\r\n                        >\r\n                          Show shopping list &nbsp;\r\n                          <Image src=\"todoist_logo.svg\" height=\"18\" />\r\n                        </Button>\r\n                      </Col>\r\n                    </Row>\r\n                  </Container>\r\n                </Col>\r\n              </Row>\r\n            );\r\n          }\r\n        })()}\r\n      </Container >\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import './index.css';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { DndProvider } from 'react-dnd'\r\nimport { HTML5Backend } from 'react-dnd-html5-backend'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <DndProvider backend={HTML5Backend}>\r\n      <App />\r\n    </DndProvider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}